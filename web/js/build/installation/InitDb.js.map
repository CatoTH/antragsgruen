{"version":3,"sources":["installation/InitDb.ts"],"names":["InitDb","$form","$testDBcaller","this","find","dbTestUrl","data","dbTestUrlNotSoPretty","$","on","prop","val","attr","click","testDb","bind","gotoLanguageVariant","prototype","ev","href","window","location","split","value","testDbResult","ret","$pending","$success","$error","$createTables","removeClass","addClass","text","_this","csrf","params","sqlType","sqlHost","sqlUsername","sqlPassword","sqlDB","_csrf","post","fail","err","status","alert","responseText","exports"],"mappings":"yGAAA,IAAAA,EAAA,WAII,SAAAA,EAAoBC,GAChB,IAAIC,GADYC,KAAAF,MAAAA,GACUG,KAAK,iBAC/BD,KAAKE,UAAYH,EAAcI,KAAK,OACpCH,KAAKI,qBAAuBL,EAAcI,KAAK,qBAE/CE,EAAE,gBAAgBC,GAAG,QAAS,WAC1BD,EAAE,oBAAoBE,KAAK,WAAW,KAE1CF,EAAE,oBAAoBC,GAAG,SAAU,WAC3BD,EAAEL,MAAMO,KAAK,YACbF,EAAE,gBAAgBG,IAAI,IAAIC,KAAK,cAAe,MAItDV,EAAcW,MAAMV,KAAKW,OAAOC,KAAKZ,OACV,IAAvBK,EAAE,YAAYG,OAA0C,IAA3BH,EAAE,gBAAgBG,OAC/CT,EAAcW,QAGlBL,EAAE,aAAaC,GAAG,wBAAyBN,KAAKa,oBAAoBD,KAAKZ,OAgEjF,OA7DYH,EAAAiB,UAAAD,oBAAR,SAA4BE,EAAIZ,GAC5B,IAAIa,EAAOC,OAAOC,SAASF,KAAKG,MAAM,KAAK,GAC3CH,GAAQ,aAAeb,EAAKiB,MAC5BH,OAAOC,SAASF,KAAOA,GAGnBnB,EAAAiB,UAAAO,aAAR,SAAqBC,GACjB,IAAIC,EAAWlB,EAAE,mBACbmB,EAAWnB,EAAE,kBACboB,EAASpB,EAAE,gBACXqB,EAAgBrB,EAAE,iBAClBiB,EAAa,SACbE,EAASG,YAAY,UACjBL,EAAoB,eACpBI,EAAcE,SAAS,kBAEvBF,EAAcC,YAAY,oBAG9BF,EAAOE,YAAY,UACnBF,EAAOxB,KAAK,WAAW4B,KAAKP,EAAW,OACvCI,EAAcC,YAAY,mBAE9BJ,EAASK,SAAS,WAGd/B,EAAAiB,UAAAH,OAAR,WAAA,IAAAmB,EAAA9B,KACQuB,EAAWlB,EAAE,mBACbmB,EAAWnB,EAAE,kBACboB,EAASpB,EAAE,gBAEX0B,EAAO1B,EAAE,qBAAqBG,MAC9BwB,EAAS,CACLC,QAAW5B,EAAE,uBAAuBG,MACpC0B,QAAW7B,EAAE,uBAAuBG,MACpC2B,YAAe9B,EAAE,2BAA2BG,MAC5C4B,YAAe/B,EAAE,2BAA2BG,MAC5C6B,MAAShC,EAAE,qBAAqBG,MAChC8B,MAASP,GAEb1B,EAAE,+BAA+BE,KAAK,aACtCyB,EAAwB,gBAAI,GAEhCT,EAASI,YAAY,UACrBF,EAAOG,SAAS,UAChBJ,EAASI,SAAS,UAElBvB,EAAEkC,KAAKvC,KAAKE,UAAW8B,EAAQhC,KAAKqB,aAAaT,KAAKZ,OAAOwC,KAAK,SAACC,GAC5C,MAAfA,EAAIC,QACJV,EAAyB,iBAAI,IAC7B3B,EAAEkC,KAAKT,EAAK1B,qBAAsB4B,EAAQ,SAACV,GACvCQ,EAAKT,aAAaC,GAClBjB,EAAE,0BAA0BG,IAAI,OACjCgC,KAAK,SAACC,GACLE,MAAM,+BAAiCF,EAAIC,OAAS,MAAQD,EAAIG,iBAGpED,MAAM,+BAAiCF,EAAIC,OAAS,MAAQD,EAAIG,iBAIhF/C,EAvFA,GAAagD,EAAAhD,OAAAA","file":"InitDb.js","sourcesContent":["export class InitDb {\n    private dbTestUrl: string;\n    private dbTestUrlNotSoPretty: string;\n\n    constructor(private $form: JQuery) {\n        let $testDBcaller = $form.find(\".testDBcaller\");\n        this.dbTestUrl = $testDBcaller.data('url');\n        this.dbTestUrlNotSoPretty = $testDBcaller.data('url-not-so-pretty');\n\n        $('#sqlPassword').on('keyup', function () {\n            $('#sqlPasswordNone').prop('checked', false);\n        });\n        $('#sqlPasswordNone').on('change', function () {\n            if ($(this).prop('checked')) {\n                $('#sqlPassword').val('').attr('placeholder', '');\n            }\n        });\n\n        $testDBcaller.click(this.testDb.bind(this));\n        if ($('#sqlHost').val() != '' || $('#sqlPassword').val() != '') {\n            $testDBcaller.click();\n        }\n\n        $(\"#language\").on('changed.fu.selectlist', this.gotoLanguageVariant.bind(this));\n    }\n\n    private gotoLanguageVariant(ev, data) {\n        let href = window.location.href.split('?')[0];\n        href += '?language=' + data.value;\n        window.location.href = href;\n    }\n\n    private testDbResult(ret) {\n        let $pending = $('.testDBRpending'),\n            $success = $('.testDBsuccess'),\n            $error = $('.testDBerror'),\n            $createTables = $('.createTables');\n        if (ret['success']) {\n            $success.removeClass('hidden');\n            if (ret['alreadyCreated']) {\n                $createTables.addClass('alreadyCreated');\n            } else {\n                $createTables.removeClass('alreadyCreated');\n            }\n        } else {\n            $error.removeClass('hidden');\n            $error.find('.result').text(ret['error']);\n            $createTables.removeClass('alreadyCreated');\n        }\n        $pending.addClass('hidden');\n    }\n\n    private testDb() {\n        let $pending = $('.testDBRpending'),\n            $success = $('.testDBsuccess'),\n            $error = $('.testDBerror'),\n\n            csrf = $('input[name=_csrf]').val(),\n            params = {\n                'sqlType': $(\"input[name=sqlType]\").val(),\n                'sqlHost': $(\"input[name=sqlHost]\").val(),\n                'sqlUsername': $(\"input[name=sqlUsername]\").val(),\n                'sqlPassword': $(\"input[name=sqlPassword]\").val(),\n                'sqlDB': $(\"input[name=sqlDB]\").val(),\n                '_csrf': csrf\n            };\n        if ($(\"input[name=sqlPasswordNone]\").prop(\"checked\")) {\n            params['sqlPasswordNone'] = 1;\n        }\n        $pending.removeClass('hidden');\n        $error.addClass('hidden');\n        $success.addClass('hidden');\n\n        $.post(this.dbTestUrl, params, this.testDbResult.bind(this)).fail((err) => {\n            if (err.status === 404) {\n                params['disablePrettyUrl'] = '1';\n                $.post(this.dbTestUrlNotSoPretty, params, (ret) => {\n                    this.testDbResult(ret);\n                    $('input[name=prettyUrls]').val('0');\n                }).fail((err) => {\n                    alert(\"An internal error occurred: \" + err.status + \" / \" + err.responseText);\n                });\n            } else {\n                alert(\"An internal error occurred: \" + err.status + \" / \" + err.responseText);\n            }\n        });\n    }\n}\n"]}
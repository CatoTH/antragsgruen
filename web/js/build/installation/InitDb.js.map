{"version":3,"sources":["installation/InitDb.js","installation/InitDb.ts"],"names":["define","require","exports","Object","defineProperty","value","InitDb","constructor","$form","this","$testDBcaller","find","dbTestUrl","data","dbTestUrlNotSoPretty","$","on","prop","val","attr","testDb","bind","trigger","gotoLanguageVariant","href","window","location","split","testDbResult","ret","$pending","$success","$error","$createTables","removeClass","addClass","text","csrf","params","sqlType","sqlHost","sqlUsername","sqlPassword","sqlDB","_csrf","post","fail","err","status","alert","responseText"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,YAAS,ECHrBJ,EAAAI,OAAA,MAII,WAAAC,CAAoBC,GAAAC,KAAAD,MAAAA,EAChB,IAAIE,EAAgBF,EAAMG,KAAK,iBAC/BF,KAAKG,UAAYF,EAAcG,KAAK,OACpCJ,KAAKK,qBAAuBJ,EAAcG,KAAK,qBAE/CE,EAAE,gBAAgBC,GAAG,SAAS,WAC1BD,EAAE,oBAAoBE,KAAK,WAAW,EAC1C,IACAF,EAAE,oBAAoBC,GAAG,UAAU,WAC3BD,EAAEN,MAAMQ,KAAK,YACbF,EAAE,gBAAgBG,IAAI,IAAIC,KAAK,cAAe,GAEtD,IAEAT,EAAcM,GAAG,QAASP,KAAKW,OAAOC,KAAKZ,OAChB,IAAvBM,EAAE,YAAYG,OAA0C,IAA3BH,EAAE,gBAAgBG,OAC/CR,EAAcY,QAAQ,SAG1BP,EAAE,aAAaC,GAAG,SAAUP,KAAKc,oBAAoBF,KAAKZ,MAC9D,CAEQ,mBAAAc,GACJ,IAAIC,EAAOC,OAAOC,SAASF,KAAKG,MAAM,KAAK,GAC3CH,GAAQ,aAAeT,EAAE,aAAaG,MACtCO,OAAOC,SAASF,KAAOA,CAC3B,CAEQ,YAAAI,CAAaC,GACjB,IAAIC,EAAWf,EAAE,mBACbgB,EAAWhB,EAAE,kBACbiB,EAASjB,EAAE,gBACXkB,EAAgBlB,EAAE,iBAClBc,EAAa,SACbE,EAASG,YAAY,UACjBL,EAAoB,eACpBI,EAAcE,SAAS,kBAEvBF,EAAcC,YAAY,oBAG9BF,EAAOE,YAAY,UACnBF,EAAOrB,KAAK,WAAWyB,KAAKP,EAAW,OACvCI,EAAcC,YAAY,mBAE9BJ,EAASK,SAAS,SACtB,CAEQ,MAAAf,GACJ,IAAIU,EAAWf,EAAE,mBACbgB,EAAWhB,EAAE,kBACbiB,EAASjB,EAAE,gBAEXsB,EAAOtB,EAAE,qBAAqBG,MAC9BoB,EAAS,CACLC,QAAWxB,EAAE,uBAAuBG,MACpCsB,QAAWzB,EAAE,uBAAuBG,MACpCuB,YAAe1B,EAAE,2BAA2BG,MAC5CwB,YAAe3B,EAAE,2BAA2BG,MAC5CyB,MAAS5B,EAAE,qBAAqBG,MAChC0B,MAASP,GAEbtB,EAAE,+BAA+BE,KAAK,aACtCqB,EAAwB,gBAAI,GAEhCR,EAASI,YAAY,UACrBF,EAAOG,SAAS,UAChBJ,EAASI,SAAS,UAElBpB,EAAE8B,KAAKpC,KAAKG,UAAW0B,EAAQ7B,KAAKmB,aAAaP,KAAKZ,OAAOqC,MAAMC,IAC5C,MAAfA,EAAIC,QACJV,EAAyB,iBAAI,IAC7BvB,EAAE8B,KAAKpC,KAAKK,qBAAsBwB,GAAST,IACvCpB,KAAKmB,aAAaC,GAClBd,EAAE,0BAA0BG,IAAI,IAAI,IACrC4B,MAAMC,IACLE,MAAM,+BAAiCF,EAAIC,OAAS,MAAQD,EAAIG,aAAa,KAGjFD,MAAM,+BAAiCF,EAAIC,OAAS,MAAQD,EAAIG,aDThE,GCYZ,EDPJ","file":"InitDb.js","sourcesContent":[null,"export class InitDb {\n    private dbTestUrl: string;\n    private dbTestUrlNotSoPretty: string;\n\n    constructor(private $form: JQuery) {\n        let $testDBcaller = $form.find(\".testDBcaller\");\n        this.dbTestUrl = $testDBcaller.data('url');\n        this.dbTestUrlNotSoPretty = $testDBcaller.data('url-not-so-pretty');\n\n        $('#sqlPassword').on('keyup', function () {\n            $('#sqlPasswordNone').prop('checked', false);\n        });\n        $('#sqlPasswordNone').on('change', function () {\n            if ($(this).prop('checked')) {\n                $('#sqlPassword').val('').attr('placeholder', '');\n            }\n        });\n\n        $testDBcaller.on(\"click\", this.testDb.bind(this));\n        if ($('#sqlHost').val() != '' || $('#sqlPassword').val() != '') {\n            $testDBcaller.trigger(\"click\");\n        }\n\n        $(\"#language\").on('change', this.gotoLanguageVariant.bind(this));\n    }\n\n    private gotoLanguageVariant() {\n        let href = window.location.href.split('?')[0];\n        href += '?language=' + $(\"#language\").val();\n        window.location.href = href;\n    }\n\n    private testDbResult(ret) {\n        let $pending = $('.testDBRpending'),\n            $success = $('.testDBsuccess'),\n            $error = $('.testDBerror'),\n            $createTables = $('.createTables');\n        if (ret['success']) {\n            $success.removeClass('hidden');\n            if (ret['alreadyCreated']) {\n                $createTables.addClass('alreadyCreated');\n            } else {\n                $createTables.removeClass('alreadyCreated');\n            }\n        } else {\n            $error.removeClass('hidden');\n            $error.find('.result').text(ret['error']);\n            $createTables.removeClass('alreadyCreated');\n        }\n        $pending.addClass('hidden');\n    }\n\n    private testDb() {\n        let $pending = $('.testDBRpending'),\n            $success = $('.testDBsuccess'),\n            $error = $('.testDBerror'),\n\n            csrf = $('input[name=_csrf]').val(),\n            params = {\n                'sqlType': $(\"input[name=sqlType]\").val(),\n                'sqlHost': $(\"input[name=sqlHost]\").val(),\n                'sqlUsername': $(\"input[name=sqlUsername]\").val(),\n                'sqlPassword': $(\"input[name=sqlPassword]\").val(),\n                'sqlDB': $(\"input[name=sqlDB]\").val(),\n                '_csrf': csrf\n            };\n        if ($(\"input[name=sqlPasswordNone]\").prop(\"checked\")) {\n            params['sqlPasswordNone'] = 1;\n        }\n        $pending.removeClass('hidden');\n        $error.addClass('hidden');\n        $success.addClass('hidden');\n\n        $.post(this.dbTestUrl, params, this.testDbResult.bind(this)).fail((err) => {\n            if (err.status === 404) {\n                params['disablePrettyUrl'] = '1';\n                $.post(this.dbTestUrlNotSoPretty, params, (ret) => {\n                    this.testDbResult(ret);\n                    $('input[name=prettyUrls]').val('0');\n                }).fail((err) => {\n                    alert(\"An internal error occurred: \" + err.status + \" / \" + err.responseText);\n                });\n            } else {\n                alert(\"An internal error occurred: \" + err.status + \" / \" + err.responseText);\n            }\n        });\n    }\n}\n"]}
{"version":3,"sources":["frontend/MergeSingleAmendment.js","frontend/MergeSingleAmendment.ts"],"names":["define","require","exports","AntragsgruenEditor_1","Object","defineProperty","value","constructor","this","editors","collisionEditors","$form","$","$collisionHolder","$checkCollisions","$affectedParagraphs","$otherStatsFields","$stepWizardHolder","find","$steps","on","ev","preventDefault","loadCollisions","gotoStep","each","i","el","initAffectedParagraph","onSubmit","bind","no","n","removeClass","addClass","children","scrollintoview","top_offset","$paragraph","val","trigger","prop","key","data","length","AntragsgruenEditor","attr","url","sections","otherAmendmentsStatus","text","$el","version","changed","sectionId","paragraphNo","srcId","editor","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","$input","post","newSections","_csrf","collisionsLoaded","html","$texteditors","id","parents","first"],"mappings":"AAAAA,OAAO,CAAC,UAAW,UAAW,iCAAiC,SAAUC,EAASC,EAASC,GACvF,aACAC,OAAOC,eAAeH,EAAS,aAAc,CAAEI,OAAO,ICqL1D,IApLA,MAWI,WAAAC,GAJQC,KAAAC,QAAgC,GAChCD,KAAAE,iBAAuD,CAAA,EAI3DF,KAAKG,MAAQC,EAAE,uBACfJ,KAAKK,iBAAmBD,EAAE,8BAC1BJ,KAAKM,iBAAmBF,EAAE,6BAC1BJ,KAAKO,oBAAsBH,EAAE,oCAC7BJ,KAAKQ,kBAAoBJ,EAAE,gCAE3BJ,KAAKS,kBAAoBL,EAAE,sBAAsBM,KAAK,UACtDV,KAAKW,OAAS,CACV,EAAKX,KAAKG,MAAMO,KAAK,aACrB,EAAKV,KAAKG,MAAMO,KAAK,aACrB,EAAKV,KAAKG,MAAMO,KAAK,cAGzBV,KAAKM,iBAAiBM,GAAG,SAAUC,IAC/BA,EAAGC,iBACHd,KAAKe,gBAAgB,IAEzBf,KAAKW,OAAO,GAAKD,KAAK,WAAWE,GAAG,SAAUC,IAC1CA,EAAGC,iBACHd,KAAKgB,SAAS,IAAI,IAEtBhB,KAAKO,oBAAoBU,MAAK,CAACC,EAAGC,KAC9BnB,KAAKoB,sBAAsBD,EAAG,IAElCnB,KAAKG,MAAMS,GAAG,SAAUZ,KAAKqB,SAASC,KAAKtB,OAE3CA,KAAKgB,SAAS,IAClB,CAEQ,QAAAA,CAASO,GACb,IAAK,IAAIC,KAAKxB,KAAKW,OACXa,GAAKD,EACLvB,KAAKW,OAAOa,GAAGC,YAAY,UAE3BzB,KAAKW,OAAOa,GAAGE,SAAS,UAGhC1B,KAAKS,kBAAkBkB,WAAWF,YAAY,UAC9CzB,KAAKS,kBAAkBC,KAAK,aAAea,GAAIG,SAAS,UACxD1B,KAAKS,kBAAkBmB,eAAe,CAACC,YAAa,IACxD,CAEQ,qBAAAT,CAAsBD,GAC1B,IAAIW,EAAa1B,EAAEe,GAEnBW,EAAWpB,KAAK,0BAA0BE,GAAG,UAAU,KACY,YAA3DkB,EAAWpB,KAAK,kCAAkCqB,MAClDD,EAAWL,YAAY,mBAAmBC,SAAS,mBAEnDI,EAAWJ,SAAS,mBAAmBD,YAAY,kBACvD,IACDO,QAAQ,UACXF,EAAWpB,KAAK,yBAAyBE,GAAG,UAAU,KAC9CkB,EAAWpB,KAAK,yBAAyBuB,KAAK,WAC9CH,EAAWJ,SAAS,WAAWD,YAAY,aAE3CK,EAAWL,YAAY,WAAWC,SAAS,YAC/C,IACDM,QAAQ,UAEX,IAAIE,EAAMJ,EAAWK,KAAK,cAAgB,IAAML,EAAWK,KAAK,gBAC5DL,EAAWpB,KAAK,+BAA+B0B,OAAS,IACxDpC,KAAKC,QAAQiC,EAAM,aAAe,IAAIvC,EAAA0C,mBAAmBP,EAAWpB,KAAK,6CAA6C4B,KAAK,QAE3HR,EAAWpB,KAAK,+BAA+B0B,OAAS,IACxDpC,KAAKC,QAAQiC,EAAM,aAAe,IAAIvC,EAAA0C,mBAAmBP,EAAWpB,KAAK,6CAA6C4B,KAAK,OAEnI,CAEQ,cAAAvB,GACJf,KAAKgB,SAAS,KAEd,IAAIuB,EAAMvC,KAAKM,iBAAiB6B,KAAK,OACjCK,EAAW,CAAA,EACXC,EAAwB,CAAA,EAE5BzC,KAAKO,oBAAoBU,MAAK,CAACC,EAAGC,KAC9B,IAKIuB,EALAC,EAAMvC,EAAEe,GACRyB,EAAUD,EAAIjC,KAAK,kCAAkCqB,MACrDc,EAAUF,EAAIjC,KAAK,yBAAyBuB,KAAK,WACjDa,EAAYH,EAAIR,KAAK,cACrBY,EAAcJ,EAAIR,KAAK,gBAG3B,GAAIU,EAAS,CACT,MAAMG,EAAQF,EAAY,IAAMC,GAA2B,aAAZH,EAAyB,YAAc,aACtF,IAAIK,EAAiBjD,KAAKC,QAAQ+C,GAAOE,YACrCC,EAAWF,EAAOG,eACa,IAAxBH,EAAOI,QAAY,MAC1BJ,EAAOI,QAAQC,KAAKC,WAAWN,GAAQO,YACvCd,EAAOO,EAAOG,UACdH,EAAOQ,QAAQN,IAEfT,EAAOO,EAAOG,SAEtB,MAEQV,EADY,aAAZE,EACOD,EAAIR,KAAK,sBAETQ,EAAIR,KAAK,4BAIiBuB,IAArClB,EAASG,EAAIR,KAAK,iBAClBK,EAASG,EAAIR,KAAK,eAAiB,CAAA,GAEvCK,EAASG,EAAIR,KAAK,eAAeQ,EAAIR,KAAK,iBAAmBO,CAAI,IAGrE1C,KAAKQ,kBAAkBS,MAAK,CAACC,EAAGC,KAC5B,IAAIwC,EAAgBvD,EAAEe,GACtBsB,EAAsBkB,EAAOxB,KAAK,iBAAmBwB,EAAO5B,KAAK,IAGrE3B,EAAEwD,KAAKrB,EAAK,CACRsB,YAAerB,EACfC,sBAAyBA,EACzBqB,MAAS9D,KAAKG,MAAMO,KAAK,uBAAuBqB,OACjD/B,KAAK+D,iBAAiBzC,KAAKtB,MAClC,CAEQ,gBAAA+D,CAAiBC,GACrBhE,KAAKE,iBAAmB,CAAA,EACxBF,KAAKK,iBAAiB2D,KAAKA,GAC3B,IAAIC,EAAejE,KAAKK,iBAAiBK,KAAK,yCAE1CuD,EAAa7B,OAAS,GACtB6B,EAAahD,MAAK,CAACC,EAAGC,KAClB,IAAI+C,EAAK9D,EAAEe,GAAImB,KAAK,MACpBtC,KAAKE,iBAAiBgE,GAAM,IAAIvE,EAAA0C,mBAAmB6B,EAAG,GAGlE,CAEQ,QAAA7C,GACJrB,KAAKO,oBAAoBU,MAAK,CAACC,EAAGC,KAC9B,IAAIW,EAAa1B,EAAEe,GACfyB,EAAUd,EAAWpB,KAAK,kCAAkCqB,MAC5Dc,EAAUf,EAAWpB,KAAK,yBAAyBuB,KAAK,WACxD0B,EAAS7B,EAAWpB,KAAK,iBAE7B,GAAImC,EAAS,CACT,IAAIX,EAAMJ,EAAWK,KAAK,cAAgB,IAAML,EAAWK,KAAK,iBAA+B,aAAZS,EAAyB,YAAc,aACtHK,EAAiBjD,KAAKC,QAAQiC,GAAKgB,iBACJ,IAAxBD,EAAOI,QAAY,MAC1BJ,EAAOI,QAAQC,KAAKC,WAAWN,GAAQO,YAE3CG,EAAO5B,IAAIkB,EAAOG,UACtB,KACoB,aAAZR,EACAe,EAAO5B,IAAID,EAAWK,KAAK,uBAE3BwB,EAAO5B,IAAID,EAAWK,KAAK,uBAEnC,IAEJ,IAAK,IAAI+B,KAAMlE,KAAKE,iBAAkB,CAClC,IAAI+C,EAAiBjD,KAAKE,iBAAiBgE,GAAIhB,iBACZ,IAAxBD,EAAOI,QAAY,MAC1BJ,EAAOI,QAAQC,KAAKC,WAAWN,GAAQO,YAE3C,IAAIQ,EAAOf,EAAOG,UAElBhD,EAAE,IAAM8D,GAAIC,QAAQ,2BAA2BC,QAAQ1D,KAAK,cAAcqB,IAAIiC,EAClF,CACJ,ED5BJ","file":"MergeSingleAmendment.js","sourcesContent":[null,"import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collisionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollisions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private $stepWizardHolder: JQuery;\n    private $steps: {[no: string]: JQuery};\n    private editors: AntragsgruenEditor[] = [];\n    private collisionEditors: {[id: string]: AntragsgruenEditor} = {};\n    private $otherStatsFields: JQuery;\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collisionHolder = $(\".amendmentCollisionsHolder\");\n        this.$checkCollisions = $(\".checkAmendmentCollisions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n        this.$otherStatsFields = $(\".otherAmendmentStatus select\");\n\n        this.$stepWizardHolder = $(\"#MergeSingleWizard\").find(\".steps\");\n        this.$steps = {\n            \"1\": this.$form.find(\"> .step_1\"),\n            \"2\": this.$form.find(\"> .step_2\"),\n            \"3\": this.$form.find(\"> .step_3\")\n        };\n\n        this.$checkCollisions.on(\"click\", (ev) => {\n            ev.preventDefault();\n            this.loadCollisions();\n        });\n        this.$steps[\"1\"].find(\".goto_2\").on(\"click\", (ev) => {\n            ev.preventDefault();\n            this.gotoStep(\"2\");\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n        this.$form.on(\"submit\", this.onSubmit.bind(this));\n\n        this.gotoStep(\"1\");\n    }\n\n    private gotoStep(no: string) {\n        for (let n in this.$steps) {\n            if (n == no) {\n                this.$steps[n].removeClass(\"hidden\");\n            } else {\n                this.$steps[n].addClass(\"hidden\");\n            }\n        }\n        this.$stepWizardHolder.children().removeClass(\"active\");\n        this.$stepWizardHolder.find(\".goto_step\" + no).addClass(\"active\");\n        this.$stepWizardHolder.scrollintoview({top_offset: -50});\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n\n        $paragraph.find(\".versionSelector input\").on(\"change\", () => {\n            if ($paragraph.find(\".versionSelector input:checked\").val() == \"modified\") {\n                $paragraph.removeClass(\"originalVersion\").addClass(\"modifiedVersion\");\n            } else {\n                $paragraph.addClass(\"originalVersion\").removeClass(\"modifiedVersion\");\n            }\n        }).trigger(\"change\");\n        $paragraph.find(\".modifySelector input\").on(\"change\", () => {\n            if ($paragraph.find(\".modifySelector input\").prop(\"checked\")) {\n                $paragraph.addClass(\"changed\").removeClass(\"unchanged\");\n            } else {\n                $paragraph.removeClass(\"changed\").addClass(\"unchanged\");\n            }\n        }).trigger(\"change\");\n\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        if ($paragraph.find(\".originalVersion.modifyText\").length > 0) {\n            this.editors[key + '_original'] = new AntragsgruenEditor($paragraph.find(\".originalVersion.modifyText > .texteditor\").attr(\"id\"));\n        }\n        if ($paragraph.find(\".modifiedVersion.modifyText\").length > 0) {\n            this.editors[key + '_modified'] = new AntragsgruenEditor($paragraph.find(\".modifiedVersion.modifyText > .texteditor\").attr(\"id\"));\n        }\n    }\n\n    private loadCollisions() {\n        this.gotoStep(\"3\");\n\n        let url = this.$checkCollisions.data(\"url\"),\n            sections = {},\n            otherAmendmentsStatus = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                version = $el.find(\".versionSelector input:checked\").val(),\n                changed = $el.find(\".modifySelector input\").prop(\"checked\"),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (changed) {\n                const srcId = sectionId + \"_\" + paragraphNo + (version === 'modified' ? '_modified' : '_original');\n                let editor: editor = this.editors[srcId].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                if (version === 'modified') {\n                    text = $el.data(\"modified-amendment\");\n                } else {\n                    text = $el.data(\"unchanged-amendment\");\n                }\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        this.$otherStatsFields.each((i, el) => {\n            let $input:JQuery = $(el);\n            otherAmendmentsStatus[$input.data(\"amendment-id\")] = $input.val();\n        });\n\n        $.post(url, {\n            'newSections': sections,\n            'otherAmendmentsStatus': otherAmendmentsStatus,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collisionsLoaded.bind(this));\n    }\n\n    private collisionsLoaded(html) {\n        this.collisionEditors = {};\n        this.$collisionHolder.html(html);\n        let $texteditors = this.$collisionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                let id = $(el).attr(\"id\");\n                this.collisionEditors[id] = new AntragsgruenEditor(id);\n            });\n        }\n    }\n\n    private onSubmit() {\n        this.$affectedParagraphs.each((i, el) => {\n            let $paragraph = $(el),\n                version = $paragraph.find(\".versionSelector input:checked\").val(),\n                changed = $paragraph.find(\".modifySelector input\").prop(\"checked\"),\n                $input = $paragraph.find(\".modifiedText\");\n\n            if (changed) {\n                let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\") + (version === 'modified' ? '_modified' : '_original'),\n                    editor: editor = this.editors[key].getEditor();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                }\n                $input.val(editor.getData());\n            } else {\n                if (version === 'modified') {\n                    $input.val($paragraph.data(\"modified-amendment\"));\n                } else {\n                    $input.val($paragraph.data(\"unchanged-amendment\"));\n                }\n            }\n        });\n        for (let id in this.collisionEditors) {\n            let editor: editor = this.collisionEditors[id].getEditor();\n            if (typeof(editor.plugins.lite) != 'undefined') {\n                editor.plugins.lite.findPlugin(editor).acceptAll();\n            }\n            let html = editor.getData();\n\n            $(\"#\" + id).parents(\".amendmentOverrideBlock\").first().find(\"> textarea\").val(html);\n        }\n    }\n}\n\nnew MergeSingleAmendment();\n"]}
{"version":3,"sources":["frontend/MergeSingleAmendment.ts"],"names":["MergeSingleAmendment","_this","this","editors","collissionEditors","$form","$","$collissionHolder","$checkCollissions","$affectedParagraphs","$otherStatsFields","$stepWizardHolder","find","$steps","1","2","3","click","ev","preventDefault","loadCollissions","gotoStep","each","i","el","initAffectedParagraph","submit","onSubmit","bind","prototype","no","n","removeClass","addClass","children","scrollintoview","top_offset","$paragraph","change","val","trigger","key","data","AntragsgruenEditor_1","AntragsgruenEditor","attr","url","sections","otherAmendmentsStatus","text","$el","modified","sectionId","paragraphNo","editor_1","getEditor","dataOrig","getData","plugins","lite","findPlugin","acceptAll","setData","undefined","$input","parents","post","newSections","_csrf","collissionsLoaded","html","$texteditors","length","id","editor_2","editor_3","first"],"mappings":"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","file":"MergeSingleAmendment.js","sourcesContent":["import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\n\nclass MergeSingleAmendment {\n    private $collissionHolder: JQuery;\n    private $form: JQuery;\n    private $checkCollissions: JQuery;\n    private $affectedParagraphs: JQuery;\n    private $stepWizardHolder: JQuery;\n    private $steps: {[no: string]: JQuery};\n    private editors: AntragsgruenEditor[] = [];\n    private collissionEditors: {[id: string]: AntragsgruenEditor} = {};\n    private $otherStatsFields: JQuery;\n\n    constructor() {\n        this.$form = $(\"#amendmentMergeForm\");\n        this.$collissionHolder = $(\".amendmentCollissionsHolder\");\n        this.$checkCollissions = $(\".checkAmendmentCollissions\");\n        this.$affectedParagraphs = $(\".affectedParagraphs > .paragraph\");\n        this.$otherStatsFields = $(\".otherAmendmentStatus input\");\n\n        this.$stepWizardHolder = $(\"#MergeSingleWizard\").find(\".steps\");\n        this.$steps = {\n            \"1\": this.$form.find(\"> .step_1\"),\n            \"2\": this.$form.find(\"> .step_2\"),\n            \"3\": this.$form.find(\"> .step_3\")\n        };\n\n        this.$checkCollissions.click((ev) => {\n            ev.preventDefault();\n            this.loadCollissions();\n        });\n        this.$steps[\"1\"].find(\".goto_2\").click((ev) => {\n            ev.preventDefault();\n            this.gotoStep(\"2\");\n        });\n        this.$affectedParagraphs.each((i, el) => {\n            this.initAffectedParagraph(el);\n        });\n        this.$form.submit(this.onSubmit.bind(this));\n\n        this.gotoStep(\"1\");\n    }\n\n    private gotoStep(no: string) {\n        for (let n in this.$steps) {\n            if (n == no) {\n                this.$steps[n].removeClass(\"hidden\");\n            } else {\n                this.$steps[n].addClass(\"hidden\");\n            }\n        }\n        this.$stepWizardHolder.children().removeClass(\"active\");\n        this.$stepWizardHolder.find(\".goto_step\" + no).addClass(\"active\");\n        this.$stepWizardHolder.scrollintoview({top_offset: -50});\n    }\n\n    private initAffectedParagraph(el) {\n        let $paragraph = $(el);\n\n        $paragraph.find(\".modifySelector input\").change(function () {\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                $paragraph.addClass(\"modified\").removeClass(\"unmodified\");\n            } else {\n                $paragraph.removeClass(\"modified\").addClass(\"unmodified\");\n            }\n        }).trigger(\"change\");\n\n        let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\");\n        this.editors[key] = new AntragsgruenEditor($paragraph.find(\".affectedBlock > .texteditor\").attr(\"id\"));\n    }\n\n    private loadCollissions() {\n        this.gotoStep(\"3\");\n\n        let url = this.$checkCollissions.data(\"url\"),\n            sections = {},\n            otherAmendmentsStatus = {};\n\n        this.$affectedParagraphs.each((i, el) => {\n            let $el = $(el),\n                modified = $el.find(\".modifySelector input:checked\").val(),\n                sectionId = $el.data(\"section-id\"),\n                paragraphNo = $el.data(\"paragraph-no\"),\n                text;\n\n            if (modified) {\n                let editor: editor = this.editors[sectionId + \"_\" + paragraphNo].getEditor(),\n                    dataOrig = editor.getData();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                    text = editor.getData();\n                    editor.setData(dataOrig);\n                } else {\n                    text = editor.getData();\n                }\n            } else {\n                text = $el.data(\"unchanged-amendment\");\n            }\n\n            if (sections[$el.data(\"section-id\")] === undefined) {\n                sections[$el.data(\"section-id\")] = {};\n            }\n            sections[$el.data(\"section-id\")][$el.data(\"paragraph-no\")] = text;\n        });\n\n        this.$otherStatsFields.each((i, el) => {\n            let $input:JQuery = $(el);\n            otherAmendmentsStatus[$input.parents(\".selectlist\").data(\"amendment-id\")] = $input.val();\n        });\n\n        $.post(url, {\n            'newSections': sections,\n            'otherAmendmentsStatus': otherAmendmentsStatus,\n            '_csrf': this.$form.find('> input[name=_csrf]').val()\n        }, this.collissionsLoaded.bind(this));\n    }\n\n    private collissionsLoaded(html) {\n        this.collissionEditors = {};\n        this.$collissionHolder.html(html);\n        let $texteditors = this.$collissionHolder.find(\".amendmentOverrideBlock > .texteditor\");\n\n        if ($texteditors.length > 0) {\n            $texteditors.each((i, el) => {\n                let id = $(el).attr(\"id\");\n                this.collissionEditors[id] = new AntragsgruenEditor(id);\n            });\n        }\n    }\n\n    private onSubmit() {\n        this.$affectedParagraphs.each((i, el) => {\n            let $paragraph = $(el),\n                $input = $paragraph.find(\".modifiedText\");\n\n            if ($paragraph.find(\".modifySelector input:checked\").val() == \"1\") {\n                let key = $paragraph.data(\"section-id\") + \"_\" + $paragraph.data(\"paragraph-no\"),\n                    editor: editor = this.editors[key].getEditor();\n                if (typeof(editor.plugins.lite) != 'undefined') {\n                    editor.plugins.lite.findPlugin(editor).acceptAll();\n                }\n                $input.val(editor.getData());\n            } else {\n                $input.val($paragraph.data(\"unchanged-amendment\"));\n            }\n        });\n        for (let id in this.collissionEditors) {\n            let editor: editor = this.collissionEditors[id].getEditor();\n            if (typeof(editor.plugins.lite) != 'undefined') {\n                editor.plugins.lite.findPlugin(editor).acceptAll();\n            }\n            let html = editor.getData();\n\n            $(\"#\" + id).parents(\".amendmentOverrideBlock\").first().find(\"> textarea\").val(html);\n        }\n    }\n}\n\nnew MergeSingleAmendment();\n"]}
{"version":3,"sources":["frontend/VotingBlock.js","frontend/VotingBlock.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingBlock","constructor","$element","element","vueEl","querySelector","votingInitJson","getAttribute","pollUrl","voteUrl","showAdminLink","this","widget","Vue","createApp","template","data","votings","JSON","parse","pollingId","onReloadedCbs","methods","_votePost","votingBlockId","postData","$","ajax","url","replace","type","stringify","processData","contentType","dataType","headers","document","success","undefined","forEach","cb","alert","message","vote","itemGroupSameVote","itemType","itemId","votePublic","votes","public","abstain","setAbstention","abstention","addReloadedCb","push","reloadData","get","catch","err","console","error","startPolling","window","setInterval","beforeUnmount","clearInterval","created","config","compilerOptions","whitespace","widgetComponent","mount","noneIndicator","querySelectorAll","length","node","classList","remove","add"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,iBAAc,ECD1BJ,EAAAI,YAAA,MAII,WAAAC,CAAYC,GACR,MAAMC,EAAUD,EAAS,GACrBE,EAAQD,EAAQE,cAAc,kBAC9BC,EAAiBH,EAAQI,aAAa,eACtCC,EAAUL,EAAQI,aAAa,iBAC/BE,EAAUN,EAAQI,aAAa,iBAC/BG,EAAgBP,EAAQI,aAAa,wBAEzCI,KAAKC,OAASC,IAAIC,UAAU,CACxBC,SAAU,gPAIVC,KAAI,KACO,CACHC,QAASC,KAAKC,MAAMb,GACpBc,UAAW,KACXV,gBACAW,cAAe,KAGvBC,QAAS,CACLC,UAAW,SAAUC,EAAeC,GAChC,MAAMb,EAASD,KACfe,EAAEC,KAAK,CACHC,IAAKnB,EAAQoB,QAAQ,gBAAiBL,GACtCM,KAAM,OACNd,KAAME,KAAKa,UAAUN,GACrBO,aAAa,EACbC,YAAa,kCACbC,SAAU,OACVC,QAAS,CAAC,eAAgBC,SAAS/B,cAAc,8BAA8BE,aAAa,YAC5F8B,QAASrB,SACgBsB,IAAjBtB,EAAKqB,SAA0BrB,EAAKqB,SAIxCzB,EAAOK,QAAUD,EACjBJ,EAAOS,cAAckB,SAAQC,IACzBA,EAAG5B,EAAOK,QAAQ,KALlBwB,MAAMzB,EAAK0B,QAMb,GAGd,EACAC,KAAM,SAAUnB,EAAeoB,EAAmBC,EAAUC,EAAQH,EAAMI,GACtEpC,KAAKY,UAAUC,EAAe,CAC1BwB,MAAO,CAAC,CACJJ,oBACAC,WACAC,SACAH,OACAM,OAAUF,KAGtB,EACAG,QAAS,SAAU1B,EAAe2B,EAAeJ,GAC7CpC,KAAKY,UAAUC,EAAe,CAC1B4B,WAAY,CACRF,QAASC,EACTF,OAAUF,IAGtB,EACAM,cAAe,SAAUb,GACrB7B,KAAKU,cAAciC,KAAKd,EAC5B,EACAe,WAAY,WACR,GAAgB,OAAZ/C,EACA,OAEJ,MAAMI,EAASD,KACfe,EAAE8B,IAAIhD,GAAS,SAAUQ,GACrBJ,EAAOK,QAAUD,EACjBJ,EAAOS,cAAckB,SAAQC,IACzBA,EAAG5B,EAAOK,QAAQ,GAE1B,IAAGwC,OAAM,SAAUC,GACfC,QAAQC,MAAM,0CAA2CF,EAC7D,GACJ,EACAG,aAAc,WACV,MAAMjD,EAASD,KACfA,KAAKS,UAAY0C,OAAOC,aAAY,WAChCnD,EAAO2C,YACX,GAAG,IACP,GAEJ,aAAAS,GACIF,OAAOG,cAActD,KAAKS,UAC9B,EACA,OAAA8C,GACIvD,KAAKkD,cACT,IAGJlD,KAAKC,OAAOuD,OAAOC,gBAAgBC,WAAa,WAChDP,OAA4B,oBAAEnD,KAAKC,OAAQ,UAE3CD,KAAK2D,gBAAkB3D,KAAKC,OAAO2D,MAAMnE,GAEzC,MAAMoE,EAAgBpC,SAASqC,iBAAiB,yBAChD9D,KAAK2D,gBAAgBjB,eAAcrC,IACX,IAAhBA,EAAK0D,OACLF,EAAcjC,SAAQoC,GAAQA,EAAKC,UAAUC,OAAO,YAEpDL,EAAcjC,SAAQoC,GAAQA,EAAKC,UAAUE,IAAI,WACrD,GAER,EDNJ","file":"VotingBlock.js","sourcesContent":[null,"declare let Vue: any;\n\nexport class VotingBlock {\n    private widget: any;\n    private widgetComponent: any;\n\n    constructor($element: JQuery) {\n        const element = $element[0],\n            vueEl = element.querySelector(\".currentVoting\"),\n            votingInitJson = element.getAttribute('data-voting'),\n            pollUrl = element.getAttribute('data-url-poll'),\n            voteUrl = element.getAttribute('data-url-vote'),\n            showAdminLink = element.getAttribute('data-show-admin-link');\n\n        this.widget = Vue.createApp({\n            template: `\n                <div class=\"currentVotings\">\n                <voting-block-widget v-for=\"voting in votings\" :voting=\"voting\" @vote=\"vote\" @abstain=\"abstain\" :showAdminLink=\"showAdminLink\"></voting-block-widget>\n                </div>`,\n            data() {\n                return {\n                    votings: JSON.parse(votingInitJson),\n                    pollingId: null,\n                    showAdminLink,\n                    onReloadedCbs: []\n                };\n            },\n            methods: {\n                _votePost: function (votingBlockId, postData) {\n                    const widget = this;\n                    $.ajax({\n                        url: voteUrl.replace(/VOTINGBLOCKID/, votingBlockId),\n                        type: \"POST\",\n                        data: JSON.stringify(postData),\n                        processData: false,\n                        contentType: \"application/json; charset=utf-8\",\n                        dataType: \"json\",\n                        headers: {\"X-CSRF-Token\": document.querySelector('head meta[name=csrf-token]').getAttribute('content')},\n                        success: data => {\n                            if (data.success !== undefined && !data.success) {\n                                alert(data.message);\n                                return;\n                            }\n                            widget.votings = data;\n                            widget.onReloadedCbs.forEach(cb => {\n                                cb(widget.votings);\n                            });\n                        }\n                    });\n                },\n                vote: function (votingBlockId, itemGroupSameVote, itemType, itemId, vote, votePublic) {\n                    this._votePost(votingBlockId, {\n                        votes: [{\n                            itemGroupSameVote,\n                            itemType,\n                            itemId,\n                            vote,\n                            \"public\": votePublic\n                        }]\n                    });\n                },\n                abstain: function (votingBlockId, setAbstention, votePublic) {\n                    this._votePost(votingBlockId, {\n                        abstention: {\n                            abstain: setAbstention,\n                            \"public\": votePublic,\n                        }\n                    });\n                },\n                addReloadedCb: function (cb) {\n                    this.onReloadedCbs.push(cb);\n                },\n                reloadData: function () {\n                    if (pollUrl === null) {\n                        return;\n                    }\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.votings = data;\n                        widget.onReloadedCbs.forEach(cb => {\n                            cb(widget.votings);\n                        });\n                    }).catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeUnmount() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.startPolling()\n            }\n        });\n\n        this.widget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](this.widget, 'voting');\n\n        this.widgetComponent = this.widget.mount(vueEl);\n\n        const noneIndicator = document.querySelectorAll('.votingsNoneIndicator')\n        this.widgetComponent.addReloadedCb(data => {\n            if (data.length === 0) {\n                noneIndicator.forEach(node => node.classList.remove('hidden'));\n            } else {\n                noneIndicator.forEach(node => node.classList.add('hidden'));\n            }\n        });\n    }\n}\n"]}
{"version":3,"sources":["frontend/MotionMergeAmendments.js","frontend/MotionMergeAmendments.ts"],"names":["define","require","exports","AntragsgruenEditor_1","Object","defineProperty","value","MotionMergeAmendments","MotionMergeChangeActions","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AMENDMENT_VERSION","AmendmentStatuses","init","statuses","versions","votingData","keys","forEach","amendmentId","statusListeners","registerNewAmendment","status","version","console","log","deleteAmendment","getAmendmentStatus","getAmendmentVersion","getAmendmentVotingData","registerParagraph","paragraph","push","setStatus","onAmendmentStatusChanged","setVersion","onAmendmentVersionChanged","setVotesData","voteData","onAmendmentVotingChanged","getAmendmentIds","map","key","parseInt","getAllStatuses","getAllVersions","getAllVotingData","removeEmptyParagraphs","$","each","i","el","childNodes","length","remove","accept","node","onFinished","$node","hasClass","insertAccept","deleteAccept","reject","insertReject","deleteReject","$removeEl","name","nodeName","toLowerCase","parent","css","height","animate","$this","removeClass","removeAttr","children","replaceWith","html","MotionMergeChangeTooltip","constructor","$element","mouseX","mouseY","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","data","window","setTimeout","width","elTop","offset","top","elHeight","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","$myEl","cid","isAppendedCollision","isModU","undefined","parents","first","addClass","__t","$el","attr","text","$list","alert","is","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","onChanged","focusAtSameCid","stale","$stale","warn","e","MotionMergeAmendmentsTextarea","prepareText","$text","appendHint","removeData","markupMovedParagraph","newText","texteditor","setData","unchangedText","normalizeHtml","getData","fire","addChangedListener","cb","changedListeners","_","msg","paragraphNew","replace","initializeTooltips","$holder","$target","currentTarget","activePopup","pageX","pageY","acceptAll","rejectAll","getUnchangedContent","setText","entities","ent","RegExp","$changedIndicator","hasChanged","$mergeActionHolder","hasChanges","$textarea","edit","AntragsgruenEditor","getEditor","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","amendmentParagraphData","amend","id","JSON","parse","stringify","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","createApp","template","methods","getAllAmendmentData","getAmendmentData","setAmendmentActive","amendment","active","reloadText","update","eventData","op","onStatusUpdated","newStatus","indexOf","onVotingUpdated","onVersionUpdated","onAmendmentAdded","nameBase","idAdd","verstion","onAmendmentDeleted","filter","config","compilerOptions","whitespace","statusWidgetComponent","mount","$collision","$collisionHolder","preventDefault","amendments","amendmentData","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","paragraphsByTypeAndNo","document","getElementById","getAttribute","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initNewAmendmentAlert","initCheckBackendStatus","initRemovingSectionTexts","initProtocol","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","editor","val","onlyInput","par","protocolPublic","sections","removedSections","protocol","CKEDITOR","instances","paraId","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","parId","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem","$newAmendmentAlert","alertAboutNewAmendment","title","$buttons","$newButton","scrollintoview","top_offset","append","amendmentIds","join","onReceivedBackendStatus","newAmendments","deletedAmendments","newAmendmentStaticData","newAmendmentStatus","typeId","paragraphNo","paraObj","paraAmendmentData"],"mappings":"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","file":"MotionMergeAmendments.js","sourcesContent":[null,"import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\n\ndeclare let Vue: any;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\nenum AMENDMENT_VERSION {\n    ORIGINAL = 'orig',\n    PROPOSED_PROCEDURE = 'prop',\n}\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static registerNewAmendment(amendmentId: number, status: number, version: AMENDMENT_VERSION, votingData: VotingData) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.votingData[amendmentId] = votingData;\n        AmendmentStatuses.statusListeners[amendmentId] = [];\n\n        console.log(\"registered new amendment status\", AmendmentStatuses.statuses, AmendmentStatuses.versions, AmendmentStatuses.votingData);\n    }\n\n    public static deleteAmendment(amendmentId: number) {\n        delete(AmendmentStatuses.statuses[amendmentId]);\n        delete(AmendmentStatuses.versions[amendmentId]);\n        delete(AmendmentStatuses.votingData[amendmentId]);\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n    public static getAmendmentIds(): number[] {\n        return Object.keys(AmendmentStatuses.statuses).map(key => parseInt(key, 10));\n    }\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nexport class MotionMergeChangeActions {\n    public static removeEmptyParagraphs() {\n        $('.texteditor').each((i, el) => {\n            if (el.childNodes.length == 0) {\n                $(el).remove();\n            }\n        });\n    }\n\n    public static accept(node: Element, onFinished: () => void = null) {\n        let $node = $(node);\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertAccept(node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteAccept(node, onFinished);\n        }\n    }\n\n    public static reject(node: Element, onFinished: () => void = null) {\n        let $node = $(node) as JQuery;\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertReject($node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteReject($node, onFinished);\n        }\n    }\n\n    public static insertReject($node: JQuery, onFinished: () => void = null) {\n        let $removeEl: JQuery,\n            name = $node[0].nodeName.toLowerCase();\n        if (name == 'li') {\n            $removeEl = $node.parent();\n        } else {\n            $removeEl = $node;\n        }\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n\n    public static insertAccept(node: Element, onFinished: () => void = null) {\n        let $this = $(node) as JQuery;\n        $this.removeClass(\"ice-cts ice-ins appendHint moved\");\n        $this.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        if (node.nodeName.toLowerCase() == 'ul' || node.nodeName.toLowerCase() == 'ol') {\n            $this.children().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'li') {\n            $this.parent().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'ins') {\n            $this.replaceWith($this.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteReject($node: JQuery, onFinished: () => void = null) {\n        $node.removeClass(\"ice-cts ice-del appendHint\");\n        $node.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        let nodeName = $node[0].nodeName.toLowerCase();\n        if (nodeName == 'ul' || nodeName == 'ol') {\n            $node.children().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'li') {\n            $node.parent().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'del') {\n            $node.replaceWith($node.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteAccept(node: Element, onFinished: () => void = null) {\n        let name = node.nodeName.toLowerCase(),\n            $removeEl: JQuery;\n        if (name == 'li') {\n            $removeEl = $(node).parent() as JQuery;\n        } else {\n            $removeEl = $(node) as JQuery;\n        }\n\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n}\n\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\"),\n            isAppendedCollision = ($myEl.data(\"appended-collision\") === 1 || $myEl.parent().data(\"appended-collision\") === 1),\n            isModU = $myEl.data(\"is-modu\") === 1;\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '';\n        if (isAppendedCollision) {\n            html += '<div class=\"mergingPopoverCollisionHint\">⚠️ ' + __t(\"merge\", \"mergedCollisionHint\") + '</div>';\n        }\n        html += '<div class=\"mergingPopoverButtons\">';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        if (isModU) {\n            $el.find(\".initiator\").text(__t(\"merge\", \"modU\"));\n        } else {\n            $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        }\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(_, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>')\n            .replace(/<[^>]*ice-ins[^>]*>/g, 'ice-ins') // make sure accepted insertions are still recognized as change\n            .replace(/<ins[^>]*>/g, 'ice-ins')\n            .replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n    public statusWidgetComponent: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = Vue.createApp({\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data() { return {\n                amendmentParagraphData,\n            } },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendment, active) {\n                    amendment.active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendment, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                },\n                onStatusUpdated(amendmentId, newStatus) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                },\n                onVotingUpdated(amendmentId, votingData) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.votingData = votingData;\n                    }\n                },\n                onVersionUpdated(amendmentId, version) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.version = version;\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                },\n                onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n                    this.amendmentParagraphData.push({\n                        amendmentId: amendment.id,\n                        amendment, nameBase, idAdd, active, status, verstion, votingData\n                    });\n                },\n                onAmendmentDeleted(amendmentId) {\n                    this.amendmentParagraphData = this.amendmentParagraphData.filter(amend => amend.amendmentId != amendmentId);\n                }\n            }\n        });\n\n        para.statusWidget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](para.statusWidget, 'merging');\n        para.statusWidgetComponent = para.statusWidget.mount(this.$holder.find(\".changeToolbar .statuses\")[0]);\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidgetComponent.onVersionUpdated(amendmentId, version);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidgetComponent.onVotingUpdated(amendmentId, votingData);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidgetComponent.onStatusUpdated(amendmentId, status);\n    }\n\n    public onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n        this.statusWidgetComponent.onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData);\n    }\n\n    public onAmendmentDeleted(amendmentId) {\n        this.statusWidgetComponent.onAmendmentDeleted(amendmentId);\n    }\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => amendmentData.amendmentId);\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    public $newAmendmentAlert: JQuery;\n    private paragraphsByTypeAndNo: {[typeAndPara: string]: MotionMergeAmendmentsParagraph} = {};\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            const sectionId = $para.data(\"section-id\");\n            const paragraphId = $para.data(\"paragraph-id\");\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphsByTypeAndNo[sectionId + '_' + paragraphId] = new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData);\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initNewAmendmentAlert();\n        this.initCheckBackendStatus();\n        this.initRemovingSectionTexts();\n        this.initProtocol();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options: Intl.DateTimeFormatOptions = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initProtocol() {\n        const $textarea = $(\"#protocol_text_wysiwyg\");\n        $textarea.attr(\"contenteditable\", \"true\");\n        const ckeditor = new AntragsgruenEditor($textarea.attr(\"id\"));\n        const editor = ckeditor.getEditor();\n\n        $textarea.parents(\"form\").on(\"submit\", () => {\n            $textarea.parent().find(\"textarea\").val(editor.getData());\n        });\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (Object.keys(this.paragraphsByTypeAndNo).map(id => this.paragraphsByTypeAndNo[id])\n            .filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            return;\n        }\n\n        console.log(\"Has unsaved changes\");\n\n        const protocolPublic = $(\"input[name=protocol_public]:checked\").val() as string;\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n            \"protocol\": CKEDITOR.instances['protocol_text_wysiwyg'].getData(),\n            \"protocolPublic\": parseInt(protocolPublic) === 1,\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        Object.keys(this.paragraphsByTypeAndNo).forEach(paraId => {\n            data.paragraphs[paraId] = this.paragraphsByTypeAndNo[paraId].getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSavingUrl'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    Object.keys(this.paragraphsByTypeAndNo).forEach(parId => this.paragraphsByTypeAndNo[parId].onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n\n    private initNewAmendmentAlert() {\n        this.$newAmendmentAlert = MotionMergeAmendments.$form.find('#newAmendmentAlert');\n        this.$newAmendmentAlert.find('.closeLink').on('click', () => {\n            this.$newAmendmentAlert.find('.buttons').children().remove();\n            this.$newAmendmentAlert.removeClass('revealed');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('hidden');\n            }, 1000);\n        });\n    }\n\n    private alertAboutNewAmendment(amendmentId: number, title: string) {\n        const $buttons = this.$newAmendmentAlert.find('.buttons');\n        const $newButton = $('<button class=\"btn-link gotoAmendment\" type=\"button\"></button>').text(title);\n        $newButton.on('click', () => {\n            const $firstToggle = $(\".amendmentStatus\" + amendmentId).first();\n            const $paragraph = $firstToggle.parents('.paragraphWrapper');\n            $paragraph.scrollintoview({top_offset: -100});\n        });\n        $buttons.append($newButton);\n\n        if ($buttons.children().length > 1) {\n            this.$newAmendmentAlert.find('.message .one').addClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').removeClass('hidden');\n        } else {\n            this.$newAmendmentAlert.find('.message .one').removeClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').addClass('hidden');\n        }\n\n        if (this.$newAmendmentAlert.hasClass('hidden')) {\n            this.$newAmendmentAlert.removeClass('hidden');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('revealed');\n            }, 100);\n        }\n    }\n\n    private initCheckBackendStatus() {\n        window.setInterval(() => {\n            let url = MotionMergeAmendments.$form.data('checkStatusUrl');\n            const amendmentIds = AmendmentStatuses.getAmendmentIds();\n            url = url.replace(/AMENDMENTS/, amendmentIds.join(','));\n            $.get(url, data => {\n                if (data['success']) {\n                    this.onReceivedBackendStatus(data['new'], data['deleted']);\n                } else {\n                    console.warn(data);\n                }\n            });\n        }, 3000);\n    }\n\n    private onReceivedBackendStatus(newAmendments: any[], deletedAmendments: any[]) {\n        const newAmendmentStaticData = {},\n            newAmendmentStatus = {};\n        newAmendments['staticData'].forEach(amendmentData => {\n            const status = newAmendments['status'][amendmentData['id']];\n            newAmendmentStaticData[amendmentData['id']] = amendmentData;\n            newAmendmentStatus[amendmentData['id']] = status;\n\n            AmendmentStatuses.registerNewAmendment(amendmentData['id'], status['status'], status['version'], status['votingData']);\n\n            this.alertAboutNewAmendment(amendmentData['id'], amendmentData['titlePrefix']);\n        });\n\n        Object.keys(newAmendments['paragraphs']).forEach(typeId => {\n            Object.keys(newAmendments['paragraphs'][typeId]).forEach(paragraphNo => {\n                const paraObj = this.paragraphsByTypeAndNo[typeId + '_' + paragraphNo];\n                newAmendments['paragraphs'][typeId][paragraphNo].forEach(data => {\n                    const paraAmendmentData = newAmendmentStaticData[data.amendmentId];\n                    const status = newAmendmentStatus[data.amendmentId];\n                    paraObj.onAmendmentAdded(paraAmendmentData, data['nameBase'], data['idAdd'], data['active'], status['status'], status['version'], status['votingData'])\n                    AmendmentStatuses.registerParagraph(data.amendmentId, paraObj);\n                });\n            });\n        });\n\n        deletedAmendments.forEach(amendmentId => {\n            console.log(\"Removing amendment\", amendmentId);\n            AmendmentStatuses.deleteAmendment(amendmentId);\n\n            Object.keys(this.paragraphsByTypeAndNo).forEach(id => {\n                this.paragraphsByTypeAndNo[id].onAmendmentDeleted(amendmentId);\n            });\n        });\n    }\n}\n"]}
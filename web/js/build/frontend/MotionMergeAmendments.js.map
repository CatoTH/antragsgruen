{"version":3,"sources":["frontend/MotionMergeAmendments.js","frontend/MotionMergeAmendments.ts"],"names":["define","require","exports","AntragsgruenEditor_1","Object","defineProperty","value","MotionMergeAmendments","MotionMergeChangeActions","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AMENDMENT_VERSION","AmendmentStatuses","static","statuses","versions","votingData","keys","forEach","amendmentId","statusListeners","status","version","console","log","paragraph","push","onAmendmentStatusChanged","onAmendmentVersionChanged","voteData","onAmendmentVotingChanged","map","key","parseInt","$","each","i","el","childNodes","length","remove","node","onFinished","$node","hasClass","insertAccept","deleteAccept","insertReject","deleteReject","$removeEl","name","nodeName","toLowerCase","parent","css","height","animate","removeEmptyParagraphs","$this","removeClass","removeAttr","children","replaceWith","html","MotionMergeChangeTooltip","constructor","$element","mouseX","mouseY","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","data","window","setTimeout","width","elTop","offset","top","elHeight","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","$myEl","cid","isAppendedCollision","undefined","parents","first","addClass","__t","$el","attr","text","accept","reject","$list","alert","is","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","onChanged","focusAtSameCid","stale","$stale","warn","e","MotionMergeAmendmentsTextarea","prepareText","$text","appendHint","removeData","markupMovedParagraph","newText","texteditor","setData","unchangedText","normalizeHtml","getData","fire","addChangedListener","cb","changedListeners","msg","paragraphNew","replace","initializeTooltips","$holder","$target","currentTarget","activePopup","pageX","pageY","acceptAll","rejectAll","getUnchangedContent","setText","entities","ent","RegExp","$changedIndicator","hasChanged","$mergeActionHolder","hasChanges","$textarea","edit","AntragsgruenEditor","getEditor","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","registerParagraph","amendmentParagraphData","amend","id","getAmendmentStatus","getAmendmentVersion","JSON","parse","stringify","getAmendmentVotingData","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","createApp","template","methods","getAllAmendmentData","getAmendmentData","setAmendmentActive","amendment","active","reloadText","update","eventData","op","setStatus","setVotesData","setVersion","onStatusUpdated","newStatus","indexOf","onVotingUpdated","onVersionUpdated","onAmendmentAdded","nameBase","idAdd","verstion","onAmendmentDeleted","filter","config","compilerOptions","whitespace","statusWidgetComponent","mount","$collision","$collisionHolder","preventDefault","amendments","amendmentData","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","paragraphsByTypeAndNo","document","getElementById","getAttribute","init","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initNewAmendmentAlert","initCheckBackendStatus","initRemovingSectionTexts","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","onlyInput","par","getAllStatuses","getAllVersions","getAllVotingData","sections","removedSections","val","paraId","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","parId","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem","$newAmendmentAlert","alertAboutNewAmendment","title","$buttons","$newButton","scrollintoview","top_offset","append","amendmentIds","getAmendmentIds","join","onReceivedBackendStatus","newAmendments","deletedAmendments","newAmendmentStaticData","newAmendmentStatus","registerNewAmendment","typeId","paragraphNo","paraObj","paraAmendmentData","deleteAmendment"],"mappings":"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","file":"MotionMergeAmendments.js","sourcesContent":[null,"import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\n\ndeclare let Vue: any;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\nenum AMENDMENT_VERSION {\n    ORIGINAL = 'orig',\n    PROPOSED_PROCEDURE = 'prop',\n}\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static registerNewAmendment(amendmentId: number, status: number, version: AMENDMENT_VERSION, votingData: VotingData) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.votingData[amendmentId] = votingData;\n        AmendmentStatuses.statusListeners[amendmentId] = [];\n\n        console.log(\"registered new amendment status\", AmendmentStatuses.statuses, AmendmentStatuses.versions, AmendmentStatuses.votingData);\n    }\n\n    public static deleteAmendment(amendmentId: number) {\n        delete(AmendmentStatuses.statuses[amendmentId]);\n        delete(AmendmentStatuses.versions[amendmentId]);\n        delete(AmendmentStatuses.votingData[amendmentId]);\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n    public static getAmendmentIds(): number[] {\n        return Object.keys(AmendmentStatuses.statuses).map(key => parseInt(key, 10));\n    }\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nexport class MotionMergeChangeActions {\n    public static removeEmptyParagraphs() {\n        $('.texteditor').each((i, el) => {\n            if (el.childNodes.length == 0) {\n                $(el).remove();\n            }\n        });\n    }\n\n    public static accept(node: Element, onFinished: () => void = null) {\n        let $node = $(node);\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertAccept(node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteAccept(node, onFinished);\n        }\n    }\n\n    public static reject(node: Element, onFinished: () => void = null) {\n        let $node = $(node) as JQuery;\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertReject($node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteReject($node, onFinished);\n        }\n    }\n\n    public static insertReject($node: JQuery, onFinished: () => void = null) {\n        let $removeEl: JQuery,\n            name = $node[0].nodeName.toLowerCase();\n        if (name == 'li') {\n            $removeEl = $node.parent();\n        } else {\n            $removeEl = $node;\n        }\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n\n    public static insertAccept(node: Element, onFinished: () => void = null) {\n        let $this = $(node) as JQuery;\n        $this.removeClass(\"ice-cts ice-ins appendHint moved\");\n        $this.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        if (node.nodeName.toLowerCase() == 'ul' || node.nodeName.toLowerCase() == 'ol') {\n            $this.children().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'li') {\n            $this.parent().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'ins') {\n            $this.replaceWith($this.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteReject($node: JQuery, onFinished: () => void = null) {\n        $node.removeClass(\"ice-cts ice-del appendHint\");\n        $node.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        let nodeName = $node[0].nodeName.toLowerCase();\n        if (nodeName == 'ul' || nodeName == 'ol') {\n            $node.children().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'li') {\n            $node.parent().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'del') {\n            $node.replaceWith($node.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteAccept(node: Element, onFinished: () => void = null) {\n        let name = node.nodeName.toLowerCase(),\n            $removeEl: JQuery;\n        if (name == 'li') {\n            $removeEl = $(node).parent() as JQuery;\n        } else {\n            $removeEl = $(node) as JQuery;\n        }\n\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n}\n\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\"),\n            isAppendedCollision = ($myEl.data(\"appended-collision\") == 1 || $myEl.parent().data(\"appended-collision\") == 1);\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '';\n        if (isAppendedCollision) {\n            html += '<div class=\"mergingPopoverCollisionHint\">⚠️ ' + __t(\"merge\", \"mergedCollisionHint\") + '</div>';\n        }\n        html += '<div class=\"mergingPopoverButtons\">';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(i, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>')\n            .replace(/<[^>]*ice-ins[^>]*>/g, 'ice-ins') // make sure accepted insertions are still recognized as change\n            .replace(/<ins[^>]*>/g, 'ice-ins')\n            .replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n    public statusWidgetComponent: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = Vue.createApp({\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data() { return {\n                amendmentParagraphData,\n            } },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendment, active) {\n                    amendment.active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendment, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                },\n                onStatusUpdated(amendmentId, newStatus) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                },\n                onVotingUpdated(amendmentId, votingData) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.votingData = votingData;\n                    }\n                },\n                onVersionUpdated(amendmentId, version) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.version = version;\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                },\n                onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n                    this.amendmentParagraphData.push({\n                        amendmentId: amendment.id,\n                        amendment, nameBase, idAdd, active, status, verstion, votingData\n                    });\n                },\n                onAmendmentDeleted(amendmentId) {\n                    this.amendmentParagraphData = this.amendmentParagraphData.filter(amend => amend.amendmentId != amendmentId);\n                }\n            }\n        });\n\n        para.statusWidget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](para.statusWidget, 'merging');\n        para.statusWidgetComponent = para.statusWidget.mount(this.$holder.find(\".changeToolbar .statuses\")[0]);\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidgetComponent.onVersionUpdated(amendmentId, version);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidgetComponent.onVotingUpdated(amendmentId, votingData);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidgetComponent.onStatusUpdated(amendmentId, status);\n    }\n\n    public onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n        this.statusWidgetComponent.onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData);\n    }\n\n    public onAmendmentDeleted(amendmentId) {\n        this.statusWidgetComponent.onAmendmentDeleted(amendmentId);\n    }\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => amendmentData.amendmentId);\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    public $newAmendmentAlert: JQuery;\n    private paragraphsByTypeAndNo: {[typeAndPara: string]: MotionMergeAmendmentsParagraph} = {};\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            const sectionId = $para.data(\"section-id\");\n            const paragraphId = $para.data(\"paragraph-id\");\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphsByTypeAndNo[sectionId + '_' + paragraphId] = new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData);\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initNewAmendmentAlert();\n        this.initCheckBackendStatus();\n        this.initRemovingSectionTexts();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options: Intl.DateTimeFormatOptions = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (Object.keys(this.paragraphsByTypeAndNo).map(id => this.paragraphsByTypeAndNo[id])\n            .filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            return;\n        }\n\n        console.log(\"Has unsaved changes\");\n\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        Object.keys(this.paragraphsByTypeAndNo).forEach(paraId => {\n            data.paragraphs[paraId] = this.paragraphsByTypeAndNo[paraId].getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSavingUrl'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    Object.keys(this.paragraphsByTypeAndNo).forEach(parId => this.paragraphsByTypeAndNo[parId].onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n\n    private initNewAmendmentAlert() {\n        this.$newAmendmentAlert = MotionMergeAmendments.$form.find('#newAmendmentAlert');\n        this.$newAmendmentAlert.find('.closeLink').on('click', () => {\n            this.$newAmendmentAlert.find('.buttons').children().remove();\n            this.$newAmendmentAlert.removeClass('revealed');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('hidden');\n            }, 1000);\n        });\n    }\n\n    private alertAboutNewAmendment(amendmentId: number, title: string) {\n        const $buttons = this.$newAmendmentAlert.find('.buttons');\n        const $newButton = $('<button class=\"btn-link gotoAmendment\" type=\"button\"></button>').text(title);\n        $newButton.on('click', () => {\n            const $firstToggle = $(\".amendmentStatus\" + amendmentId).first();\n            const $paragraph = $firstToggle.parents('.paragraphWrapper');\n            $paragraph.scrollintoview({top_offset: -100});\n        });\n        $buttons.append($newButton);\n\n        if ($buttons.children().length > 1) {\n            this.$newAmendmentAlert.find('.message .one').addClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').removeClass('hidden');\n        } else {\n            this.$newAmendmentAlert.find('.message .one').removeClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').addClass('hidden');\n        }\n\n        if (this.$newAmendmentAlert.hasClass('hidden')) {\n            this.$newAmendmentAlert.removeClass('hidden');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('revealed');\n            }, 100);\n        }\n    }\n\n    private initCheckBackendStatus() {\n        window.setInterval(() => {\n            let url = MotionMergeAmendments.$form.data('checkStatusUrl');\n            const amendmentIds = AmendmentStatuses.getAmendmentIds();\n            url = url.replace(/AMENDMENTS/, amendmentIds.join(','));\n            $.get(url, data => {\n                if (data['success']) {\n                    this.onReceivedBackendStatus(data['new'], data['deleted']);\n                } else {\n                    console.warn(data);\n                }\n            });\n        }, 3000);\n    }\n\n    private onReceivedBackendStatus(newAmendments: any[], deletedAmendments: any[]) {\n        const newAmendmentStaticData = {},\n            newAmendmentStatus = {};\n        newAmendments['staticData'].forEach(amendmentData => {\n            const status = newAmendments['status'][amendmentData['id']];\n            newAmendmentStaticData[amendmentData['id']] = amendmentData;\n            newAmendmentStatus[amendmentData['id']] = status;\n\n            AmendmentStatuses.registerNewAmendment(amendmentData['id'], status['status'], status['version'], status['votingData']);\n\n            this.alertAboutNewAmendment(amendmentData['id'], amendmentData['titlePrefix']);\n        });\n\n        Object.keys(newAmendments['paragraphs']).forEach(typeId => {\n            Object.keys(newAmendments['paragraphs'][typeId]).forEach(paragraphNo => {\n                const paraObj = this.paragraphsByTypeAndNo[typeId + '_' + paragraphNo];\n                newAmendments['paragraphs'][typeId][paragraphNo].forEach(data => {\n                    const paraAmendmentData = newAmendmentStaticData[data.amendmentId];\n                    const status = newAmendmentStatus[data.amendmentId];\n                    paraObj.onAmendmentAdded(paraAmendmentData, data['nameBase'], data['idAdd'], data['active'], status['status'], status['version'], status['votingData'])\n                    AmendmentStatuses.registerParagraph(data.amendmentId, paraObj);\n                });\n            });\n        });\n\n        deletedAmendments.forEach(amendmentId => {\n            console.log(\"Removing amendment\", amendmentId);\n            AmendmentStatuses.deleteAmendment(amendmentId);\n\n            Object.keys(this.paragraphsByTypeAndNo).forEach(id => {\n                this.paragraphsByTypeAndNo[id].onAmendmentDeleted(amendmentId);\n            });\n        });\n    }\n}\n"]}
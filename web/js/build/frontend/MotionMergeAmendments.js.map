{"version":3,"sources":["frontend/MotionMergeAmendments.js","frontend/MotionMergeAmendments.ts"],"names":["define","require","exports","AntragsgruenEditor_1","Object","defineProperty","value","MotionMergeAmendments","MotionMergeChangeActions","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AMENDMENT_VERSION","AmendmentStatuses","static","statuses","versions","votingData","keys","forEach","amendmentId","statusListeners","status","version","console","log","paragraph","push","onAmendmentStatusChanged","onAmendmentVersionChanged","voteData","onAmendmentVotingChanged","map","key","parseInt","$","each","i","el","childNodes","length","remove","node","onFinished","$node","hasClass","insertAccept","deleteAccept","insertReject","deleteReject","$removeEl","name","nodeName","toLowerCase","parent","css","height","animate","removeEmptyParagraphs","$this","removeClass","removeAttr","children","replaceWith","html","MotionMergeChangeTooltip","constructor","$element","mouseX","mouseY","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","data","window","setTimeout","width","elTop","offset","top","elHeight","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","$myEl","cid","isAppendedCollision","isModU","undefined","parents","first","addClass","__t","$el","attr","text","accept","reject","$list","alert","is","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","onChanged","focusAtSameCid","stale","$stale","warn","e","MotionMergeAmendmentsTextarea","$holder","$changedIndicator","$mergeActionHolder","unchangedText","hasChanged","changedListeners","$textarea","edit","AntragsgruenEditor","texteditor","getEditor","setText","getData","prepareText","$text","appendHint","removeData","markupMovedParagraph","newText","setData","normalizeHtml","fire","addChangedListener","cb","_","msg","paragraphNew","replace","initializeTooltips","$target","currentTarget","activePopup","pageX","pageY","acceptAll","rejectAll","getUnchangedContent","entities","ent","RegExp","hasChanges","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","registerParagraph","amendmentParagraphData","amend","id","getAmendmentStatus","getAmendmentVersion","JSON","parse","stringify","getAmendmentVotingData","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","createApp","template","methods","getAllAmendmentData","getAmendmentData","setAmendmentActive","amendment","active","reloadText","update","eventData","op","setStatus","setVotesData","setVersion","onStatusUpdated","newStatus","indexOf","onVotingUpdated","onVersionUpdated","onAmendmentAdded","nameBase","idAdd","verstion","onAmendmentDeleted","filter","config","compilerOptions","whitespace","statusWidgetComponent","mount","$collision","$collisionHolder","preventDefault","amendments","amendmentData","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","paragraphsByTypeAndNo","document","getElementById","getAttribute","init","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initNewAmendmentAlert","initCheckBackendStatus","initRemovingSectionTexts","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","onlyInput","par","getAllStatuses","getAllVersions","getAllVotingData","sections","removedSections","val","paraId","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","parId","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem","$newAmendmentAlert","alertAboutNewAmendment","title","$buttons","$newButton","scrollintoview","top_offset","append","amendmentIds","getAmendmentIds","join","onReceivedBackendStatus","newAmendments","deletedAmendments","newAmendmentStaticData","newAmendmentStatus","registerNewAmendment","typeId","paragraphNo","paraObj","paraAmendmentData","deleteAmendment"],"mappings":"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","file":"MotionMergeAmendments.js","sourcesContent":[null,"import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\n\ndeclare let Vue: any;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\nenum AMENDMENT_VERSION {\n    ORIGINAL = 'orig',\n    PROPOSED_PROCEDURE = 'prop',\n}\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static registerNewAmendment(amendmentId: number, status: number, version: AMENDMENT_VERSION, votingData: VotingData) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.votingData[amendmentId] = votingData;\n        AmendmentStatuses.statusListeners[amendmentId] = [];\n\n        console.log(\"registered new amendment status\", AmendmentStatuses.statuses, AmendmentStatuses.versions, AmendmentStatuses.votingData);\n    }\n\n    public static deleteAmendment(amendmentId: number) {\n        delete(AmendmentStatuses.statuses[amendmentId]);\n        delete(AmendmentStatuses.versions[amendmentId]);\n        delete(AmendmentStatuses.votingData[amendmentId]);\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n    public static getAmendmentIds(): number[] {\n        return Object.keys(AmendmentStatuses.statuses).map(key => parseInt(key, 10));\n    }\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nexport class MotionMergeChangeActions {\n    public static removeEmptyParagraphs() {\n        $('.texteditor').each((i, el) => {\n            if (el.childNodes.length == 0) {\n                $(el).remove();\n            }\n        });\n    }\n\n    public static accept(node: Element, onFinished: () => void = null) {\n        let $node = $(node);\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertAccept(node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteAccept(node, onFinished);\n        }\n    }\n\n    public static reject(node: Element, onFinished: () => void = null) {\n        let $node = $(node) as JQuery;\n        if ($node.hasClass(\"ice-ins\")) {\n            MotionMergeChangeActions.insertReject($node, onFinished);\n        }\n        if ($node.hasClass(\"ice-del\")) {\n            MotionMergeChangeActions.deleteReject($node, onFinished);\n        }\n    }\n\n    public static insertReject($node: JQuery, onFinished: () => void = null) {\n        let $removeEl: JQuery,\n            name = $node[0].nodeName.toLowerCase();\n        if (name == 'li') {\n            $removeEl = $node.parent();\n        } else {\n            $removeEl = $node;\n        }\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n\n    public static insertAccept(node: Element, onFinished: () => void = null) {\n        let $this = $(node) as JQuery;\n        $this.removeClass(\"ice-cts ice-ins appendHint moved\");\n        $this.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        if (node.nodeName.toLowerCase() == 'ul' || node.nodeName.toLowerCase() == 'ol') {\n            $this.children().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'li') {\n            $this.parent().removeClass(\"ice-cts\").removeClass(\"ice-ins\").removeClass(\"appendHint\");\n        }\n        if (node.nodeName.toLowerCase() == 'ins') {\n            $this.replaceWith($this.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteReject($node: JQuery, onFinished: () => void = null) {\n        $node.removeClass(\"ice-cts ice-del appendHint\");\n        $node.removeAttr(\"data-moving-partner data-moving-partner-id data-moving-partner-paragraph data-moving-msg\");\n        let nodeName = $node[0].nodeName.toLowerCase();\n        if (nodeName == 'ul' || nodeName == 'ol') {\n            $node.children().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'li') {\n            $node.parent().removeClass(\"ice-cts\").removeClass(\"ice-del\").removeClass(\"appendHint\");\n        }\n        if (nodeName == 'del') {\n            $node.replaceWith($node.html());\n        }\n        if (onFinished) onFinished();\n    }\n\n    public static deleteAccept(node: Element, onFinished: () => void = null) {\n        let name = node.nodeName.toLowerCase(),\n            $removeEl: JQuery;\n        if (name == 'li') {\n            $removeEl = $(node).parent() as JQuery;\n        } else {\n            $removeEl = $(node) as JQuery;\n        }\n\n        if (name == 'ul' || name == 'ol' || name == 'li' || name == 'blockquote' || name == 'pre' || name == 'p') {\n            $removeEl.css(\"overflow\", \"hidden\").height($removeEl.height());\n            $removeEl.animate({\"height\": \"0\"}, 250, () => {\n                $removeEl.remove();\n                $(\".collidingParagraph:empty\").remove();\n                MotionMergeChangeActions.removeEmptyParagraphs();\n                if (onFinished) onFinished();\n            });\n        } else {\n            $removeEl.remove();\n            if (onFinished) onFinished();\n        }\n    }\n}\n\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\"),\n            isAppendedCollision = ($myEl.data(\"appended-collision\") === 1 || $myEl.parent().data(\"appended-collision\") === 1),\n            isModU = $myEl.data(\"is-modu\") === 1;\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '';\n        if (isAppendedCollision) {\n            html += '<div class=\"mergingPopoverCollisionHint\">⚠️ ' + __t(\"merge\", \"mergedCollisionHint\") + '</div>';\n        }\n        html += '<div class=\"mergingPopoverButtons\">';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        if (isModU) {\n            $el.find(\".initiator\").text(__t(\"merge\", \"modU\"));\n        } else {\n            $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        }\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(_, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>')\n            .replace(/<[^>]*ice-ins[^>]*>/g, 'ice-ins') // make sure accepted insertions are still recognized as change\n            .replace(/<ins[^>]*>/g, 'ice-ins')\n            .replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n    public statusWidgetComponent: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = Vue.createApp({\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data() { return {\n                amendmentParagraphData,\n            } },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendment, active) {\n                    amendment.active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendment, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                },\n                onStatusUpdated(amendmentId, newStatus) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                },\n                onVotingUpdated(amendmentId, votingData) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.votingData = votingData;\n                    }\n                },\n                onVersionUpdated(amendmentId, version) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.version = version;\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                },\n                onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n                    this.amendmentParagraphData.push({\n                        amendmentId: amendment.id,\n                        amendment, nameBase, idAdd, active, status, verstion, votingData\n                    });\n                },\n                onAmendmentDeleted(amendmentId) {\n                    this.amendmentParagraphData = this.amendmentParagraphData.filter(amend => amend.amendmentId != amendmentId);\n                }\n            }\n        });\n\n        para.statusWidget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](para.statusWidget, 'merging');\n        para.statusWidgetComponent = para.statusWidget.mount(this.$holder.find(\".changeToolbar .statuses\")[0]);\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidgetComponent.onVersionUpdated(amendmentId, version);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidgetComponent.onVotingUpdated(amendmentId, votingData);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidgetComponent.onStatusUpdated(amendmentId, status);\n    }\n\n    public onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n        this.statusWidgetComponent.onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData);\n    }\n\n    public onAmendmentDeleted(amendmentId) {\n        this.statusWidgetComponent.onAmendmentDeleted(amendmentId);\n    }\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => amendmentData.amendmentId);\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    public $newAmendmentAlert: JQuery;\n    private paragraphsByTypeAndNo: {[typeAndPara: string]: MotionMergeAmendmentsParagraph} = {};\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            const sectionId = $para.data(\"section-id\");\n            const paragraphId = $para.data(\"paragraph-id\");\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphsByTypeAndNo[sectionId + '_' + paragraphId] = new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData);\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initNewAmendmentAlert();\n        this.initCheckBackendStatus();\n        this.initRemovingSectionTexts();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options: Intl.DateTimeFormatOptions = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (Object.keys(this.paragraphsByTypeAndNo).map(id => this.paragraphsByTypeAndNo[id])\n            .filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            return;\n        }\n\n        console.log(\"Has unsaved changes\");\n\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        Object.keys(this.paragraphsByTypeAndNo).forEach(paraId => {\n            data.paragraphs[paraId] = this.paragraphsByTypeAndNo[paraId].getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSavingUrl'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    Object.keys(this.paragraphsByTypeAndNo).forEach(parId => this.paragraphsByTypeAndNo[parId].onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n\n    private initNewAmendmentAlert() {\n        this.$newAmendmentAlert = MotionMergeAmendments.$form.find('#newAmendmentAlert');\n        this.$newAmendmentAlert.find('.closeLink').on('click', () => {\n            this.$newAmendmentAlert.find('.buttons').children().remove();\n            this.$newAmendmentAlert.removeClass('revealed');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('hidden');\n            }, 1000);\n        });\n    }\n\n    private alertAboutNewAmendment(amendmentId: number, title: string) {\n        const $buttons = this.$newAmendmentAlert.find('.buttons');\n        const $newButton = $('<button class=\"btn-link gotoAmendment\" type=\"button\"></button>').text(title);\n        $newButton.on('click', () => {\n            const $firstToggle = $(\".amendmentStatus\" + amendmentId).first();\n            const $paragraph = $firstToggle.parents('.paragraphWrapper');\n            $paragraph.scrollintoview({top_offset: -100});\n        });\n        $buttons.append($newButton);\n\n        if ($buttons.children().length > 1) {\n            this.$newAmendmentAlert.find('.message .one').addClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').removeClass('hidden');\n        } else {\n            this.$newAmendmentAlert.find('.message .one').removeClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').addClass('hidden');\n        }\n\n        if (this.$newAmendmentAlert.hasClass('hidden')) {\n            this.$newAmendmentAlert.removeClass('hidden');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('revealed');\n            }, 100);\n        }\n    }\n\n    private initCheckBackendStatus() {\n        window.setInterval(() => {\n            let url = MotionMergeAmendments.$form.data('checkStatusUrl');\n            const amendmentIds = AmendmentStatuses.getAmendmentIds();\n            url = url.replace(/AMENDMENTS/, amendmentIds.join(','));\n            $.get(url, data => {\n                if (data['success']) {\n                    this.onReceivedBackendStatus(data['new'], data['deleted']);\n                } else {\n                    console.warn(data);\n                }\n            });\n        }, 3000);\n    }\n\n    private onReceivedBackendStatus(newAmendments: any[], deletedAmendments: any[]) {\n        const newAmendmentStaticData = {},\n            newAmendmentStatus = {};\n        newAmendments['staticData'].forEach(amendmentData => {\n            const status = newAmendments['status'][amendmentData['id']];\n            newAmendmentStaticData[amendmentData['id']] = amendmentData;\n            newAmendmentStatus[amendmentData['id']] = status;\n\n            AmendmentStatuses.registerNewAmendment(amendmentData['id'], status['status'], status['version'], status['votingData']);\n\n            this.alertAboutNewAmendment(amendmentData['id'], amendmentData['titlePrefix']);\n        });\n\n        Object.keys(newAmendments['paragraphs']).forEach(typeId => {\n            Object.keys(newAmendments['paragraphs'][typeId]).forEach(paragraphNo => {\n                const paraObj = this.paragraphsByTypeAndNo[typeId + '_' + paragraphNo];\n                newAmendments['paragraphs'][typeId][paragraphNo].forEach(data => {\n                    const paraAmendmentData = newAmendmentStaticData[data.amendmentId];\n                    const status = newAmendmentStatus[data.amendmentId];\n                    paraObj.onAmendmentAdded(paraAmendmentData, data['nameBase'], data['idAdd'], data['active'], status['status'], status['version'], status['votingData'])\n                    AmendmentStatuses.registerParagraph(data.amendmentId, paraObj);\n                });\n            });\n        });\n\n        deletedAmendments.forEach(amendmentId => {\n            console.log(\"Removing amendment\", amendmentId);\n            AmendmentStatuses.deleteAmendment(amendmentId);\n\n            Object.keys(this.paragraphsByTypeAndNo).forEach(id => {\n                this.paragraphsByTypeAndNo[id].onAmendmentDeleted(amendmentId);\n            });\n        });\n    }\n}\n"]}
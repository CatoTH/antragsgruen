{"version":3,"sources":["frontend/MotionMergeAmendments.js","frontend/MotionMergeAmendments.ts"],"names":["define","require","exports","AntragsgruenEditor_1","MotionMergeChangeActions_1","Object","defineProperty","value","MotionMergeAmendments","STATUS_ACCEPTED","STATUS_MODIFIED_ACCEPTED","STATUS_PROCESSED","STATUS_ADOPTED","STATUS_COMPLETED","AmendmentStatuses","init","statuses","versions","votingData","keys","forEach","amendmentId","statusListeners","registerNewAmendment","status","version","console","log","deleteAmendment","getAmendmentStatus","getAmendmentVersion","getAmendmentVotingData","registerParagraph","paragraph","push","setStatus","onAmendmentStatusChanged","setVersion","onAmendmentVersionChanged","setVotesData","voteData","onAmendmentVotingChanged","getAmendmentIds","map","key","parseInt","getAllStatuses","getAllVersions","getAllVotingData","MotionMergeChangeTooltip","constructor","$element","mouseX","mouseY","parent","this","positionX","positionY","popover","container","animation","trigger","placement","$popover","$","data","window","setTimeout","width","elTop","offset","top","elHeight","height","css","html","content","getContent","bind","find","on","ev","stopPropagation","removePopupIfInactive","$myEl","cid","isAppendedCollision","isModU","undefined","parents","first","addClass","__t","$el","attr","text","hasClass","accept","reject","nodeName","toLowerCase","$list","alert","is","length","destroy","affectedChangesets","performActionWithUI","action","scrollX","scrollY","saveEditorSnapshot","call","focusTextarea","scrollTo","each","i","el","MotionMergeChangeActions","onChanged","focusAtSameCid","removeClass","stale","$stale","remove","warn","e","MotionMergeAmendmentsTextarea","prepareText","$text","$this","appendHint","removeData","markupMovedParagraph","newText","texteditor","setData","unchangedText","normalizeHtml","getData","fire","addChangedListener","cb","changedListeners","_","msg","$node","paragraphNew","replace","initializeTooltips","$holder","$target","currentTarget","activePopup","pageX","pageY","acceptAll","insertAccept","deleteAccept","rejectAll","insertReject","deleteReject","getUnchangedContent","setText","entities","ent","RegExp","$changedIndicator","hasChanged","$mergeActionHolder","hasChanges","$textarea","edit","AntragsgruenEditor","getEditor","MotionMergeAmendmentsParagraph","draft","amendmentStaticData","hasUnsavedChanges","handledCollisions","sectionId","paragraphId","paragraphDraft","paragraphs","$changed","textarea","initButtons","initSetCollisionsAsHandled","initStatusWidget","element","amendmentParagraphData","amend","id","JSON","parse","stringify","para","doAfterAskIfChanged","bootbox","confirm","result","statusWidget","Vue","createApp","template","methods","getAllAmendmentData","getAmendmentData","setAmendmentActive","amendment","active","reloadText","update","eventData","op","onStatusUpdated","newStatus","indexOf","onVotingUpdated","onVersionUpdated","onAmendmentAdded","nameBase","idAdd","verstion","onAmendmentDeleted","filter","config","compilerOptions","whitespace","statusWidgetComponent","mount","$collision","$collisionHolder","children","preventDefault","amendments","amendmentData","url","get","collisions","str","getDraftData","amendmentToggles","unchanged","onDraftChanged","$form","paragraphsByTypeAndNo","document","getElementById","getAttribute","amendmentStatuses","amendmentVersions","amendmentVotingData","$para","currMouseX","offsetX","saveDraft","off","onLeavePage","initDraftSaving","initNewAmendmentAlert","initCheckBackendStatus","initRemovingSectionTexts","initProtocol","setDraftDate","date","$draftSavingPanel","hide","lang","formatted","Intl","DateTimeFormat","year","month","day","hour","minute","hour12","format","$checkbox","$section","prop","editor","val","onlyInput","par","protocolPublic","sections","removedSections","protocol","CKEDITOR","instances","paraId","isPublic","dataStr","setAttribute","ajax","type","public","_csrf","success","ret","Date","parId","error","initAutosavingDraft","$toggle","setInterval","localStorage","state","getItem","setItem","$newAmendmentAlert","alertAboutNewAmendment","title","$buttons","$newButton","scrollintoview","top_offset","append","amendmentIds","join","onReceivedBackendStatus","newAmendments","deletedAmendments","newAmendmentStaticData","newAmendmentStatus","typeId","paragraphNo","paraObj","paraAmendmentData"],"mappings":"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","file":"MotionMergeAmendments.js","sourcesContent":[null,"import { AntragsgruenEditor } from \"../shared/AntragsgruenEditor\";\nimport { MotionMergeChangeActions } from '../shared/MotionMergeChangeActions';\nimport editor = CKEDITOR.editor;\nimport ClickEvent = JQuery.ClickEvent;\n\ndeclare let Vue: any;\n\nconst STATUS_ACCEPTED = 4;\nconst STATUS_MODIFIED_ACCEPTED = 6;\nconst STATUS_PROCESSED = 17;\nconst STATUS_ADOPTED = 8;\nconst STATUS_COMPLETED = 9;\n\ntype AMENDMENT_VERSION = string;\n\ninterface VotingData {\n    votesYes: number;\n    votesNo: number;\n    votesAbstention: number;\n    votesInvalid: number;\n    comment: string;\n}\n\nclass AmendmentStatuses {\n    private static statuses: { [amendmentId: number]: number };\n    private static versions: { [amendmentId: number]: AMENDMENT_VERSION };\n    private static votingData: { [amendmentId: number]: VotingData };\n    private static statusListeners: { [amendmentId: number]: MotionMergeAmendmentsParagraph[] } = {};\n\n    public static init(\n        statuses: { [amendmentId: number]: number },\n        versions: { [amendmentId: number]: AMENDMENT_VERSION },\n        votingData: { [amendmentId: number]: VotingData }\n    ) {\n        AmendmentStatuses.statuses = statuses;\n        AmendmentStatuses.versions = versions;\n        AmendmentStatuses.votingData = votingData;\n\n        Object.keys(statuses).forEach(amendmentId => {\n            AmendmentStatuses.statusListeners[amendmentId] = [];\n        });\n    }\n\n    public static registerNewAmendment(amendmentId: number, status: number, version: AMENDMENT_VERSION, votingData: VotingData) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.votingData[amendmentId] = votingData;\n        AmendmentStatuses.statusListeners[amendmentId] = [];\n\n        console.log(\"registered new amendment status\", AmendmentStatuses.statuses, AmendmentStatuses.versions, AmendmentStatuses.votingData);\n    }\n\n    public static deleteAmendment(amendmentId: number) {\n        delete(AmendmentStatuses.statuses[amendmentId]);\n        delete(AmendmentStatuses.versions[amendmentId]);\n        delete(AmendmentStatuses.votingData[amendmentId]);\n    }\n\n    public static getAmendmentStatus(amendmentId: number): number {\n        return AmendmentStatuses.statuses[amendmentId];\n    }\n\n    public static getAmendmentVersion(amendmentId: number): AMENDMENT_VERSION {\n        return AmendmentStatuses.versions[amendmentId];\n    }\n\n    public static getAmendmentVotingData(amendmentId: number): VotingData {\n        return AmendmentStatuses.votingData[amendmentId];\n    }\n\n    public static registerParagraph(amendmentId: number, paragraph: MotionMergeAmendmentsParagraph) {\n        AmendmentStatuses.statusListeners[amendmentId].push(paragraph);\n    }\n\n    public static setStatus(amendmentId: number, status: number) {\n        AmendmentStatuses.statuses[amendmentId] = status;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentStatusChanged(amendmentId, status);\n        });\n    }\n\n    public static setVersion(amendmentId: number, version: AMENDMENT_VERSION) {\n        AmendmentStatuses.versions[amendmentId] = version;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVersionChanged(amendmentId, version);\n        });\n    }\n\n    public static setVotesData(amendmentId: number, voteData: VotingData) {\n        AmendmentStatuses.votingData[amendmentId] = voteData;\n        AmendmentStatuses.statusListeners[amendmentId].forEach(paragraph => {\n            paragraph.onAmendmentVotingChanged(amendmentId, voteData);\n        });\n    }\n\n    public static getAmendmentIds(): number[] {\n        return Object.keys(AmendmentStatuses.statuses).map(key => parseInt(key, 10));\n    }\n\n    public static getAllStatuses(): { [amendmentId: number]: number } {\n        return AmendmentStatuses.statuses;\n    }\n\n    public static getAllVersions(): { [amendmentId: number]: AMENDMENT_VERSION } {\n        return AmendmentStatuses.versions;\n    }\n\n    public static getAllVotingData(): { [amendmentId: number]: VotingData } {\n        return AmendmentStatuses.votingData;\n    }\n}\n\nclass MotionMergeChangeTooltip {\n    constructor(private $element: JQuery, mouseX: number, mouseY: number, private parent: MotionMergeAmendmentsTextarea) {\n        let positionX: number = null,\n            positionY: number = null;\n        $element.popover({\n            'container': 'body',\n            'animation': false,\n            'trigger': 'manual',\n            'placement': function (popover) {\n                let $popover = $(<any>popover);\n                $popover.data(\"element\", $element);\n                window.setTimeout(() => {\n                    let width = $popover.width(),\n                        elTop = $element.offset().top,\n                        elHeight = $element.height();\n                    if (positionX === null && width > 0) {\n                        positionX = (mouseX - width / 2);\n                        positionY = mouseY + 10;\n                        if (positionY < (elTop + 19)) {\n                            positionY = elTop + 19;\n                        }\n                        if (positionY > elTop + elHeight) {\n                            positionY = elTop + elHeight;\n                        }\n                    }\n                    $popover.css(\"left\", positionX + \"px\");\n                    $popover.css(\"top\", positionY + \"px\");\n                }, 1);\n                return \"bottom\";\n            },\n            'html': true,\n            'content': this.getContent.bind(this)\n        });\n\n        $element.popover('show');\n        let $popover: JQuery = $element.find(\"> .popover\");\n        $popover.on(\"mousemove\", (ev) => {\n            ev.stopPropagation();\n        });\n        window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n    }\n\n    private getContent() {\n        let $myEl: JQuery = this.$element,\n            html,\n            cid = $myEl.data(\"cid\"),\n            isAppendedCollision = ($myEl.data(\"appended-collision\") === 1 || $myEl.parent().data(\"appended-collision\") === 1),\n            isModU = $myEl.data(\"is-modu\") === 1;\n        if (cid == undefined) {\n            cid = $myEl.parent().data(\"cid\");\n        }\n        $myEl.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").addClass(\"hover\");\n\n        html = '';\n        if (isAppendedCollision) {\n            html += '<div class=\"mergingPopoverCollisionHint\">⚠️ ' + __t(\"merge\", \"mergedCollisionHint\") + '</div>';\n        }\n        html += '<div class=\"mergingPopoverButtons\">';\n        html += '<button type=\"button\" class=\"accept btn btn-sm btn-default\"></button>';\n        html += '<button type=\"button\" class=\"reject btn btn-sm btn-default\"></button>';\n        html += '<a href=\"#\" class=\"btn btn-small btn-default opener\" target=\"_blank\"><span class=\"glyphicon glyphicon-new-window\"></span></a>';\n        html += '<div class=\"initiator\" style=\"font-size: 0.8em;\"></div>';\n        html += '</div>';\n        let $el: JQuery = $(html);\n        $el.find(\".opener\").attr(\"href\", $myEl.data(\"link\")).attr(\"title\", __t(\"merge\", \"title_open_in_blank\"));\n        if (isModU) {\n            $el.find(\".initiator\").text(__t(\"merge\", \"modU\"));\n        } else {\n            $el.find(\".initiator\").text(__t(\"merge\", \"initiated_by\") + \": \" + $myEl.data(\"username\"));\n        }\n        if ($myEl.hasClass(\"ice-ins\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl.hasClass(\"ice-del\")) {\n            $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n            $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n        } else if ($myEl[0].nodeName.toLowerCase() == 'li') {\n            let $list = $myEl.parent();\n            if ($list.hasClass(\"ice-ins\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else if ($list.hasClass(\"ice-del\")) {\n                $el.find(\"button.accept\").text(__t(\"merge\", \"change_accept\")).on(\"click\", this.accept.bind(this));\n                $el.find(\"button.reject\").text(__t(\"merge\", \"change_reject\")).on(\"click\", this.reject.bind(this));\n            } else {\n                console.log(\"unknown\", $list);\n            }\n        } else {\n            console.log(\"unknown\", $myEl);\n            alert(\"unknown\");\n        }\n        return $el;\n    }\n\n    private removePopupIfInactive() {\n        if (this.$element.is(\":hover\")) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        if ($(\"body\").find(\".popover:hover\").length > 0) {\n            return window.setTimeout(this.removePopupIfInactive.bind(this), 1000);\n        }\n        this.destroy();\n    }\n\n    private affectedChangesets() {\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n        return this.$element.parents(\".texteditor\").find(\"[data-cid=\" + cid + \"]\");\n    }\n\n    private performActionWithUI(action) {\n        let scrollX = window.scrollX,\n            scrollY = window.scrollY;\n\n        this.parent.saveEditorSnapshot();\n        this.destroy();\n        action.call(this);\n        this.parent.focusTextarea();\n\n        window.scrollTo(scrollX, scrollY);\n    }\n\n    private accept() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.accept(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    private reject() {\n        this.performActionWithUI(() => {\n            this.affectedChangesets().each((i, el) => {\n                MotionMergeChangeActions.reject(el, () => {\n                    this.parent.onChanged();\n                });\n            });\n        });\n    }\n\n    public destroy() {\n        this.$element.popover(\"hide\").popover(\"destroy\");\n\n        let cid = this.$element.data(\"cid\");\n        if (cid == undefined) {\n            cid = this.$element.parent().data(\"cid\");\n        }\n\n        let focusAtSameCid = false;\n        this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").each((i, el) => {\n            if ($(el).is(\":hover\")) {\n                focusAtSameCid = true;\n            }\n        });\n        if (!focusAtSameCid) {\n            this.$element.parents(\".texteditor\").first().find(\"[data-cid=\" + cid + \"]\").removeClass(\"hover\");\n        }\n\n        try {\n            // Remove stale objects that were not removed correctly previously\n            $(\".popover\").each((i, stale) => {\n                const $stale = $(stale);\n                if (!$stale.data(\"element\").is(\":hover\")) {\n                    $stale.popover(\"hide\").popover(\"destroy\");\n                    $stale.remove();\n                    console.warn(\"Removed stale window: \", $stale);\n                }\n            });\n        } catch (e) {\n        }\n    }\n}\n\nclass MotionMergeAmendmentsTextarea {\n    private texteditor: editor;\n    private unchangedText: string = null;\n    private hasChanged: boolean = false;\n    private changedListeners: { (): void }[] = [];\n\n    private prepareText(html: string) {\n        let $text: JQuery = $('<div>' + html + '</div>');\n\n        // Move the amendment-Data from OL's and UL's to their list items\n        $text.find(\"ul.appendHint, ol.appendHint\").each((i, el) => {\n            let $this: JQuery = $(el),\n                appendHint = $this.data(\"append-hint\");\n            $this.find(\"> li\").addClass(\"appendHint\").attr(\"data-append-hint\", appendHint)\n                .attr(\"data-link\", $this.data(\"link\"))\n                .attr(\"data-username\", $this.data(\"username\"));\n            $this.removeClass(\"appendHint\").removeData(\"append-hint\");\n        });\n\n        // Remove double markup\n        $text.find(\".moved .moved\").removeClass('moved');\n        $text.find(\".moved\").each(this.markupMovedParagraph.bind(this));\n\n        let newText = $text.html();\n        this.texteditor.setData(newText);\n        this.unchangedText = this.normalizeHtml(this.texteditor.getData());\n        this.texteditor.fire('saveSnapshot');\n        this.onChanged();\n    }\n\n    public addChangedListener(cb: () => void) {\n        this.changedListeners.push(cb);\n    }\n\n    private markupMovedParagraph(_, el) {\n        let $node = $(el),\n            paragraphNew = $node.data('moving-partner-paragraph'),\n            msg: string;\n\n        if ($node.hasClass('inserted')) {\n            msg = __t('std', 'moved_paragraph_from');\n        } else {\n            msg = __t('std', 'moved_paragraph_to');\n        }\n        msg = msg.replace(/##PARA##/, (paragraphNew + 1));\n\n        if ($node[0].nodeName === 'LI') {\n            $node = $node.parent();\n        }\n\n        $node.attr(\"data-moving-msg\", msg);\n    }\n\n    private initializeTooltips() {\n        this.$holder.on(\"mouseover\", \".appendHint\", (ev) => {\n            const $target = $(ev.currentTarget);\n            if ($target.parents('.paragraphWrapper').first().find('.amendmentStatus.open').length > 0) {\n                return;\n            }\n            if (MotionMergeAmendments.activePopup) {\n                MotionMergeAmendments.activePopup.destroy();\n            }\n            MotionMergeAmendments.activePopup = new MotionMergeChangeTooltip($target, ev.pageX, ev.pageY, this);\n        });\n    }\n\n\n    public acceptAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertAccept(el);\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteAccept(el);\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public rejectAll() {\n        this.saveEditorSnapshot();\n        this.$holder.find(\".ice-ins\").each((i, el) => {\n            MotionMergeChangeActions.insertReject($(el));\n        });\n        this.$holder.find(\".ice-del\").each((i, el) => {\n            MotionMergeChangeActions.deleteReject($(el));\n        });\n        this.onChanged();\n        window.setTimeout(() => {\n            // Wait for animation -> remove \"all dropdown\"\n            this.onChanged();\n            this.saveEditorSnapshot();\n        }, 1000);\n    }\n\n    public saveEditorSnapshot() {\n        this.texteditor.fire('saveSnapshot');\n    }\n\n    public focusTextarea() {\n        //this.$holder.find(\".texteditor\").focus();\n        // This lead to strange cursor behavior, e.g. when removing a colliding paragraph\n    }\n\n    public getContent(): string {\n        return this.texteditor.getData();\n    }\n\n    public getUnchangedContent(): string {\n        return this.unchangedText;\n    }\n\n    public setText(html: string) {\n        this.prepareText(html);\n        this.initializeTooltips();\n    }\n\n    private normalizeHtml(html: string) {\n        const entities = {\n            '&nbsp;': ' ',\n            '&ndash;': '-',\n            '&auml;': 'ä',\n            '&ouml;': 'ö',\n            '&uuml;': 'ü',\n            '&Auml;': 'Ä',\n            '&Ouml;': 'Ö',\n            '&Uuml;': 'Ü',\n            '&szlig;': 'ß',\n            '&bdquo;': '„',\n            '&ldquo;': '“',\n            '&bull;': '•',\n            '&sect;': '§',\n            '&eacute;': 'é',\n            '&rsquo;': '’',\n            '&euro;': '€'\n        };\n        Object.keys(entities).forEach(ent => {\n            html = html.replace(new RegExp(ent, 'g'), entities[ent]);\n        });\n\n        return html.replace(/\\s+</g, '<').replace(/>\\s+/g, '>')\n            .replace(/<[^>]*ice-ins[^>]*>/g, 'ice-ins') // make sure accepted insertions are still recognized as change\n            .replace(/<ins[^>]*>/g, 'ice-ins')\n            .replace(/<[^>]*>/g, '');\n    }\n\n    public onChanged() {\n        if (this.normalizeHtml(this.texteditor.getData()) === this.unchangedText) {\n            this.$changedIndicator.addClass(\"unchanged\");\n            this.hasChanged = false;\n        } else {\n            this.$changedIndicator.removeClass(\"unchanged\");\n            this.hasChanged = true;\n        }\n        if (this.$holder.find(\".ice-ins\").length > 0 || this.$holder.find(\".ice-del\").length > 0) {\n            this.$mergeActionHolder.removeClass(\"hidden\");\n        } else {\n            this.$mergeActionHolder.addClass(\"hidden\");\n        }\n        this.changedListeners.forEach(cb => cb());\n    }\n\n    public hasChanges(): boolean {\n        return this.hasChanged;\n    }\n\n    constructor(private $holder: JQuery, private $changedIndicator: JQuery, private $mergeActionHolder: JQuery) {\n        let $textarea = $holder.find(\".texteditor\");\n        let edit = new AntragsgruenEditor($textarea.attr(\"id\"));\n        this.texteditor = edit.getEditor();\n\n        this.setText(this.texteditor.getData());\n\n        if ($holder.data(\"unchanged\")) {\n            this.unchangedText = $holder.data(\"unchanged\");\n            this.onChanged();\n        }\n\n        this.texteditor.on('change', this.onChanged.bind(this));\n    }\n}\n\nclass MotionMergeAmendmentsParagraph {\n    public sectionId: number;\n    public paragraphId: number;\n    public textarea: MotionMergeAmendmentsTextarea;\n    public hasUnsavedChanges = false;\n    public handledCollisions: number[] = [];\n    public statusWidget: any;\n    public statusWidgetComponent: any;\n\n    constructor(private $holder: JQuery, draft: any, amendmentStaticData: any) {\n        this.sectionId = parseInt($holder.data('sectionId'));\n        this.paragraphId = parseInt($holder.data('paragraphId'));\n\n        const paragraphDraft = draft.paragraphs && draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] ? draft.paragraphs[this.sectionId + \"_\" + this.paragraphId] : null;\n        if (paragraphDraft.handledCollisions) {\n            this.handledCollisions = paragraphDraft.handledCollisions;\n        }\n\n        const $textarea = $holder.find(\".wysiwyg-textarea\");\n        const $changed = $holder.find(\".changedIndicator\");\n        const $mergeActionHolder = $holder.find(\".mergeActionHolder\");\n        this.textarea = new MotionMergeAmendmentsTextarea($textarea, $changed, $mergeActionHolder);\n\n        this.initButtons();\n        this.initSetCollisionsAsHandled();\n        this.initStatusWidget(amendmentStaticData);\n\n        $holder.find(\".amendmentStatus\").each((i: number, element) => {\n            AmendmentStatuses.registerParagraph($(element).data(\"amendment-id\"), this);\n        });\n\n        this.textarea.addChangedListener(() => this.hasUnsavedChanges = true);\n    }\n\n    private initStatusWidget(amendmentStaticData: any) {\n        const amendmentParagraphData = this.$holder.find(\".changeToolbar .statuses\").data(\"amendments\");\n        for (let i = 0; i < amendmentParagraphData.length; i++) {\n            const amendmentId = amendmentParagraphData[i].amendmentId;\n            amendmentParagraphData[i]['amendment'] = amendmentStaticData.find(amend => amend.id === amendmentId);\n            amendmentParagraphData[i]['status'] = AmendmentStatuses.getAmendmentStatus(amendmentId);\n            amendmentParagraphData[i]['version'] = AmendmentStatuses.getAmendmentVersion(amendmentId);\n            amendmentParagraphData[i]['votingData'] = JSON.parse(JSON.stringify(AmendmentStatuses.getAmendmentVotingData(amendmentId)));\n        }\n\n        const para = this;\n\n        const doAfterAskIfChanged = (cb) => {\n            if (para.textarea.hasChanges()) {\n                bootbox.confirm(__t('merge', 'reloadParagraph'), (result) => {\n                    if (result) {\n                        cb();\n                    }\n                });\n            } else {\n                cb();\n            }\n        };\n\n        para.statusWidget = Vue.createApp({\n            template: `\n                <div class=\"statuses\">\n                    <paragraph-amendment-settings v-for=\"data in amendmentParagraphData\"\n                                                  v-bind:amendment=\"data.amendment\"\n                                                  v-bind:nameBase=\"data.nameBase\"\n                                                  v-bind:idAdd=\"data.idAdd\"\n                                                  v-bind:active=\"data.active\"\n                                                  v-bind:status=\"data.status\"\n                                                  v-bind:version=\"data.version\"\n                                                  v-bind:votingData=\"data.votingData\"\n                                                  v-on:update=\"update($event)\"\n                    ></paragraph-amendment-settings>\n                </div>`,\n            data() { return {\n                amendmentParagraphData,\n            } },\n            methods: {\n                getAllAmendmentData() {\n                    return this.amendmentParagraphData;\n                },\n                getAmendmentData(amendmentId) {\n                    for (let i = 0; i < this.amendmentParagraphData.length; i++) {\n                        if (this.amendmentParagraphData[i].amendmentId == amendmentId) {\n                            return this.amendmentParagraphData[i];\n                        }\n                    }\n                    return null;\n                },\n                setAmendmentActive(amendment, active) {\n                    amendment.active = active;\n                    para.reloadText();\n                },\n                update(eventData) {\n                    // Events coming from the widget directly\n                    const op = eventData[0];\n                    const amendmentId = eventData[1],\n                        amendment = this.getAmendmentData(amendmentId);\n                    if (!amendment) {\n                        return;\n                    }\n                    switch (op) {\n                        case 'set-active':\n                            doAfterAskIfChanged(() => this.setAmendmentActive(amendment, eventData[2]));\n                            break;\n                        case 'set-status':\n                            AmendmentStatuses.setStatus(amendmentId, parseInt(eventData[2]));\n                            break;\n                        case 'set-votes':\n                            AmendmentStatuses.setVotesData(amendmentId, eventData[2]);\n                            break;\n                        case 'set-version':\n                            console.log(\"set version\", eventData[2]);\n                            doAfterAskIfChanged(() => {\n                                // Do this no matter what - not only if it's unchanged\n                                AmendmentStatuses.setVersion(amendmentId, eventData[2]);\n                                para.reloadText();\n                            });\n                            break;\n                    }\n                    para.hasUnsavedChanges = true;\n                },\n                onStatusUpdated(amendmentId, newStatus) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.status = newStatus;\n                        if (!para.textarea.hasChanges()) {\n                            amendment.active = ([STATUS_ACCEPTED, STATUS_MODIFIED_ACCEPTED, STATUS_PROCESSED, STATUS_ADOPTED, STATUS_COMPLETED].indexOf(newStatus) !== -1);\n                            para.reloadText();\n                        }\n                    }\n                },\n                onVotingUpdated(amendmentId, votingData) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.votingData = votingData;\n                    }\n                },\n                onVersionUpdated(amendmentId, version) {\n                    const amendment = this.getAmendmentData(amendmentId);\n                    if (amendment) {\n                        amendment.version = version;\n                        if (!para.textarea.hasChanges()) {\n                            para.reloadText();\n                        }\n                    }\n                },\n                onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n                    this.amendmentParagraphData.push({\n                        amendmentId: amendment.id,\n                        amendment, nameBase, idAdd, active, status, verstion, votingData\n                    });\n                },\n                onAmendmentDeleted(amendmentId) {\n                    this.amendmentParagraphData = this.amendmentParagraphData.filter(amend => amend.amendmentId != amendmentId);\n                }\n            }\n        });\n\n        para.statusWidget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](para.statusWidget, 'merging');\n        para.statusWidgetComponent = para.statusWidget.mount(this.$holder.find(\".changeToolbar .statuses\")[0]);\n    }\n\n    public onAmendmentVersionChanged(amendmentId: number, version: string) {\n        this.statusWidgetComponent.onVersionUpdated(amendmentId, version);\n    }\n\n    public onAmendmentVotingChanged(amendmentId: number, votingData: VotingData) {\n        this.statusWidgetComponent.onVotingUpdated(amendmentId, votingData);\n    }\n\n    public onAmendmentStatusChanged(amendmentId: number, status: number) {\n        this.statusWidgetComponent.onStatusUpdated(amendmentId, status);\n    }\n\n    public onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData) {\n        this.statusWidgetComponent.onAmendmentAdded(amendment, nameBase, idAdd, active, status, verstion, votingData);\n    }\n\n    public onAmendmentDeleted(amendmentId) {\n        this.statusWidgetComponent.onAmendmentDeleted(amendmentId);\n    }\n\n    private initSetCollisionsAsHandled() {\n        this.$holder.on(\"click\", \"button.hideCollision\", (ev: ClickEvent) => {\n            const $collision = $(ev.currentTarget).parents(\".collidingParagraph\").first();\n            const amendmentId = parseInt($collision.data(\"amendment-id\"), 10);\n            const $collisionHolder = $collision.parent();\n            $collision.remove();\n            if ($collisionHolder.children().length === 0) {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions.push(amendmentId);\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private initButtons() {\n        this.$holder.find(\".mergeActionHolder .acceptAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.acceptAll();\n            this.hasUnsavedChanges = true;\n        });\n\n        this.$holder.find(\".mergeActionHolder .rejectAll\").on(\"click\", ev => {\n            ev.preventDefault();\n            this.textarea.rejectAll();\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    private reloadText() {\n        const amendments = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => {\n                return {\n                    id: amendmentData.amendmentId,\n                    version: AmendmentStatuses.getAmendmentVersion(amendmentData.amendmentId),\n                }\n            });\n        const url = this.$holder.data(\"reload-url\").replace('DUMMY', JSON.stringify(amendments));\n        $.get(url, (data) => {\n            this.textarea.setText(data.text);\n\n            let collisions = '';\n            data.collisions.forEach(str => {\n                collisions += str;\n            });\n\n            this.$holder.find(\".collisionsHolder\").html(collisions);\n            if (data.collisions.length > 0) {\n                this.$holder.addClass(\"hasCollisions\");\n            } else {\n                this.$holder.removeClass(\"hasCollisions\");\n            }\n            this.handledCollisions = [];\n            this.hasUnsavedChanges = true;\n        });\n    }\n\n    public getDraftData() {\n        const amendmentToggles = this.statusWidgetComponent.getAllAmendmentData()\n            .filter(amendmentData => amendmentData.active)\n            .map(amendmentData => amendmentData.amendmentId);\n        return {\n            amendmentToggles,\n            text: this.textarea.getContent(),\n            unchanged: this.textarea.getUnchangedContent(),\n            handledCollisions: this.handledCollisions,\n        };\n    }\n\n    public onDraftChanged() {\n        this.hasUnsavedChanges = false;\n    }\n}\n\n/**\n * Singleton object\n */\nexport class MotionMergeAmendments {\n    public static activePopup: MotionMergeChangeTooltip = null;\n    public static currMouseX: number = null;\n    public static $form;\n\n    public $draftSavingPanel: JQuery;\n    public $newAmendmentAlert: JQuery;\n    private paragraphsByTypeAndNo: {[typeAndPara: string]: MotionMergeAmendmentsParagraph} = {};\n    private hasUnsavedChanges = false;\n\n    constructor($form: JQuery) {\n        MotionMergeAmendments.$form = $form;\n\n        const draft = JSON.parse(document.getElementById('mergeDraft').getAttribute('value'));\n        AmendmentStatuses.init(draft.amendmentStatuses, draft.amendmentVersions, draft.amendmentVotingData);\n\n        const amendmentStaticData = $form.data('amendment-static-data');\n\n        $(\".paragraphWrapper\").each((i, el) => {\n            const $para = $(el);\n            const sectionId = $para.data(\"section-id\");\n            const paragraphId = $para.data(\"paragraph-id\");\n            $para.find(\".wysiwyg-textarea\").on(\"mousemove\", (ev) => {\n                MotionMergeAmendments.currMouseX = ev.offsetX;\n            });\n\n            this.paragraphsByTypeAndNo[sectionId + '_' + paragraphId] = new MotionMergeAmendmentsParagraph($para, draft, amendmentStaticData);\n        });\n\n        MotionMergeAmendments.$form.on(\"submit\", () => {\n            this.hasUnsavedChanges = true; // Enforce that the INPUT field is set\n            this.saveDraft(true);\n            $(window).off(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n        });\n        $(window).on(\"beforeunload\", MotionMergeAmendments.onLeavePage);\n\n        this.initDraftSaving();\n        this.initNewAmendmentAlert();\n        this.initCheckBackendStatus();\n        this.initRemovingSectionTexts();\n        this.initProtocol();\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    private setDraftDate(date: Date) {\n        this.$draftSavingPanel.find(\".lastSaved .none\").hide();\n\n        let options: Intl.DateTimeFormatOptions = {\n                year: 'numeric', month: 'numeric', day: 'numeric',\n                hour: 'numeric', minute: 'numeric',\n                hour12: false\n            },\n            lang: string = $(\"html\").attr(\"lang\"),\n            formatted = new Intl.DateTimeFormat(lang, options).format(date);\n\n        this.$draftSavingPanel.find(\".lastSaved .value\").text(formatted);\n    }\n\n    private initRemovingSectionTexts() {\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]\").on(\"change\", ev => {\n            const $checkbox = $(ev.currentTarget);\n            const $section = $checkbox.parents(\".section\").first();\n            if ($checkbox.prop(\"checked\")) {\n                $section.find(\".sectionHolder\").addClass(\"hidden\");\n            } else {\n                $section.find(\".sectionHolder\").removeClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initProtocol() {\n        const $textarea = $(\"#protocol_text_wysiwyg\");\n        $textarea.attr(\"contenteditable\", \"true\");\n        const ckeditor = new AntragsgruenEditor($textarea.attr(\"id\"));\n        const editor = ckeditor.getEditor();\n\n        $textarea.parents(\"form\").on(\"submit\", () => {\n            $textarea.parent().find(\"textarea\").val(editor.getData());\n        });\n    }\n\n    private saveDraft(onlyInput = false) {\n        if (Object.keys(this.paragraphsByTypeAndNo).map(id => this.paragraphsByTypeAndNo[id])\n            .filter(par => par.hasUnsavedChanges).length === 0 && !this.hasUnsavedChanges) {\n            return;\n        }\n\n        console.log(\"Has unsaved changes\");\n\n        const protocolPublic = $(\"input[name=protocol_public]:checked\").val() as string;\n        const data = {\n            \"amendmentStatuses\": AmendmentStatuses.getAllStatuses(),\n            \"amendmentVersions\": AmendmentStatuses.getAllVersions(),\n            \"amendmentVotingData\": AmendmentStatuses.getAllVotingData(),\n            \"paragraphs\": {},\n            \"sections\": {},\n            \"removedSections\": [],\n            \"protocol\": CKEDITOR.instances['protocol_text_wysiwyg'].getData(),\n            \"protocolPublic\": parseInt(protocolPublic) === 1,\n        };\n        $(\".sectionType0\").each((i, el) => {\n            const $section = $(el),\n                sectionId = $section.data(\"section-id\");\n            data.sections[sectionId] = $section.find(\".form-control\").val();\n        });\n        MotionMergeAmendments.$form.find(\".removeSection input[type=checkbox]:checked\").each((i, el) => {\n            data.removedSections.push(parseInt($(el).val() as string));\n        });\n\n        Object.keys(this.paragraphsByTypeAndNo).forEach(paraId => {\n            data.paragraphs[paraId] = this.paragraphsByTypeAndNo[paraId].getDraftData();\n        });\n        let isPublic: boolean = this.$draftSavingPanel.find('input[name=public]').prop('checked');\n\n        const dataStr = JSON.stringify(data);\n        document.getElementById('mergeDraft').setAttribute('value', dataStr);\n\n        if (!onlyInput) {\n            $.ajax({\n                type: \"POST\",\n                url: MotionMergeAmendments.$form.data('draftSavingUrl'),\n                data: {\n                    'public': (isPublic ? 1 : 0),\n                    data: dataStr,\n                    '_csrf': MotionMergeAmendments.$form.find('> input[name=_csrf]').val()\n                },\n                success: (ret) => {\n                    if (ret['success']) {\n                        this.$draftSavingPanel.find('.savingError').addClass('hidden');\n                        this.setDraftDate(new Date(ret['date']));\n                        if (isPublic) {\n                            MotionMergeAmendments.$form.find('.publicLink').removeClass('hidden');\n                        } else {\n                            MotionMergeAmendments.$form.find('.publicLink').addClass('hidden');\n                        }\n                    } else {\n                        this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorNetwork').addClass('hidden');\n                        this.$draftSavingPanel.find('.savingError .errorHolder').text(ret['error']).removeClass('hidden');\n                    }\n\n                    Object.keys(this.paragraphsByTypeAndNo).forEach(parId => this.paragraphsByTypeAndNo[parId].onDraftChanged());\n                    this.hasUnsavedChanges = false;\n                },\n                error: () => {\n                    this.$draftSavingPanel.find('.savingError').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorNetwork').removeClass('hidden');\n                    this.$draftSavingPanel.find('.savingError .errorHolder').text('').addClass('hidden');\n                }\n            });\n        }\n    }\n\n    private initAutosavingDraft() {\n        let $toggle: JQuery = this.$draftSavingPanel.find('input[name=autosave]');\n\n        window.setInterval(() => {\n            if ($toggle.prop('checked')) {\n                this.saveDraft(false);\n            }\n        }, 5000);\n\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-save');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-save', (active ? '1' : '0'));\n            }\n        }).trigger('change');\n    }\n\n    private initDraftSaving() {\n        this.$draftSavingPanel = MotionMergeAmendments.$form.find('#draftSavingPanel');\n        this.$draftSavingPanel.find('.saveDraft').on('click', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false);\n        });\n        this.$draftSavingPanel.find('input[name=public]').on('change', () => {\n            this.hasUnsavedChanges = true;\n            this.saveDraft(false)\n        });\n        this.initAutosavingDraft();\n\n        if (this.$draftSavingPanel.data(\"resumed-date\")) {\n            let date = new Date(this.$draftSavingPanel.data(\"resumed-date\"));\n            this.setDraftDate(date);\n        }\n\n        $(\".sectionType0\").on(\"change\", () => this.hasUnsavedChanges = true);\n\n        $(\"#yii-debug-toolbar\").remove();\n    }\n\n    private initNewAmendmentAlert() {\n        this.$newAmendmentAlert = MotionMergeAmendments.$form.find('#newAmendmentAlert');\n        this.$newAmendmentAlert.find('.closeLink').on('click', () => {\n            this.$newAmendmentAlert.find('.buttons').children().remove();\n            this.$newAmendmentAlert.removeClass('revealed');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('hidden');\n            }, 1000);\n        });\n    }\n\n    private alertAboutNewAmendment(amendmentId: number, title: string) {\n        const $buttons = this.$newAmendmentAlert.find('.buttons');\n        const $newButton = $('<button class=\"btn-link gotoAmendment\" type=\"button\"></button>').text(title);\n        $newButton.on('click', () => {\n            const $firstToggle = $(\".amendmentStatus\" + amendmentId).first();\n            const $paragraph = $firstToggle.parents('.paragraphWrapper');\n            $paragraph.scrollintoview({top_offset: -100});\n        });\n        $buttons.append($newButton);\n\n        if ($buttons.children().length > 1) {\n            this.$newAmendmentAlert.find('.message .one').addClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').removeClass('hidden');\n        } else {\n            this.$newAmendmentAlert.find('.message .one').removeClass('hidden');\n            this.$newAmendmentAlert.find('.message .many').addClass('hidden');\n        }\n\n        if (this.$newAmendmentAlert.hasClass('hidden')) {\n            this.$newAmendmentAlert.removeClass('hidden');\n            window.setTimeout(() => {\n                this.$newAmendmentAlert.addClass('revealed');\n            }, 100);\n        }\n    }\n\n    private initCheckBackendStatus() {\n        window.setInterval(() => {\n            let url = MotionMergeAmendments.$form.data('checkStatusUrl');\n            const amendmentIds = AmendmentStatuses.getAmendmentIds();\n            url = url.replace(/AMENDMENTS/, amendmentIds.join(','));\n            $.get(url, data => {\n                if (data['success']) {\n                    this.onReceivedBackendStatus(data['new'], data['deleted']);\n                } else {\n                    console.warn(data);\n                }\n            });\n        }, 3000);\n    }\n\n    private onReceivedBackendStatus(newAmendments: any[], deletedAmendments: any[]) {\n        const newAmendmentStaticData = {},\n            newAmendmentStatus = {};\n        newAmendments['staticData'].forEach(amendmentData => {\n            const status = newAmendments['status'][amendmentData['id']];\n            newAmendmentStaticData[amendmentData['id']] = amendmentData;\n            newAmendmentStatus[amendmentData['id']] = status;\n\n            AmendmentStatuses.registerNewAmendment(amendmentData['id'], status['status'], status['version'], status['votingData']);\n\n            this.alertAboutNewAmendment(amendmentData['id'], amendmentData['titlePrefix']);\n        });\n\n        Object.keys(newAmendments['paragraphs']).forEach(typeId => {\n            Object.keys(newAmendments['paragraphs'][typeId]).forEach(paragraphNo => {\n                const paraObj = this.paragraphsByTypeAndNo[typeId + '_' + paragraphNo];\n                newAmendments['paragraphs'][typeId][paragraphNo].forEach(data => {\n                    const paraAmendmentData = newAmendmentStaticData[data.amendmentId];\n                    const status = newAmendmentStatus[data.amendmentId];\n                    paraObj.onAmendmentAdded(paraAmendmentData, data['nameBase'], data['idAdd'], data['active'], status['status'], status['version'], status['votingData'])\n                    AmendmentStatuses.registerParagraph(data.amendmentId, paraObj);\n                });\n            });\n        });\n\n        deletedAmendments.forEach(amendmentId => {\n            console.log(\"Removing amendment\", amendmentId);\n            AmendmentStatuses.deleteAmendment(amendmentId);\n\n            Object.keys(this.paragraphsByTypeAndNo).forEach(id => {\n                this.paragraphsByTypeAndNo[id].onAmendmentDeleted(amendmentId);\n            });\n        });\n    }\n}\n"]}
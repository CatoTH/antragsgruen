{"version":3,"sources":["frontend/MergeInit.js","frontend/MergeInit.ts"],"names":["define","require","exports","Object","defineProperty","value","MergeInit","constructor","$widget","this","$checkboxes","find","$allCheckbox","initExportBtn","initAllCheckbox","recalcExportBtn","ids","filter","each","idx","el","push","parseInt","getAttribute","split","link","exportLinkTpl","replace","join","attr","on","recalcAllCheckbox","allSelected","noneSelected","$","prop"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,eAAY,ECHxBJ,EAAAI,UAAA,MAKI,WAAAC,CAAoBC,GAAAC,KAAAD,QAAAA,EAChBC,KAAKC,YAAcD,KAAKD,QAAQG,KAAK,oCACrCF,KAAKG,aAAeH,KAAKD,QAAQG,KAAK,cACtCF,KAAKI,gBACLJ,KAAKK,iBACT,CAEQ,eAAAC,GACJ,IAAIC,EAAM,GACVP,KAAKC,YAAYO,OAAO,YAAYC,MAAK,CAACC,EAAKC,KAC3CJ,EAAIK,KAAKC,SAASF,EAAGG,aAAa,QAAQC,MAAM,KAAK,IAAI,IAE7D,IAAIC,EAAOhB,KAAKiB,cAAcC,QAAQ,MAAOX,EAAIY,KAAK,MACtDnB,KAAKD,QAAQG,KAAK,mBAAmBkB,KAAK,OAAQJ,EACtD,CAEQ,aAAAZ,GACJJ,KAAKiB,cAAgBjB,KAAKD,QAAQG,KAAK,mBAAmBkB,KAAK,QAC1DpB,KAAKiB,gBAIVjB,KAAKD,QAAQsB,GAAG,SAAU,2CAA2C,KACjErB,KAAKM,iBAAiB,IAE1BN,KAAKM,kBACT,CAEQ,iBAAAgB,GACJ,IAAIC,GAAuB,EACvBC,GAAwB,EAC5BxB,KAAKC,YAAYQ,MAAK,CAACC,EAAKC,KACpBc,EAAEd,GAAIe,KAAK,WACXF,GAAe,EAEfD,GAAc,CAClB,IAEAC,EACAxB,KAAKG,aAAauB,KAAK,WAAW,GAAOA,KAAK,iBAAiB,GACxDH,EACPvB,KAAKG,aAAauB,KAAK,WAAW,GAAMA,KAAK,iBAAiB,GAE9D1B,KAAKG,aAAauB,KAAK,iBAAiB,EAEhD,CAEQ,eAAArB,GACJL,KAAKsB,oBACLtB,KAAKG,aAAakB,GAAG,UAAU,KAC3BrB,KAAKC,YAAYyB,KAAK,UAAW1B,KAAKG,aAAauB,KAAK,WAAW,IAEvE1B,KAAKC,YAAYoB,GAAG,UAAU,KAC3BrB,KAAKsB,mBAAmB,GAE/B,EDEJ","file":"MergeInit.js","sourcesContent":[null,"export class MergeInit {\n    private exportLinkTpl: string;\n    private $checkboxes: JQuery;\n    private $allCheckbox: JQuery;\n\n    constructor(private $widget: JQuery) {\n        this.$checkboxes = this.$widget.find('.toMergeAmendments .selectSingle');\n        this.$allCheckbox = this.$widget.find('.selectAll');\n        this.initExportBtn();\n        this.initAllCheckbox();\n    }\n\n    private recalcExportBtn() {\n        let ids = [];\n        this.$checkboxes.filter(\":checked\").each((idx, el: Element) => {\n            ids.push(parseInt(el.getAttribute('name').split('[')[1]));\n        });\n        let link = this.exportLinkTpl.replace(/IDS/, ids.join(','));\n        this.$widget.find('.exportHolder a').attr('href', link);\n    }\n\n    private initExportBtn() {\n        this.exportLinkTpl = this.$widget.find('.exportHolder a').attr('href');\n        if (!this.exportLinkTpl) {\n            return;\n        }\n\n        this.$widget.on('change', '.toMergeAmendments input[type=checkbox]', () => {\n            this.recalcExportBtn();\n        });\n        this.recalcExportBtn();\n    }\n\n    private recalcAllCheckbox() {\n        let allSelected: boolean = true;\n        let noneSelected: boolean = true;\n        this.$checkboxes.each((idx, el: Element) => {\n            if ($(el).prop(\"checked\")) {\n                noneSelected = false;\n            } else {\n                allSelected = false;\n            }\n        });\n        if (noneSelected) {\n            this.$allCheckbox.prop(\"checked\", false).prop(\"indeterminate\", false);\n        } else if (allSelected) {\n            this.$allCheckbox.prop(\"checked\", true).prop(\"indeterminate\", false);\n        } else {\n            this.$allCheckbox.prop(\"indeterminate\", true);\n        }\n    }\n\n    private initAllCheckbox() {\n        this.recalcAllCheckbox();\n        this.$allCheckbox.on(\"change\", () => {\n            this.$checkboxes.prop(\"checked\", this.$allCheckbox.prop(\"checked\"));\n        });\n        this.$checkboxes.on(\"change\", () => {\n           this.recalcAllCheckbox();\n        });\n    }\n}\n"]}
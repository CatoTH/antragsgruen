{"version":3,"sources":["backend/ConsultationSettings.js","backend/ConsultationSettings.ts"],"names":["define","require","exports","Object","defineProperty","value","ConsultationSettings","constructor","$form","this","element","initUrlPath","initTags","initOrganisations","initAdminMayEdit","initSingleMotionMode","initConPwd","$","tooltip","on","ev","preventDefault","addClass","removeClass","prop","trigger","$adminsMayEdit","$iniatorsMayEdit","parents","first","parent","confirmMessage","__t","bootbox","confirm","result","find","selectize","create","plugins","render","option_create","data","escape","input","widget","querySelector","checkbox","onCheckboxChange","checked","classList","add","remove","addEventListener","stopPropagation"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,0BAAuB,ECHnCJ,EAAAI,qBAAA,MAGIC,YAAoBC,GAAAC,KAAAD,MAAAA,EAChBC,KAAKC,QAAUF,EAAM,GACrBC,KAAKE,cACLF,KAAKG,WACLH,KAAKI,oBACLJ,KAAKK,mBACLL,KAAKM,uBACLN,KAAKO,aAELC,EAAE,2BAA2BC,SACjC,CAEQP,cACJM,EAAE,4BAA4BE,GAAG,SAAUC,IACvCA,EAAGC,iBACHJ,EAAE,0BAA0BK,SAAS,UACrCL,EAAE,0BAA0BM,YAAY,SAAS,GAEzD,CAEQR,uBACJE,EAAE,qBAAqBE,GAAG,UAAU,WAC5BF,EAAER,MAAMe,KAAK,WACbP,EAAE,mBAAmBM,YAAY,UAEjCN,EAAE,mBAAmBK,SAAS,SAEtC,IAAGG,QAAQ,SACf,CAEQX,mBACJ,IAAIY,EAAiBT,EAAE,kBACnBU,EAAmBV,EAAE,oBAAoBW,QAAQ,SAASC,QAAQC,SACtEJ,EAAeP,GAAG,UAAU,WACxB,GAAIF,EAAER,MAAMe,KAAK,WACbG,EAAiBJ,YAAY,cAC1B,CACH,IAAIQ,EAAiBC,IAAI,QAAS,uBAClCC,QAAQC,QAAQH,GAAgB,SAAUI,GAClCA,GACAR,EAAiBL,SAAS,UAC1BK,EAAiBS,KAAK,SAASZ,KAAK,WAAW,IAE/CE,EAAeF,KAAK,WAAW,EAEvC,GDEA,CCAR,IACKE,EAAeF,KAAK,YAAYG,EAAiBL,SAAS,SACnE,CAEQV,WACkBH,KAAKD,MAAM4B,KAAK,oBAC7BC,UAAU,CACfC,QAAQ,EACRC,QAAS,CAAC,iBACVC,OAAQ,CACJC,cAAe,CAACC,EAAMC,IACX,uBAAyBX,IAAI,MAAO,WAAa,aAAeW,EAAOD,EAAKE,OAAS,oBAI5G,CAEQ/B,oBACkBJ,KAAKD,MAAM4B,KAAK,4BAC7BC,UAAU,CACfC,QAAQ,EACRC,QAAS,CAAC,iBACVC,OAAQ,CACJC,cAAe,CAACC,EAAMC,IACX,uBAAyBX,IAAI,MAAO,WAAa,aAAeW,EAAOD,EAAKE,OAAS,oBAI5G,CAEQ5B,aACJ,MAAM6B,EAASpC,KAAKC,QAAQoC,cAAc,UAC1C,IAAKD,EACD,OAEJ,MAAME,EAAWF,EAAOC,cAAc,gCAChCE,EAAmB,KACjBD,EAASE,QACTJ,EAAOK,UAAUC,IAAI,WAErBN,EAAOK,UAAUE,OAAO,UDCxB,ECERL,EAASM,iBAAiB,SAAUL,GACpCA,IAEAH,EAAOC,cAAc,mBAAmBO,iBAAiB,SAASjC,IAC9DA,EAAGC,iBACHD,EAAGkC,kBACHT,EAAOK,UAAUC,IAAI,YAAY,GAEzC,EDEJ","file":"ConsultationSettings.js","sourcesContent":[null,"export class ConsultationSettings {\n    private element: HTMLFormElement;\n\n    constructor(private $form: JQuery) {\n        this.element = $form[0] as HTMLFormElement;\n        this.initUrlPath();\n        this.initTags();\n        this.initOrganisations();\n        this.initAdminMayEdit();\n        this.initSingleMotionMode();\n        this.initConPwd();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private initUrlPath() {\n        $('.urlPathHolder .shower a').on(\"click\", (ev) => {\n            ev.preventDefault();\n            $('.urlPathHolder .shower').addClass('hidden');\n            $('.urlPathHolder .holder').removeClass('hidden');\n        });\n    }\n\n    private initSingleMotionMode() {\n        $(\"#singleMotionMode\").on(\"change\", function () {\n            if ($(this).prop(\"checked\")) {\n                $(\"#forceMotionRow\").removeClass(\"hidden\");\n            } else {\n                $(\"#forceMotionRow\").addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initAdminMayEdit() {\n        let $adminsMayEdit = $(\"#adminsMayEdit\"),\n            $iniatorsMayEdit = $(\"#iniatorsMayEdit\").parents(\"label\").first().parent();\n        $adminsMayEdit.on(\"change\", function () {\n            if ($(this).prop(\"checked\")) {\n                $iniatorsMayEdit.removeClass(\"hidden\");\n            } else {\n                let confirmMessage = __t(\"admin\", \"adminMayEditConfirm\");\n                bootbox.confirm(confirmMessage, function (result) {\n                    if (result) {\n                        $iniatorsMayEdit.addClass(\"hidden\");\n                        $iniatorsMayEdit.find(\"input\").prop(\"checked\", false);\n                    } else {\n                        $adminsMayEdit.prop(\"checked\", true);\n                    }\n                });\n            }\n        });\n        if (!$adminsMayEdit.prop(\"checked\")) $iniatorsMayEdit.addClass(\"hidden\");\n    }\n\n    private initTags() {\n        const $tagList: any = this.$form.find(\"#tagsList select\");\n        $tagList.selectize({\n            create: true,\n            plugins: [\"remove_button\"],\n            render: {\n                option_create: (data, escape) => {\n                    return '<div class=\"create\">' + __t('std', 'add_tag') + ': <strong>' + escape(data.input) + '</strong></div>';\n                }\n            }\n        });\n    }\n\n    private initOrganisations() {\n        const $tagList: any = this.$form.find(\"#organisationList select\");\n        $tagList.selectize({\n            create: true,\n            plugins: [\"remove_button\"],\n            render: {\n                option_create: (data, escape) => {\n                    return '<div class=\"create\">' + __t('std', 'add_tag') + ': <strong>' + escape(data.input) + '</strong></div>';\n                }\n            }\n        })\n    }\n\n    private initConPwd() {\n        const widget = this.element.querySelector('.conpw');\n        if (!widget) {\n            return;\n        }\n        const checkbox = widget.querySelector('.setter input[type=checkbox]') as HTMLInputElement;\n        const onCheckboxChange = () => {\n            if (checkbox.checked) {\n                widget.classList.add(\"checked\");\n            } else {\n                widget.classList.remove(\"checked\");\n            }\n        };\n        checkbox.addEventListener('change', onCheckboxChange);\n        onCheckboxChange();\n\n        widget.querySelector('.setNewPassword').addEventListener('click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            widget.classList.add('changePwd');\n        });\n    }\n}\n"]}
{"version":3,"sources":["backend/ConsultationSettings.js","backend/ConsultationSettings.ts"],"names":["define","require","exports","Object","defineProperty","value","ConsultationSettings","constructor","$form","this","element","initUrlPath","initTags","initAdminMayEdit","initSingleMotionMode","initConPwd","$","tooltip","on","ev","preventDefault","addClass","removeClass","prop","trigger","$adminsMayEdit","$iniatorsMayEdit","parents","first","parent","confirmMessage","__t","bootbox","confirm","result","find","$tagRowTemplate","remove","activeTagType","$selected","val","document","querySelectorAll","forEach","tagList","Sortable","create","handle","animation","$newRow","clone","append","window","setTimeout","$li","data","widget","querySelector","checkbox","onCheckboxChange","checked","classList","add","addEventListener","stopPropagation"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,0BAAuB,ECHnCJ,EAAAI,qBAAA,MAGI,WAAAC,CAAoBC,GAAAC,KAAAD,MAAAA,EAChBC,KAAKC,QAAUF,EAAM,GACrBC,KAAKE,cACLF,KAAKG,WACLH,KAAKI,mBACLJ,KAAKK,uBACLL,KAAKM,aAELC,EAAE,2BAA2BC,SACjC,CAEQ,WAAAN,GACJK,EAAE,4BAA4BE,GAAG,SAAUC,IACvCA,EAAGC,iBACHJ,EAAE,0BAA0BK,SAAS,UACrCL,EAAE,0BAA0BM,YAAY,SAAS,GAEzD,CAEQ,oBAAAR,GACJE,EAAE,qBAAqBE,GAAG,UAAU,WAC5BF,EAAEP,MAAMc,KAAK,WACbP,EAAE,mBAAmBM,YAAY,UAEjCN,EAAE,mBAAmBK,SAAS,SAEtC,IAAGG,QAAQ,SACf,CAEQ,gBAAAX,GACJ,IAAIY,EAAiBT,EAAE,kBACnBU,EAAmBV,EAAE,oBAAoBW,QAAQ,SAASC,QAAQC,SACtEJ,EAAeP,GAAG,UAAU,WACxB,GAAIF,EAAEP,MAAMc,KAAK,WACbG,EAAiBJ,YAAY,cAC1B,CACH,IAAIQ,EAAiBC,IAAI,QAAS,uBAClCC,QAAQC,QAAQH,GAAgB,SAAUI,GAClCA,GACAR,EAAiBL,SAAS,UAC1BK,EAAiBS,KAAK,SAASZ,KAAK,WAAW,IAE/CE,EAAeF,KAAK,WAAW,EAEvC,GACJ,CACJ,IACKE,EAAeF,KAAK,YAAYG,EAAiBL,SAAS,SACnE,CAEQ,QAAAT,GACJ,MAAMJ,EAAQC,KAAKD,MAAM2B,KAAK,iBACxBC,EAAiB5B,EAAM2B,KAAK,sBAAsBE,SAExD,IAAIC,EAAgB,EAEpB9B,EAAM2B,KAAK,0BAA0BjB,GAAG,UAAU,KAC9C,MAAMqB,EAAY/B,EAAM2B,KAAK,kCAC7BG,EAAgBC,EAAUC,MAE1BhC,EAAM2B,KAAK,aAAad,SAAS,UACjCb,EAAM2B,KAAK,YAAcG,GAAehB,YAAY,SAAS,IAC9DE,QAAQ,UAEXiB,SAASC,iBAAiB,2BAA2BC,SAASC,IAC1DC,SAASC,OAAOF,EAAS,CACrBG,OAAQ,eACRC,UAAW,KACb,IAGNxC,EAAM2B,KAAK,oBAAoBjB,GAAG,SAAS,KACvC,MAAM+B,EAAUb,EAAgBc,QAChCD,EAAQd,KAAK,iBAAiBK,IAAIF,GAClC9B,EAAM2B,KAAK,YAAcG,GAAea,OAAOF,GAC/CG,OAAOC,YAAW,KACdJ,EAAQd,KAAK,SAASX,QAAQ,QAAQ,GACvC,IAAI,IAGXhB,EAAMU,GAAG,QAAS,sBAAsB,SAASC,GAC7C,IAAImC,EAAMtC,EAAEP,MAAMkB,QAAQ,MAAMC,QAChCT,EAAGC,iBAECkC,EAAIC,KAAK,gBACTvB,QAAQC,QAAQzB,EAAM+C,KAAK,oBAAoB,SAAUrB,GACjDA,GACAoB,EAAIjB,QAEZ,IAEAiB,EAAIjB,QAEZ,GACJ,CAEQ,UAAAtB,GACJ,MAAMyC,EAAS/C,KAAKC,QAAQ+C,cAAc,UAC1C,IAAKD,EACD,OAEJ,MAAME,EAAWF,EAAOC,cAAc,gCAChCE,EAAmB,KACjBD,EAASE,QACTJ,EAAOK,UAAUC,IAAI,WAErBN,EAAOK,UAAUxB,OAAO,UAC5B,EAEJqB,EAASK,iBAAiB,SAAUJ,GACpCA,IAEAH,EAAOC,cAAc,mBAAmBM,iBAAiB,SAAS5C,IAC9DA,EAAGC,iBACHD,EAAG6C,kBACHR,EAAOK,UAAUC,IAAI,YAAY,GAEzC,EDHJ","file":"ConsultationSettings.js","sourcesContent":[null,"export class ConsultationSettings {\n    private element: HTMLFormElement;\n\n    constructor(private $form: JQuery) {\n        this.element = $form[0] as HTMLFormElement;\n        this.initUrlPath();\n        this.initTags();\n        this.initAdminMayEdit();\n        this.initSingleMotionMode();\n        this.initConPwd();\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private initUrlPath() {\n        $('.urlPathHolder .shower a').on(\"click\", (ev) => {\n            ev.preventDefault();\n            $('.urlPathHolder .shower').addClass('hidden');\n            $('.urlPathHolder .holder').removeClass('hidden');\n        });\n    }\n\n    private initSingleMotionMode() {\n        $(\"#singleMotionMode\").on(\"change\", function () {\n            if ($(this).prop(\"checked\")) {\n                $(\"#forceMotionRow\").removeClass(\"hidden\");\n            } else {\n                $(\"#forceMotionRow\").addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initAdminMayEdit() {\n        let $adminsMayEdit = $(\"#adminsMayEdit\"),\n            $iniatorsMayEdit = $(\"#iniatorsMayEdit\").parents(\"label\").first().parent();\n        $adminsMayEdit.on(\"change\", function () {\n            if ($(this).prop(\"checked\")) {\n                $iniatorsMayEdit.removeClass(\"hidden\");\n            } else {\n                let confirmMessage = __t(\"admin\", \"adminMayEditConfirm\");\n                bootbox.confirm(confirmMessage, function (result) {\n                    if (result) {\n                        $iniatorsMayEdit.addClass(\"hidden\");\n                        $iniatorsMayEdit.find(\"input\").prop(\"checked\", false);\n                    } else {\n                        $adminsMayEdit.prop(\"checked\", true);\n                    }\n                });\n            }\n        });\n        if (!$adminsMayEdit.prop(\"checked\")) $iniatorsMayEdit.addClass(\"hidden\");\n    }\n\n    private initTags() {\n        const $form = this.$form.find('#tagsEditForm');\n        const $tagRowTemplate= $form.find(\".newTagRowTemplate\").remove();\n\n        let activeTagType = 0;\n\n        $form.find('.tagTypeSelector input').on('change', () => {\n            const $selected = $form.find('.tagTypeSelector input:checked');\n            activeTagType = $selected.val() as number;\n\n            $form.find('.editList').addClass('hidden');\n            $form.find('.editList' + activeTagType).removeClass('hidden');\n        }).trigger('change');\n\n        document.querySelectorAll('#tagsEditForm .editList').forEach((tagList: HTMLElement) => {\n            Sortable.create(tagList, {\n                handle: '.drag-handle',\n                animation: 150\n            });\n        });\n\n        $form.find('.adderRow button').on('click', () => {\n            const $newRow = $tagRowTemplate.clone();\n            $newRow.find('.tagTypeInput').val(activeTagType);\n            $form.find('.editList' + activeTagType).append($newRow);\n            window.setTimeout(() => {\n                $newRow.find(\"input\").trigger('focus');\n            }, 100);\n        });\n\n        $form.on('click', '.editList .remover', function(ev) {\n            let $li = $(this).parents(\"li\").first();\n            ev.preventDefault();\n\n            if ($li.data('has-imotions')) {\n                bootbox.confirm($form.data('delete-warnings'), function (result) {\n                    if (result) {\n                        $li.remove();\n                    }\n                });\n            } else {\n                $li.remove();\n            }\n        });\n    }\n\n    private initConPwd() {\n        const widget = this.element.querySelector('.conpw');\n        if (!widget) {\n            return;\n        }\n        const checkbox = widget.querySelector('.setter input[type=checkbox]') as HTMLInputElement;\n        const onCheckboxChange = () => {\n            if (checkbox.checked) {\n                widget.classList.add(\"checked\");\n            } else {\n                widget.classList.remove(\"checked\");\n            }\n        };\n        checkbox.addEventListener('change', onCheckboxChange);\n        onCheckboxChange();\n\n        widget.querySelector('.setNewPassword').addEventListener('click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            widget.classList.add('changePwd');\n        });\n    }\n}\n"]}
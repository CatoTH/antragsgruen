{"version":3,"sources":["backend/UserAdminCreate.js","backend/UserAdminCreate.ts"],"names":["define","require","exports","Object","defineProperty","value","UserAdminCreate","constructor","$el","this","element","initAddMultiple","initAddSingleInit","initAddSingleShow","querySelectorAll","forEach","openerEl","addEventListener","ev","type","currentTarget","getAttribute","el","classList","add","querySelector","remove","formEl","checkMultipleSubmit","bind","samlLoginBtn","emailLoginBtn","hasEmailText","contains","text","indexOf","bootbox","alert","__t","preventDefault","emails","split","names","length","form","typeSelect","inputEmail","inputUsername","required","stopPropagation","postData","_csrf","document","username","$","post","action","data","showAddSingleShowFromResponse","catch","err","responseText","response","alreadyMember","setAttribute","window","setTimeout","focus","autoGeneratePassword","sendEmail","emailText","passwordInput","onAutoGeneratePasswordChanged","checked","removeAttribute","onSendEmailChanged"],"mappings":"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","file":"UserAdminCreate.js","sourcesContent":[null,"export class UserAdminCreate {\n    private element: HTMLElement;\n\n    constructor(private $el: JQuery) {\n        this.element = $el[0] as HTMLElement;\n\n        this.initAddMultiple();\n        this.initAddSingleInit();\n        this.initAddSingleShow();\n    }\n\n    private initAddMultiple() {\n        this.element.querySelectorAll(\".addMultipleOpener .addUsersOpener\").forEach(openerEl => {\n            openerEl.addEventListener('click', ev => {\n                const type = (ev.currentTarget as HTMLButtonElement).getAttribute('data-type');\n                this.element.querySelectorAll('.addUsersByLogin').forEach(el => {\n                    el.classList.add('hidden');\n                });\n                this.element.querySelector('.addUsersByLogin.' + type).classList.remove('hidden');\n            });\n        });\n\n        this.element.querySelectorAll('.addUsersByLogin.multiuser').forEach(formEl => {\n            formEl.addEventListener('submit', this.checkMultipleSubmit.bind(this));\n        });\n    }\n\n    private checkMultipleSubmit(ev: Event) {\n        const samlLoginBtn = this.element.querySelector(\".addUsersByLogin.samlWW\");\n        const emailLoginBtn = this.element.querySelector(\".addUsersByLogin.email\");\n        const hasEmailText = !!this.element.querySelector('#emailText'); // If e-mail-sending is deactivated, this will be false\n\n        if (emailLoginBtn && !emailLoginBtn.classList.contains('hidden')) {\n            if (hasEmailText) {\n                const text = (this.element.querySelector('#emailText') as HTMLTextAreaElement).value;\n                if (text.indexOf(\"%ACCOUNT%\") === -1) {\n                    bootbox.alert(__t(\"admin\", \"emailMissingCode\"));\n                    ev.preventDefault();\n                    return;\n                }\n                if (text.indexOf(\"%LINK%\") === -1) {\n                    bootbox.alert(__t(\"admin\", \"emailMissingLink\"));\n                    ev.preventDefault();\n                    return;\n                }\n            }\n\n            let emails = (this.element.querySelector(\"#emailAddresses\") as HTMLTextAreaElement).value.split(\"\\n\"),\n                names = (this.element.querySelector(\"#names\") as HTMLTextAreaElement).value.split(\"\\n\");\n            if (emails.length == 1 && emails[0] == \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingTo\"));\n            }\n            if (emails.length != names.length) {\n                bootbox.alert(__t(\"admin\", \"emailNumberMismatch\"));\n                ev.preventDefault();\n            }\n        }\n        if (samlLoginBtn && !samlLoginBtn.classList.contains('hidden')) {\n            if ((this.element.querySelector(\"#samlWW\") as HTMLInputElement).value === \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingUsername\"));\n            }\n        }\n    }\n\n    private initAddSingleInit() {\n        const form = this.element.querySelector('.addSingleInit') as HTMLFormElement,\n            typeSelect = this.element.querySelector('.adminTypeSelect') as HTMLSelectElement,\n            inputEmail = this.element.querySelector('.inputEmail') as HTMLInputElement,\n            inputUsername = this.element.querySelector('.inputUsername') as HTMLInputElement;\n\n        typeSelect.addEventListener('change', () => {\n            if (typeSelect.value === 'email') {\n                inputEmail.classList.remove('hidden');\n                inputUsername.classList.add('hidden');\n                inputEmail.required = true;\n                inputUsername.required = false;\n            }\n            if (typeSelect.value === 'gruenesnetz') {\n                inputEmail.classList.add('hidden');\n                inputUsername.classList.remove('hidden');\n                inputEmail.required = false;\n                inputUsername.required = true;\n            }\n        });\n\n        form.addEventListener('submit', (ev: Event) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const postData = {\n                _csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                type: typeSelect.value,\n                username: ''\n            }\n            if (typeSelect.value === 'email') {\n                postData.username = inputEmail.value;\n            }\n            if (typeSelect.value === 'gruenesnetz') {\n                postData.username = inputUsername.value;\n            }\n\n            if (!postData.username) {\n                return;\n            }\n\n            $.post(form.action, postData, (data) => {\n                this.showAddSingleShowFromResponse(data);\n            }).catch(function (err) {\n                alert(err.responseText);\n            });\n        });\n    }\n\n    /**\n     * Functions that are to be called when showing the form\n     */\n    private showAddSingleShowFromResponse(response)\n    {\n        const alreadyMember = this.element.querySelector('.alreadyMember') as HTMLDivElement;\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement;\n\n        if (response['exists'] && response['already_member']) {\n            alreadyMember.classList.remove('hidden');\n            form.classList.add('hidden');\n            return;\n        }\n\n        form.classList.remove('hidden');\n        alreadyMember.classList.add('hidden');\n\n        if (response['exists']) {\n            form.querySelectorAll('.showIfNew').forEach(el => {\n                el.classList.add('hidden');\n            });\n        } else {\n            form.querySelectorAll('.showIfExists').forEach(el => {\n                el.classList.add('hidden');\n            });\n            (form.querySelector('#addSingleNameGiven') as HTMLInputElement).setAttribute('required', '');\n            (form.querySelector('#addSingleNameFamily') as HTMLInputElement).setAttribute('required', '');\n            (form.querySelector('#addSingleOrganization') as HTMLInputElement).setAttribute('required', '');\n\n            window.setTimeout(() => {\n                (form.querySelector('input[name=nameGiven]') as HTMLInputElement).focus();\n            }, 1);\n        }\n    }\n\n    private initAddSingleShow()\n    {\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement,\n            autoGeneratePassword = form.querySelector('#addSingleGeneratePassword') as HTMLInputElement,\n            sendEmail = form.querySelector('#addSingleSendEmail') as HTMLInputElement,\n            emailText = form.querySelector('#addSingleEmailText') as HTMLTextAreaElement,\n            passwordInput = form.querySelector('#addUserPassword') as HTMLInputElement;\n\n        const onAutoGeneratePasswordChanged = () => {\n            if (autoGeneratePassword.checked) {\n                passwordInput.classList.add('hidden');\n                passwordInput.removeAttribute('required');\n            } else {\n                passwordInput.classList.remove('hidden');\n                passwordInput.setAttribute('required', '');\n            }\n        };\n        autoGeneratePassword.addEventListener('change', onAutoGeneratePasswordChanged);\n        onAutoGeneratePasswordChanged();\n\n        const onSendEmailChanged = () => {\n            if (sendEmail.checked) {\n                emailText.classList.remove('hidden');\n            } else {\n                emailText.classList.add('hidden');\n            }\n        };\n        sendEmail.addEventListener('change', onSendEmailChanged);\n        onSendEmailChanged();\n    }\n}\n"]}
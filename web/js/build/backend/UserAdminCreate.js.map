{"version":3,"sources":["backend/UserAdminCreate.js","backend/UserAdminCreate.ts"],"names":["define","require","exports","Object","defineProperty","value","UserAdminCreate","constructor","$el","this","element","initAddMultiple","initAddSingleInit","initAddSingleShow","querySelectorAll","forEach","openerEl","addEventListener","ev","type","currentTarget","getAttribute","el","classList","add","querySelector","remove","formEl","checkMultipleSubmit","bind","validateEmailText","text","indexOf","bootbox","alert","__t","samlLoginBtn","emailLoginBtn","hasEmailText","contains","preventDefault","emails","split","names","length","form","typeSelect","inputEmail","inputUsername","welcomeEmailHolder","required","stopPropagation","postData","_csrf","document","username","$","post","action","data","showAddSingleShowFromResponse","catch","err","responseText","response","authType","authUsername","alreadyMember","initOrganisationToUserGroup","setAttribute","window","setTimeout","focus","defaultOrganisations","lastGroupAssignmentWasAutomatical","input","checked","push","parseInt","$addSelect","orgaList","JSON","parse","selectize","create","render","option_create","escape","on","autoUserGroups","orga","val","autoGeneratePassword","sendEmail","emailText","passwordInput","onAutoGeneratePasswordChanged","removeAttribute","onSendEmailChanged"],"mappings":"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","file":"UserAdminCreate.js","sourcesContent":[null,"export class UserAdminCreate {\n    private element: HTMLElement;\n\n    constructor(private $el: JQuery) {\n        this.element = $el[0] as HTMLElement;\n\n        this.initAddMultiple();\n        this.initAddSingleInit();\n        this.initAddSingleShow();\n    }\n\n    private initAddMultiple() {\n        this.element.querySelectorAll(\".addMultipleOpener .addUsersOpener\").forEach(openerEl => {\n            openerEl.addEventListener('click', ev => {\n                const type = (ev.currentTarget as HTMLButtonElement).getAttribute('data-type');\n                this.element.querySelectorAll('.addUsersByLogin').forEach(el => {\n                    el.classList.add('hidden');\n                });\n                this.element.querySelector('.addUsersByLogin.' + type).classList.remove('hidden');\n            });\n        });\n\n        this.element.querySelectorAll('.addUsersByLogin.multiuser').forEach(formEl => {\n            formEl.addEventListener('submit', this.checkMultipleSubmit.bind(this));\n        });\n    }\n\n    private validateEmailText(text: string): boolean\n    {\n        if (text.indexOf(\"%ACCOUNT%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingCode\"));\n            return false;\n        }\n        if (text.indexOf(\"%LINK%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingLink\"));\n            return false;\n        }\n        return true;\n    }\n\n    private checkMultipleSubmit(ev: Event) {\n        const samlLoginBtn = this.element.querySelector(\".addUsersByLogin.samlWW\");\n        const emailLoginBtn = this.element.querySelector(\".addUsersByLogin.email\");\n        const hasEmailText = !!this.element.querySelector('#emailText'); // If e-mail-sending is deactivated, this will be false\n\n        if (emailLoginBtn && !emailLoginBtn.classList.contains('hidden')) {\n            if (hasEmailText) {\n                const text = (this.element.querySelector('#emailText') as HTMLTextAreaElement).value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n\n            let emails = (this.element.querySelector(\"#emailAddresses\") as HTMLTextAreaElement).value.split(\"\\n\"),\n                names = (this.element.querySelector(\"#names\") as HTMLTextAreaElement).value.split(\"\\n\");\n            if (emails.length == 1 && emails[0] == \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingTo\"));\n            }\n            if (emails.length != names.length) {\n                bootbox.alert(__t(\"admin\", \"emailNumberMismatch\"));\n                ev.preventDefault();\n            }\n        }\n        if (samlLoginBtn && !samlLoginBtn.classList.contains('hidden')) {\n            if ((this.element.querySelector(\"#samlWW\") as HTMLInputElement).value === \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingUsername\"));\n            }\n        }\n    }\n\n    private initAddSingleInit() {\n        const form = this.element.querySelector('.addSingleInit') as HTMLFormElement,\n            typeSelect = this.element.querySelector('.adminTypeSelect') as HTMLSelectElement,\n            inputEmail = this.element.querySelector('.inputEmail') as HTMLInputElement,\n            inputUsername = this.element.querySelector('.inputUsername') as HTMLInputElement,\n            welcomeEmailHolder = this.element.querySelector('.welcomeEmail') as HTMLDivElement|null;\n\n        typeSelect.addEventListener('change', () => {\n            if (typeSelect.value === 'email') {\n                inputEmail.classList.remove('hidden');\n                inputUsername.classList.add('hidden');\n                inputEmail.required = true;\n                inputUsername.required = false;\n                if (welcomeEmailHolder) {\n                    welcomeEmailHolder.classList.remove('hidden');\n                }\n            } else {\n                if (welcomeEmailHolder) {\n                    welcomeEmailHolder.classList.add('hidden');\n                }\n\n                inputEmail.classList.add('hidden');\n                inputUsername.classList.remove('hidden');\n                inputEmail.required = false;\n                inputUsername.required = true;\n            }\n        });\n\n        form.addEventListener('submit', (ev: Event) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const postData = {\n                _csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                type: typeSelect.value,\n                username: ''\n            }\n            if (typeSelect.value === 'email') {\n                postData.username = inputEmail.value;\n            } else {\n                postData.username = inputUsername.value;\n            }\n\n            if (!postData.username) {\n                return;\n            }\n\n            $.post(form.action, postData, (data) => {\n                this.showAddSingleShowFromResponse(data, postData.type, postData.username);\n            }).catch(function (err) {\n                alert(err.responseText);\n            });\n        });\n    }\n\n    /**\n     * Functions that are to be called when showing the form\n     */\n    private showAddSingleShowFromResponse(response, authType: string, authUsername: string)\n    {\n        const alreadyMember = this.element.querySelector('.alreadyMember') as HTMLDivElement;\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement;\n\n        if (response['exists'] && response['already_member']) {\n            alreadyMember.classList.remove('hidden');\n            form.classList.add('hidden');\n            return;\n        }\n\n        form.classList.remove('hidden');\n        alreadyMember.classList.add('hidden');\n\n        (this.element.querySelector('input[name=authType]') as HTMLInputElement).value = authType;\n        (this.element.querySelector('input[name=authUsername]') as HTMLInputElement).value = authUsername;\n\n        if (this.element.querySelector('#addSelectOrganization')) {\n            this.initOrganisationToUserGroup();\n        }\n\n        if (response['exists']) {\n            form.querySelectorAll('.showIfNew').forEach(el => {\n                el.classList.add('hidden');\n            });\n        } else {\n            form.querySelectorAll('.showIfExists').forEach(el => {\n                el.classList.add('hidden');\n            });\n            (form.querySelector('#addSingleNameGiven') as HTMLInputElement).setAttribute('required', '');\n            (form.querySelector('#addSingleNameFamily') as HTMLInputElement).setAttribute('required', '');\n\n            window.setTimeout(() => {\n                (form.querySelector('input[name=nameGiven]') as HTMLInputElement).focus();\n            }, 1);\n        }\n    }\n\n    private initOrganisationToUserGroup()\n    {\n        const defaultOrganisations = [];\n        let lastGroupAssignmentWasAutomatical = true;\n        this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n            if (input.checked) defaultOrganisations.push(parseInt(input.value, 10));\n            input.addEventListener('change', () => lastGroupAssignmentWasAutomatical = false);\n        });\n\n        const $addSelect: any = $(\"#addSelectOrganization\"),\n            orgaList = JSON.parse(this.element.getAttribute('data-organisations')) as object[];\n        $addSelect.selectize({\n            create: true,\n            render: {\n                option_create: (data, escape) => {\n                    return '<div class=\"create\"><strong>' + escape(data.input) + '</strong></div>';\n                }\n            }\n        });\n        $addSelect.on(\"change\", () => {\n            let autoUserGroups = [];\n            orgaList.forEach(orga => {\n                if (orga['name'] === $addSelect.val()) {\n                    autoUserGroups = orga['autoUserGroups'];\n                }\n            });\n\n            // If it's an organisation with groups set, then set those groups.\n            // If no groups are assigned to this organisation, then reset the organisation IF no manual change has been made\n            if (autoUserGroups.length > 0) {\n                this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n                    input.checked = autoUserGroups.indexOf(parseInt(input.value, 10)) > -1;\n                });\n                lastGroupAssignmentWasAutomatical = true;\n            } else if (lastGroupAssignmentWasAutomatical) {\n                this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n                    input.checked = defaultOrganisations.indexOf(parseInt(input.value, 10)) > -1;\n                });\n            }\n        });\n    }\n\n    private initAddSingleShow()\n    {\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement,\n            autoGeneratePassword = form.querySelector('#addSingleGeneratePassword') as HTMLInputElement,\n            sendEmail = form.querySelector('#addSingleSendEmail') as HTMLInputElement,\n            emailText = form.querySelector('#addSingleEmailText') as HTMLTextAreaElement,\n            passwordInput = form.querySelector('#addUserPassword') as HTMLInputElement;\n\n        const onAutoGeneratePasswordChanged = () => {\n            if (autoGeneratePassword.checked) {\n                passwordInput.classList.add('hidden');\n                passwordInput.removeAttribute('required');\n            } else {\n                passwordInput.classList.remove('hidden');\n                passwordInput.setAttribute('required', '');\n            }\n        };\n        autoGeneratePassword.addEventListener('change', onAutoGeneratePasswordChanged);\n        onAutoGeneratePasswordChanged();\n\n        const onSendEmailChanged = () => {\n            if (sendEmail.checked) {\n                emailText.classList.remove('hidden');\n            } else {\n                emailText.classList.add('hidden');\n            }\n        };\n        sendEmail.addEventListener('change', onSendEmailChanged);\n        onSendEmailChanged();\n\n        form.addEventListener('submit', ev => {\n            if (sendEmail) {\n                const text = emailText.value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n        });\n    }\n}\n"]}
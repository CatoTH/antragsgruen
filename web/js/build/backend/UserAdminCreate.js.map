{"version":3,"sources":["backend/UserAdminCreate.js","backend/UserAdminCreate.ts"],"names":["define","require","exports","Object","defineProperty","value","UserAdminCreate","constructor","$el","this","element","initAddMultiple","initAddSingleInit","initAddSingleShow","querySelectorAll","forEach","openerEl","addEventListener","ev","type","currentTarget","getAttribute","el","classList","add","querySelector","remove","formEl","checkMultipleSubmit","bind","validateEmailText","text","indexOf","bootbox","alert","__t","samlLoginBtn","emailLoginBtn","hasEmailText","contains","preventDefault","emails","split","names","length","form","typeSelect","inputEmail","inputUsername","required","stopPropagation","postData","_csrf","document","username","$","post","action","data","showAddSingleShowFromResponse","catch","err","responseText","response","authType","authUsername","alreadyMember","setAttribute","window","setTimeout","focus","autoGeneratePassword","sendEmail","emailText","passwordInput","onAutoGeneratePasswordChanged","checked","removeAttribute","onSendEmailChanged"],"mappings":"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","file":"UserAdminCreate.js","sourcesContent":[null,"export class UserAdminCreate {\n    private element: HTMLElement;\n\n    constructor(private $el: JQuery) {\n        this.element = $el[0] as HTMLElement;\n\n        this.initAddMultiple();\n        this.initAddSingleInit();\n        this.initAddSingleShow();\n    }\n\n    private initAddMultiple() {\n        this.element.querySelectorAll(\".addMultipleOpener .addUsersOpener\").forEach(openerEl => {\n            openerEl.addEventListener('click', ev => {\n                const type = (ev.currentTarget as HTMLButtonElement).getAttribute('data-type');\n                this.element.querySelectorAll('.addUsersByLogin').forEach(el => {\n                    el.classList.add('hidden');\n                });\n                this.element.querySelector('.addUsersByLogin.' + type).classList.remove('hidden');\n            });\n        });\n\n        this.element.querySelectorAll('.addUsersByLogin.multiuser').forEach(formEl => {\n            formEl.addEventListener('submit', this.checkMultipleSubmit.bind(this));\n        });\n    }\n\n    private validateEmailText(text: string): boolean\n    {\n        if (text.indexOf(\"%ACCOUNT%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingCode\"));\n            return false;\n        }\n        if (text.indexOf(\"%LINK%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingLink\"));\n            return false;\n        }\n        return true;\n    }\n\n    private checkMultipleSubmit(ev: Event) {\n        const samlLoginBtn = this.element.querySelector(\".addUsersByLogin.samlWW\");\n        const emailLoginBtn = this.element.querySelector(\".addUsersByLogin.email\");\n        const hasEmailText = !!this.element.querySelector('#emailText'); // If e-mail-sending is deactivated, this will be false\n\n        if (emailLoginBtn && !emailLoginBtn.classList.contains('hidden')) {\n            if (hasEmailText) {\n                const text = (this.element.querySelector('#emailText') as HTMLTextAreaElement).value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n\n            let emails = (this.element.querySelector(\"#emailAddresses\") as HTMLTextAreaElement).value.split(\"\\n\"),\n                names = (this.element.querySelector(\"#names\") as HTMLTextAreaElement).value.split(\"\\n\");\n            if (emails.length == 1 && emails[0] == \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingTo\"));\n            }\n            if (emails.length != names.length) {\n                bootbox.alert(__t(\"admin\", \"emailNumberMismatch\"));\n                ev.preventDefault();\n            }\n        }\n        if (samlLoginBtn && !samlLoginBtn.classList.contains('hidden')) {\n            if ((this.element.querySelector(\"#samlWW\") as HTMLInputElement).value === \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingUsername\"));\n            }\n        }\n    }\n\n    private initAddSingleInit() {\n        const form = this.element.querySelector('.addSingleInit') as HTMLFormElement,\n            typeSelect = this.element.querySelector('.adminTypeSelect') as HTMLSelectElement,\n            inputEmail = this.element.querySelector('.inputEmail') as HTMLInputElement,\n            inputUsername = this.element.querySelector('.inputUsername') as HTMLInputElement;\n\n        typeSelect.addEventListener('change', () => {\n            if (typeSelect.value === 'email') {\n                inputEmail.classList.remove('hidden');\n                inputUsername.classList.add('hidden');\n                inputEmail.required = true;\n                inputUsername.required = false;\n            }\n            if (typeSelect.value === 'gruenesnetz') {\n                inputEmail.classList.add('hidden');\n                inputUsername.classList.remove('hidden');\n                inputEmail.required = false;\n                inputUsername.required = true;\n            }\n        });\n\n        form.addEventListener('submit', (ev: Event) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const postData = {\n                _csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                type: typeSelect.value,\n                username: ''\n            }\n            if (typeSelect.value === 'email') {\n                postData.username = inputEmail.value;\n            }\n            if (typeSelect.value === 'gruenesnetz') {\n                postData.username = inputUsername.value;\n            }\n\n            if (!postData.username) {\n                return;\n            }\n\n            $.post(form.action, postData, (data) => {\n                this.showAddSingleShowFromResponse(data, postData.type, postData.username);\n            }).catch(function (err) {\n                alert(err.responseText);\n            });\n        });\n    }\n\n    /**\n     * Functions that are to be called when showing the form\n     */\n    private showAddSingleShowFromResponse(response, authType: string, authUsername: string)\n    {\n        const alreadyMember = this.element.querySelector('.alreadyMember') as HTMLDivElement;\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement;\n\n        if (response['exists'] && response['already_member']) {\n            alreadyMember.classList.remove('hidden');\n            form.classList.add('hidden');\n            return;\n        }\n\n        form.classList.remove('hidden');\n        alreadyMember.classList.add('hidden');\n\n        (this.element.querySelector('input[name=authType]') as HTMLInputElement).value = authType;\n        (this.element.querySelector('input[name=authUsername]') as HTMLInputElement).value = authUsername;\n\n        if (response['exists']) {\n            form.querySelectorAll('.showIfNew').forEach(el => {\n                el.classList.add('hidden');\n            });\n        } else {\n            form.querySelectorAll('.showIfExists').forEach(el => {\n                el.classList.add('hidden');\n            });\n            (form.querySelector('#addSingleNameGiven') as HTMLInputElement).setAttribute('required', '');\n            (form.querySelector('#addSingleNameFamily') as HTMLInputElement).setAttribute('required', '');\n\n            window.setTimeout(() => {\n                (form.querySelector('input[name=nameGiven]') as HTMLInputElement).focus();\n            }, 1);\n        }\n    }\n\n    private initAddSingleShow()\n    {\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement,\n            autoGeneratePassword = form.querySelector('#addSingleGeneratePassword') as HTMLInputElement,\n            sendEmail = form.querySelector('#addSingleSendEmail') as HTMLInputElement,\n            emailText = form.querySelector('#addSingleEmailText') as HTMLTextAreaElement,\n            passwordInput = form.querySelector('#addUserPassword') as HTMLInputElement;\n\n        const onAutoGeneratePasswordChanged = () => {\n            if (autoGeneratePassword.checked) {\n                passwordInput.classList.add('hidden');\n                passwordInput.removeAttribute('required');\n            } else {\n                passwordInput.classList.remove('hidden');\n                passwordInput.setAttribute('required', '');\n            }\n        };\n        autoGeneratePassword.addEventListener('change', onAutoGeneratePasswordChanged);\n        onAutoGeneratePasswordChanged();\n\n        const onSendEmailChanged = () => {\n            if (sendEmail.checked) {\n                emailText.classList.remove('hidden');\n            } else {\n                emailText.classList.add('hidden');\n            }\n        };\n        sendEmail.addEventListener('change', onSendEmailChanged);\n        onSendEmailChanged();\n\n        form.addEventListener('submit', ev => {\n            if (sendEmail) {\n                const text = emailText.value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n        });\n    }\n}\n"]}
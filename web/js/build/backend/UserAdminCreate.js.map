{"version":3,"sources":["backend/UserAdminCreate.js","backend/UserAdminCreate.ts"],"names":["define","require","exports","Object","defineProperty","value","UserAdminCreate","constructor","$el","this","lastGroupAssignmentWasAutomatical","element","initAddMultiple","initAddSingleInit","initAddSingleShow","querySelectorAll","forEach","openerEl","addEventListener","ev","type","currentTarget","getAttribute","el","classList","add","querySelector","remove","formEl","checkMultipleSubmit","bind","validateEmailText","text","indexOf","bootbox","alert","__t","samlLoginBtn","emailLoginBtn","hasEmailText","contains","preventDefault","emails","split","names","length","form","typeSelect","inputEmail","inputUsername","welcomeEmailHolder","required","stopPropagation","postData","_csrf","document","username","$","post","action","data","showAddSingleShowFromResponse","catch","err","responseText","response","authType","authUsername","alreadyMember","exists","organization","initOrganizationToUserGroup","removeAttribute","setAttribute","window","setTimeout","focus","setAutoOrganizations","selectedOrganization","autoUserGroups","organizationList","orga","name","input","checked","parseInt","defaultOrganisations","fixedOrganization","push","JSON","parse","$addSelect","selectize","create","render","option_create","escape","on","val","autoGeneratePassword","sendEmail","emailText","passwordInput","onAutoGeneratePasswordChanged","onSendEmailChanged"],"mappings":"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","file":"UserAdminCreate.js","sourcesContent":[null,"type OrganizationEntry = {\n    name: string;\n    autoUserGroups: number[];\n}\n\ntype QueryUserResponse = {\n    exists: boolean;\n    alreadyMember?: boolean;\n    organization?: string;\n}\n\nexport class UserAdminCreate {\n    private element: HTMLElement;\n\n    constructor(private $el: JQuery) {\n        this.element = $el[0] as HTMLElement;\n\n        this.initAddMultiple();\n        this.initAddSingleInit();\n        this.initAddSingleShow();\n    }\n\n    private initAddMultiple() {\n        this.element.querySelectorAll(\".addMultipleOpener .addUsersOpener\").forEach(openerEl => {\n            openerEl.addEventListener('click', ev => {\n                const type = (ev.currentTarget as HTMLButtonElement).getAttribute('data-type');\n                this.element.querySelectorAll('.addUsersByLogin').forEach(el => {\n                    el.classList.add('hidden');\n                });\n                this.element.querySelector('.addUsersByLogin.' + type).classList.remove('hidden');\n            });\n        });\n\n        this.element.querySelectorAll('.addUsersByLogin.multiuser').forEach(formEl => {\n            formEl.addEventListener('submit', this.checkMultipleSubmit.bind(this));\n        });\n    }\n\n    private validateEmailText(text: string): boolean\n    {\n        if (text.indexOf(\"%ACCOUNT%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingCode\"));\n            return false;\n        }\n        if (text.indexOf(\"%LINK%\") === -1) {\n            bootbox.alert(__t(\"admin\", \"emailMissingLink\"));\n            return false;\n        }\n        return true;\n    }\n\n    private checkMultipleSubmit(ev: Event) {\n        const samlLoginBtn = this.element.querySelector(\".addUsersByLogin.samlWW\");\n        const emailLoginBtn = this.element.querySelector(\".addUsersByLogin.email\");\n        const hasEmailText = !!this.element.querySelector('#emailText'); // If e-mail-sending is deactivated, this will be false\n\n        if (emailLoginBtn && !emailLoginBtn.classList.contains('hidden')) {\n            if (hasEmailText) {\n                const text = (this.element.querySelector('#emailText') as HTMLTextAreaElement).value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n\n            let emails = (this.element.querySelector(\"#emailAddresses\") as HTMLTextAreaElement).value.split(\"\\n\"),\n                names = (this.element.querySelector(\"#names\") as HTMLTextAreaElement).value.split(\"\\n\");\n            if (emails.length == 1 && emails[0] == \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingTo\"));\n            }\n            if (emails.length != names.length) {\n                bootbox.alert(__t(\"admin\", \"emailNumberMismatch\"));\n                ev.preventDefault();\n            }\n        }\n        if (samlLoginBtn && !samlLoginBtn.classList.contains('hidden')) {\n            if ((this.element.querySelector(\"#samlWW\") as HTMLInputElement).value === \"\") {\n                ev.preventDefault();\n                bootbox.alert(__t(\"admin\", \"emailMissingUsername\"));\n            }\n        }\n    }\n\n    private initAddSingleInit() {\n        const form = this.element.querySelector('.addSingleInit') as HTMLFormElement,\n            typeSelect = this.element.querySelector('.adminTypeSelect') as HTMLSelectElement,\n            inputEmail = this.element.querySelector('.inputEmail') as HTMLInputElement,\n            inputUsername = this.element.querySelector('.inputUsername') as HTMLInputElement,\n            welcomeEmailHolder = this.element.querySelector('.welcomeEmail') as HTMLDivElement|null;\n\n        typeSelect.addEventListener('change', () => {\n            if (typeSelect.value === 'email') {\n                inputEmail.classList.remove('hidden');\n                inputUsername.classList.add('hidden');\n                inputEmail.required = true;\n                inputUsername.required = false;\n                if (welcomeEmailHolder) {\n                    welcomeEmailHolder.classList.remove('hidden');\n                }\n            } else {\n                if (welcomeEmailHolder) {\n                    welcomeEmailHolder.classList.add('hidden');\n                }\n\n                inputEmail.classList.add('hidden');\n                inputUsername.classList.remove('hidden');\n                inputEmail.required = false;\n                inputUsername.required = true;\n            }\n        });\n\n        form.addEventListener('submit', (ev: Event) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const postData = {\n                _csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                type: typeSelect.value,\n                username: ''\n            }\n            if (typeSelect.value === 'email') {\n                postData.username = inputEmail.value;\n            } else {\n                postData.username = inputUsername.value;\n            }\n\n            if (!postData.username) {\n                return;\n            }\n\n            $.post(form.action, postData, (data) => {\n                this.showAddSingleShowFromResponse(data, postData.type, postData.username);\n            }).catch(function (err) {\n                alert(err.responseText);\n            });\n        });\n    }\n\n    /**\n     * Functions that are to be called when showing the form\n     */\n    private showAddSingleShowFromResponse(response: QueryUserResponse, authType: string, authUsername: string)\n    {\n        const alreadyMember = this.element.querySelector('.alreadyMember') as HTMLDivElement;\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement;\n\n        if (response['exists'] && response['already_member']) {\n            alreadyMember.classList.remove('hidden');\n            form.classList.add('hidden');\n            return;\n        }\n\n        form.classList.remove('hidden');\n        alreadyMember.classList.add('hidden');\n\n        (this.element.querySelector('input[name=authType]') as HTMLInputElement).value = authType;\n        (this.element.querySelector('input[name=authUsername]') as HTMLInputElement).value = authUsername;\n\n        if (this.element.querySelector('#addSelectOrganization')) {\n            if (response.exists && response.organization) {\n                this.initOrganizationToUserGroup(response.organization);\n            } else {\n                this.initOrganizationToUserGroup(null);\n            }\n        }\n\n        if (response['exists']) {\n            form.querySelectorAll('.showIfNew').forEach(el => {\n                el.classList.add('hidden');\n            });\n\n            (form.querySelector('#addUserPassword') as HTMLInputElement).removeAttribute('required');\n        } else {\n            form.querySelectorAll('.showIfExists').forEach(el => {\n                el.classList.add('hidden');\n            });\n            (form.querySelector('#addSingleNameGiven') as HTMLInputElement).setAttribute('required', '');\n            (form.querySelector('#addSingleNameFamily') as HTMLInputElement).setAttribute('required', '');\n\n            window.setTimeout(() => {\n                (form.querySelector('input[name=nameGiven]') as HTMLInputElement).focus();\n            }, 1);\n        }\n    }\n\n    private organizationList: OrganizationEntry[];\n    private defaultOrganisations: number[];\n    private lastGroupAssignmentWasAutomatical: boolean = true;\n\n    private setAutoOrganizations(selectedOrganization: string): void\n    {\n        let autoUserGroups: number[] = [];\n        this.organizationList.forEach(orga => {\n            if (orga.name === selectedOrganization) {\n                autoUserGroups = orga.autoUserGroups;\n            }\n        });\n\n        // If it's an organisation with groups set, then set those groups.\n        // If no groups are assigned to this organisation, then reset the organisation IF no manual change has been made\n        if (autoUserGroups.length > 0) {\n            this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n                input.checked = autoUserGroups.indexOf(parseInt(input.value, 10)) > -1;\n            });\n            this.lastGroupAssignmentWasAutomatical = true;\n        } else if (this.lastGroupAssignmentWasAutomatical) {\n            this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n                input.checked = this.defaultOrganisations.indexOf(parseInt(input.value, 10)) > -1;\n            });\n        }\n    }\n\n    private initOrganizationToUserGroup(fixedOrganization: string|null)\n    {\n        this.defaultOrganisations = [];\n        this.element.querySelectorAll('input.userGroup').forEach((input: HTMLInputElement) => {\n            if (input.checked) this.defaultOrganisations.push(parseInt(input.value, 10));\n            input.addEventListener('change', () => this.lastGroupAssignmentWasAutomatical = false);\n        });\n        this.organizationList = JSON.parse(this.element.getAttribute('data-organisations')) as OrganizationEntry[];\n\n        if (fixedOrganization) {\n            this.setAutoOrganizations(fixedOrganization);\n        } else {\n            const $addSelect: any = $(\"#addSelectOrganization\");\n            $addSelect.selectize({\n                create: true,\n                render: {\n                    option_create: (data, escape) => {\n                        return '<div class=\"create\"><strong>' + escape(data.input) + '</strong></div>';\n                    }\n                }\n            });\n            $addSelect.on(\"change\", () => {\n                this.setAutoOrganizations($addSelect.val());\n            });\n        }\n    }\n\n    private initAddSingleShow()\n    {\n        const form = this.element.querySelector('.addUsersByLogin.singleuser') as HTMLFormElement,\n            autoGeneratePassword = form.querySelector('#addSingleGeneratePassword') as HTMLInputElement,\n            sendEmail = form.querySelector('#addSingleSendEmail') as HTMLInputElement,\n            emailText = form.querySelector('#addSingleEmailText') as HTMLTextAreaElement,\n            passwordInput = form.querySelector('#addUserPassword') as HTMLInputElement;\n\n        const onAutoGeneratePasswordChanged = () => {\n            if (autoGeneratePassword.checked) {\n                passwordInput.classList.add('hidden');\n                passwordInput.removeAttribute('required');\n            } else {\n                passwordInput.classList.remove('hidden');\n                passwordInput.setAttribute('required', '');\n            }\n        };\n        autoGeneratePassword.addEventListener('change', onAutoGeneratePasswordChanged);\n        onAutoGeneratePasswordChanged();\n\n        const onSendEmailChanged = () => {\n            if (sendEmail.checked) {\n                emailText.classList.remove('hidden');\n            } else {\n                emailText.classList.add('hidden');\n            }\n        };\n        sendEmail.addEventListener('change', onSendEmailChanged);\n        onSendEmailChanged();\n\n        form.addEventListener('submit', ev => {\n            if (sendEmail) {\n                const text = emailText.value;\n                if (!this.validateEmailText(text)) {\n                    ev.preventDefault();\n                    return;\n                }\n            }\n        });\n    }\n}\n"]}
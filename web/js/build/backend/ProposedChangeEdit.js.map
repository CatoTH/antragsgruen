{"version":3,"sources":["backend/ProposedChangeEdit.js","backend/ProposedChangeEdit.ts"],"names":["define","require","exports","AntragsgruenEditor_1","MotionMergeAmendments_1","Object","defineProperty","value","ProposedChangeEdit","constructor","$form","this","hasChanged","textEditCalled","initCollisionDetection","on","$","window","off","onLeavePage","each","i","el","$textarea","find","ckeditor","AntragsgruenEditor","attr","getEditor","parents","parent","val","getData","plugins","lite","findPlugin","acceptAll","onContentChanged","bind","ev","$text","currentTarget","setData","data","addClass","$collisionIndicator","lastCheckedContent","setInterval","sectionData","getTextConsolidatedSections","JSON","stringify","url","post","_csrf","sections","ret","removeClass","html","length","listHtml","forEach","$holder","sectionId","$cloned","clone","MotionMergeChangeActions","insertAccept","deleteAccept","__t","hasClass"],"mappings":"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","file":"ProposedChangeEdit.js","sourcesContent":[null,"import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport {MotionMergeChangeActions} from \"../frontend/MotionMergeAmendments\";\n\nexport class ProposedChangeEdit {\n    private hasChanged: boolean = false;\n    private $collisionIndicator: JQuery;\n\n    public constructor(private $form: JQuery) {\n        this.textEditCalled();\n        this.initCollisionDetection();\n\n        $form.on(\"submit\", () => {\n            $(window).off(\"beforeunload\", ProposedChangeEdit.onLeavePage);\n        });\n    }\n\n    private textEditCalled() {\n        $(\".wysiwyg-textarea:not(#sectionHolderEditorial)\").each((i, el) => {\n            let $holder = $(el),\n                $textarea = $holder.find(\".texteditor\");\n\n            let editor: AntragsgruenEditor = new AntragsgruenEditor($textarea.attr(\"id\")),\n                ckeditor: CKEDITOR.editor = editor.getEditor();\n\n            $textarea.parents(\"form\").on('submit', () => {\n                $textarea.parent().find(\"textarea.raw\").val(ckeditor.getData());\n                if (typeof(ckeditor.plugins.lite) != 'undefined') {\n                    ckeditor.plugins.lite.findPlugin(ckeditor).acceptAll();\n                    $textarea.parent().find(\"textarea.consolidated\").val(ckeditor.getData());\n                }\n            });\n\n            // The editor doesn't trigger change-events when tracking changes is enabled, therefore this work-around\n            $('#' + $textarea.attr('id')).on('keypress', this.onContentChanged.bind(this));\n        });\n\n        this.$form.find('.resetText').on('click', (ev) => {\n            let $text: JQuery = $(ev.currentTarget).parents('.wysiwyg-textarea').find('.texteditor');\n            window['CKEDITOR']['instances'][$text.attr('id')].setData($text.data('original-html'));\n\n            $(ev.currentTarget).parents('.modifiedActions').addClass('hidden');\n        });\n    }\n\n    private initCollisionDetection() {\n        if (!this.$form.data('collision-check-url')) {\n            // Motions do not support collision detection yet\n            return;\n        }\n\n        this.$collisionIndicator = this.$form.find('#collisionIndicator');\n        let lastCheckedContent = null;\n\n        window.setInterval(() => {\n            let sectionData = this.getTextConsolidatedSections();\n            if (JSON.stringify(sectionData) === lastCheckedContent) {\n                return;\n            }\n\n            lastCheckedContent = JSON.stringify(sectionData);\n            let url = this.$form.data('collision-check-url');\n            $.post(url, {\n                '_csrf': this.$form.find('> input[name=_csrf]').val(),\n                'sections': sectionData\n            }, (ret) => {\n                if (ret['error']) {\n                    this.$collisionIndicator.removeClass('hidden');\n                    this.$collisionIndicator.find('.collisionList').html('<li>' + ret['error'] + '</li>');\n                } else if (ret['collisions'].length == 0) {\n                    this.$collisionIndicator.addClass('hidden');\n                } else {\n                    this.$collisionIndicator.removeClass('hidden');\n                    let listHtml = '';\n                    ret['collisions'].forEach((el) => {\n                       listHtml += el['html'];\n                    });\n                    this.$collisionIndicator.find('.collisionList').html(listHtml);\n                }\n            });\n\n        }, 5000);\n    }\n\n    private getTextConsolidatedSections() {\n        let sections = {};\n        $('.proposedVersion .wysiwyg-textarea:not(#sectionHolderEditorial)').each((i, el) => {\n            let $holder = $(el),\n                $textarea = $holder.find('.texteditor'),\n                sectionId = $holder.parents('.proposedVersion').data('section-id');\n\n            let $cloned = $textarea.clone(false);\n            $cloned.find('.ice-ins').each((i, el) => {\n                MotionMergeChangeActions.insertAccept(el);\n            });\n            $cloned.find('.ice-del').each((i, el) => {\n                MotionMergeChangeActions.deleteAccept(el);\n            });\n\n            sections[sectionId] = $cloned.html();\n        });\n        return sections;\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    public onContentChanged() {\n        if (!this.hasChanged) {\n            this.hasChanged = true;\n            if (!$(\"body\").hasClass('testing')) {\n                $(window).on(\"beforeunload\", ProposedChangeEdit.onLeavePage);\n            }\n        }\n    }\n}\n"]}
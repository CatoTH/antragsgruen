{"version":3,"sources":["backend/ProposedChangeEdit.js","backend/ProposedChangeEdit.ts"],"names":["define","require","exports","AntragsgruenEditor_1","MotionMergeChangeActions_1","Object","defineProperty","value","ProposedChangeEdit","constructor","$form","this","hasChanged","textEditCalled","initCollisionDetection","on","$","window","off","onLeavePage","each","i","el","$textarea","find","ckeditor","AntragsgruenEditor","attr","getEditor","parents","parent","val","getData","plugins","lite","findPlugin","acceptAll","onContentChanged","bind","ev","$text","currentTarget","setData","data","addClass","$collisionIndicator","lastCheckedContent","setInterval","replace","removeClass","sectionData","getTextConsolidatedSections","JSON","stringify","url","post","_csrf","sections","ret","html","length","listHtml","forEach","$holder","sectionId","$cloned","clone","MotionMergeChangeActions","insertAccept","deleteAccept","__t","hasClass"],"mappings":"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","file":"ProposedChangeEdit.js","sourcesContent":[null,"import {AntragsgruenEditor} from \"../shared/AntragsgruenEditor\";\nimport {MotionMergeChangeActions} from \"../shared/MotionMergeChangeActions\";\n\nexport class ProposedChangeEdit {\n    private hasChanged: boolean = false;\n    private $collisionIndicator: JQuery;\n\n    public constructor(private $form: JQuery) {\n        this.textEditCalled();\n        this.initCollisionDetection();\n\n        $form.on(\"submit\", () => {\n            $(window).off(\"beforeunload\", ProposedChangeEdit.onLeavePage);\n        });\n    }\n\n    private textEditCalled() {\n        $(\".wysiwyg-textarea:not(#sectionHolderEditorial)\").each((i, el) => {\n            let $holder = $(el),\n                $textarea = $holder.find(\".texteditor\");\n\n            let editor: AntragsgruenEditor = new AntragsgruenEditor($textarea.attr(\"id\")),\n                ckeditor: CKEDITOR.editor = editor.getEditor();\n\n            $textarea.parents(\"form\").on('submit', () => {\n                $textarea.parent().find(\"textarea.raw\").val(ckeditor.getData());\n                if (typeof(ckeditor.plugins.lite) != 'undefined') {\n                    ckeditor.plugins.lite.findPlugin(ckeditor).acceptAll();\n                    $textarea.parent().find(\"textarea.consolidated\").val(ckeditor.getData());\n                }\n            });\n\n            // The editor doesn't trigger change-events when tracking changes is enabled, therefore this work-around\n            $('#' + $textarea.attr('id')).on('keypress', this.onContentChanged.bind(this));\n        });\n\n        this.$form.find('.resetText').on('click', (ev) => {\n            let $text: JQuery = $(ev.currentTarget).parents('.wysiwyg-textarea').find('.texteditor');\n            window['CKEDITOR']['instances'][$text.attr('id')].setData($text.data('original-html'));\n\n            $(ev.currentTarget).parents('.modifiedActions').addClass('hidden');\n        });\n    }\n\n    private initCollisionDetection() {\n        if (!this.$form.data('collision-check-url')) {\n            // Motions do not support collision detection yet\n            return;\n        }\n\n        this.$collisionIndicator = this.$form.find('#collisionIndicator');\n        let lastCheckedContent = null;\n\n        window.setInterval(() => {\n            this.$form.find('.wysiwyg-textarea').find('.texteditor').each(function () {\n                const $text = $(this),\n                    // WYSWYG-Editor adds some linebreaks, so let's just ignore them.\n                    currentText = window['CKEDITOR']['instances'][$text.attr('id')].getData().replace(/\\n/g, \"\"),\n                    originalText = $text.data('original-html').replace(/\\n/g, \"\", \"\");\n\n                if (currentText === originalText) {\n                    $text.parents('.wysiwyg-textarea').find('.modifiedActions').addClass('hidden');\n                } else {\n                    $text.parents('.wysiwyg-textarea').find('.modifiedActions').removeClass('hidden');\n                }\n            });\n\n            let sectionData = this.getTextConsolidatedSections();\n            if (JSON.stringify(sectionData) === lastCheckedContent) {\n                return;\n            }\n\n            lastCheckedContent = JSON.stringify(sectionData);\n            let url = this.$form.data('collision-check-url');\n            $.post(url, {\n                '_csrf': this.$form.find('> input[name=_csrf]').val(),\n                'sections': sectionData\n            }, (ret) => {\n                if (ret['error']) {\n                    this.$collisionIndicator.removeClass('hidden');\n                    this.$collisionIndicator.find('.collisionList').html('<li>' + ret['error'] + '</li>');\n                } else if (ret['collisions'].length == 0) {\n                    this.$collisionIndicator.addClass('hidden');\n                } else {\n                    this.$collisionIndicator.removeClass('hidden');\n                    let listHtml = '';\n                    ret['collisions'].forEach((el) => {\n                       listHtml += el['html'];\n                    });\n                    this.$collisionIndicator.find('.collisionList').html(listHtml);\n                }\n            });\n\n        }, 5000);\n    }\n\n    private getTextConsolidatedSections() {\n        let sections = {};\n        $('.proposedVersion .wysiwyg-textarea:not(#sectionHolderEditorial)').each((i, el) => {\n            let $holder = $(el),\n                $textarea = $holder.find('.texteditor'),\n                sectionId = $holder.parents('.proposedVersion').data('section-id');\n\n            let $cloned = $textarea.clone(false);\n            $cloned.find('.ice-ins').each((i, el) => {\n                MotionMergeChangeActions.insertAccept(el);\n            });\n            $cloned.find('.ice-del').each((i, el) => {\n                MotionMergeChangeActions.deleteAccept(el, false);\n            });\n\n            sections[sectionId] = $cloned.html();\n        });\n        return sections;\n    }\n\n    public static onLeavePage(): string {\n        return __t(\"std\", \"leave_changed_page\");\n    }\n\n    public onContentChanged() {\n        if (!this.hasChanged) {\n            this.hasChanged = true;\n            if (!$(\"body\").hasClass('testing')) {\n                $(window).on(\"beforeunload\", ProposedChangeEdit.onLeavePage);\n            }\n        }\n    }\n}\n"]}
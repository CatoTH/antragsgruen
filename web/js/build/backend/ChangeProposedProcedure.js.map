{"version":3,"sources":["backend/ChangeProposedProcedure.js","backend/ChangeProposedProcedure.ts"],"names":["define","require","exports","Object","defineProperty","value","ChangeProposedProcedure","constructor","$widget","this","savingComment","initElements","initOpener","initStatusSetter","initCommentForm","initVotingBlock","initExplanation","initTags","on","ev","preventDefault","setVotingBlockSettings","_a","$statusDetails","find","$visibilityInput","$votingStatusInput","$votingBlockId","$tagsSelect","$openerBtn","$","context","data","saveUrl","attr","csrf","val","version","isLatestVersion","classList","contains","isNewVersion","removeClass","addClass","localStorage","setItem","getItem","selectize","create","plugins","render","option_create","escape","__t","input","reinitAfterReload","statusChanged","commentsScrollBottom","trigger","setGlobalProposedStr","html","performCallWithReload","undefined","ajax","url","type","JSON","stringify","processData","contentType","dataType","headers","success","ret","window","location","href","$content","children","remove","append","setTimeout","alert","catch","err","parse","responseText","e","notifyProposer","text","fromName","replyTo","setPropserHasAccepted","confirm","bootbox","result","setProposerHasAccepted","saveStatus","newValStr","newVal","parseInt","setStatus","visible","prop","votingBlockId","votingItemBlockName","tags","items","length","filter","each","i","el","$select","toString","currentTarget","init","parents","bind","scrollintoview","top_offset","selectedName","initialization","target","$commentList","scrollTop","scrollHeight","doSaveComment","$commentWidget","writeComment","delHtml","comment","delLink","$comment","dateFormatted","username","id","proposalId","delComment","post","_csrf","add","originalEvent","first"],"mappings":"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","file":"ChangeProposedProcedure.js","sourcesContent":[null,"const STATUS_REFERRED = 10;\nconst STATUS_VOTE = 11;\nconst STATUS_OBSOLETED_BY_MOT = 32;\nconst STATUS_OBSOLETED_BY_AMEND = 22;\nconst STATUS_CUSTOM_STRING = 23;\nconst STATUS_PROPOSED_MOVE_TO_OTHER_MOTION = 28;\n\nexport class ChangeProposedProcedure {\n    private $openerBtn: JQuery;\n    private $statusDetails: JQuery;\n    private $visibilityInput: JQuery;\n    private $votingStatusInput: JQuery;\n    private $votingBlockId: JQuery;\n    private $tagsSelect: JQuery;\n    private saveUrl: string;\n    private context: string;\n    private version: number|null;\n    private csrf: string;\n    private savingComment: boolean = false;\n    private isLatestVersion: boolean;\n    private isNewVersion: boolean; // Not saved yet\n\n    constructor(private $widget: JQuery) {\n        this.initElements();\n        this.initOpener();\n        this.initStatusSetter();\n        this.initCommentForm();\n        this.initVotingBlock();\n        this.initExplanation();\n        this.initTags();\n        $widget.on(\"submit\", ev => ev.preventDefault());\n        this.setVotingBlockSettings();\n    }\n\n    private initElements() {\n        this.$statusDetails = this.$widget.find('.statusDetails');\n        this.$visibilityInput = this.$widget.find('input[name=proposalVisible]');\n        this.$votingStatusInput = this.$widget.find('input[name=votingStatus]');\n        this.$votingBlockId = this.$widget.find('select[name=votingBlockId]');\n        this.$tagsSelect = this.$widget.find('.proposalTagsSelect');\n        this.$openerBtn = $('.proposedChangesOpener button');\n        this.context = this.$widget.data('context');\n        this.saveUrl = this.$widget.attr('action');\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n        this.version = this.$widget.data('proposal-id') ?? null;\n        this.isLatestVersion = this.$widget[0].classList.contains('latestVersion');\n        this.isNewVersion = this.$widget[0].classList.contains('new');\n    }\n\n    private initOpener() {\n        this.$openerBtn.on('click', () => {\n            this.$widget.removeClass('hidden');\n            this.$openerBtn.addClass('hidden');\n            localStorage.setItem('proposed_procedure_enabled', '1');\n        });\n        this.$widget.on('click', '.closeBtn', () => {\n            this.$widget.addClass('hidden');\n            this.$openerBtn.removeClass('hidden');\n            localStorage.setItem('proposed_procedure_enabled', '0');\n        });\n\n        if (localStorage.getItem('proposed_procedure_enabled') === '1') {\n            this.$widget.removeClass('hidden');\n            this.$openerBtn.addClass('hidden');\n        } else {\n            this.$widget.addClass('hidden');\n        }\n    }\n\n    private initTags() {\n        const $tagsSelect: any = this.$tagsSelect;\n\n        $tagsSelect.selectize({\n            create: true,\n            plugins: [\"remove_button\"],\n            render: {\n                option_create: (data, escape) => {\n                    return '<div class=\"create\">' + __t('std', 'add_tag') + ': <strong>' + escape(data.input) + '</strong></div>';\n                }\n            }\n        });\n\n        $tagsSelect.on(\"change\", () => {\n            this.$widget.addClass('isChanged');\n        });\n    }\n\n    private reinitAfterReload() {\n        this.initElements();\n        this.statusChanged();\n        this.commentsScrollBottom();\n        this.initExplanation();\n        this.initTags();\n        this.$widget.find('.newBlock').addClass('hidden');\n        this.$widget.find('.notifyProposerSection').addClass('hidden');\n        this.$widget.find('#votingBlockId').trigger('change');\n    }\n\n    private setGlobalProposedStr(html: string) {\n        $(\".motionData .proposedStatusRow .str\").html(html);\n    }\n\n    private performCallWithReload(data: object) {\n        data['context'] = this.context;\n\n        if (data['version'] === undefined) {\n            data['version'] = this.version;\n        }\n\n        $.ajax({\n            url: this.saveUrl,\n            type: \"POST\",\n            data: JSON.stringify(data),\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            headers: {\"X-CSRF-Token\": this.csrf},\n            success: ret => {\n                if (ret['redirectToUrl']) {\n                    window.location.href = ret['redirectToUrl'];\n                } else if (ret['success']) {\n                    let $content = $(ret['html']);\n                    this.$widget.children().remove();\n                    this.$widget.append($content.children());\n                    this.$widget.data('proposal-id', $content.data('proposal-id'));\n                    this.reinitAfterReload();\n                    this.$widget.addClass('showSaved').removeClass('isChanged');\n                    if (ret['proposalStr']) {\n                        this.setGlobalProposedStr(ret['proposalStr']);\n                    }\n                    window.setTimeout(() => this.$widget.removeClass('showSaved'), 2000);\n                } else if (ret['message']) {\n                    alert(ret['message']);\n                } else {\n                    alert('An error occurred');\n                }\n            }\n        }).catch(function (err) {\n            try {\n                const ret = JSON.parse(err.responseText);\n                if (ret['message']) {\n                    alert(ret['message']);\n                } else {\n                    alert(err.responseText);\n                }\n            } catch (e) {\n                alert(err.responseText);\n            }\n        });\n    }\n\n    private notifyProposer() {\n        const text = this.$widget.find('textarea[name=proposalNotificationText]').val(),\n            fromName = this.$widget.find('input[name=proposalNotificationFrom]').val(),\n            replyTo = this.$widget.find('input[name=proposalNotificationReply]').val();\n        this.performCallWithReload({\n            'notifyProposer': true,\n            'text': text,\n            'fromName': fromName,\n            'replyTo': replyTo,\n        });\n    }\n\n    private setPropserHasAccepted() {\n        const confirm = this.$widget.find('.setConfirmation').data('msg');\n        bootbox.confirm(confirm, (result) => {\n            if (result) {\n                this.performCallWithReload({\n                    'setProposerHasAccepted': '1',\n                });\n            }\n        });\n    }\n\n    private saveStatus() {\n        const selectize = this.$tagsSelect[0] as any\n        let newValStr = this.$widget.find('.statusForm input[type=radio]:checked').val() as string|undefined;\n        let newVal = (newValStr === undefined ? null : parseInt(newValStr, 10));\n        let data = {\n            setStatus: newVal,\n            visible: this.$visibilityInput.prop('checked'),\n            votingBlockId: this.$votingBlockId.val(),\n            votingItemBlockName: this.$widget.find(\".votingItemBlockNameRow input\").val(),\n            tags: selectize.selectize.items,\n        };\n\n        if (newVal == STATUS_REFERRED) {\n            data['proposalComment'] = this.$widget.find('input[name=referredTo]').val();\n        }\n        if (newVal == STATUS_OBSOLETED_BY_AMEND) {\n            data['proposalComment'] = this.$widget.find('select[name=obsoletedByAmendment]').val();\n        }\n        if (newVal == STATUS_OBSOLETED_BY_MOT) {\n            data['proposalComment'] = this.$widget.find('select[name=obsoletedByMotion]').val();\n        }\n        if (newVal == STATUS_PROPOSED_MOVE_TO_OTHER_MOTION) {\n            if (this.$widget.find('select[name=movedToOtherMotion]').length > 0) {\n                data['proposalComment'] = this.$widget.find('select[name=movedToOtherMotion]').val();\n            }\n        }\n        if (newVal == STATUS_CUSTOM_STRING) {\n            data['proposalComment'] = this.$widget.find('input[name=statusCustomStr]').val();\n        }\n        if (newVal == STATUS_VOTE) {\n            data['votingStatus'] = this.$votingStatusInput.filter(':checked').val();\n        }\n        if (data.votingBlockId == 'NEW') {\n            data['votingBlockTitle'] = this.$widget.find('input[name=newBlockTitle]').val();\n        }\n        data['votingItemBlockId'] = {};\n        this.$widget.find('.votingItemBlockInput').each(function(i, el) {\n            const $select = $(el);\n            data['votingItemBlockId'][$select.data('voting-block') + \"\"] = $select.val();\n        });\n\n        if (this.$widget.find('input[name=setPublicExplanation]').prop('checked')) {\n            data['proposalExplanation'] = this.$widget.find('textarea[name=proposalExplanation]').val();\n        }\n\n        if (this.$widget.find('input[name=newVersion][value=current]').prop('checked')) {\n            data['version'] = this.version;\n        }\n        if (this.$widget.find('input[name=newVersion][value=new]').prop('checked')) {\n            data['version'] = null;\n        }\n\n        this.performCallWithReload(data);\n    }\n\n    private statusChanged() {\n        let newVal = parseInt(this.$widget.find('.statusForm input[type=radio]:checked').val() as string, 10);\n        this.$statusDetails.addClass('hidden');\n        this.$statusDetails.filter('.status_' + newVal.toString(10)).removeClass('hidden');\n        if (this.isNewVersion) {\n            this.$statusDetails.filter('.statusModifiedLink').addClass('hidden');\n        }\n        if (newVal === 0) {\n            this.$widget.addClass('noStatus');\n        } else {\n            this.$widget.removeClass('noStatus');\n        }\n    }\n\n    private initStatusSetter() {\n        this.$widget.on('change', '.statusForm input[type=radio]', (ev, data) => {\n            if (!$(ev.currentTarget).prop('checked')) {\n                return;\n            }\n            this.statusChanged();\n            if (data && data.init === true) {\n                return;\n            }\n            this.$widget.addClass('isChanged');\n        });\n        this.$widget.find('.statusForm input[type=radio]').trigger('change', {'init': true});\n\n        this.$widget.on('change keyup', 'input, textarea', (ev) => {\n            if ($(ev.currentTarget).parents('.proposalCommentForm').length > 0) { // The comment textfield\n                return;\n            }\n            this.$widget.addClass('isChanged');\n        });\n\n        this.$widget.on('change', '#obsoletedByAmendment', () => {\n            this.$widget.addClass('isChanged');\n        });\n        this.$widget.on('change', '#movedToOtherMotion', () => {\n            this.$widget.addClass('isChanged');\n        });\n\n        this.$widget.on('click', '.saving button', this.saveStatus.bind(this));\n\n        this.$widget.on('click', '.notifyProposer', () => {\n            this.$widget.find('.notifyProposerSection').removeClass('hidden');\n            this.$widget.find('.notifyProposerSection').scrollintoview({top_offset: -50});\n        });\n        this.$widget.on('click', '.setConfirmation', this.setPropserHasAccepted.bind(this));\n        this.$widget.on('click', '.sendAgain', () => {\n            this.$widget.find('.notifyProposerSection').removeClass('hidden');\n            this.$widget.find('.notifyProposerSection').scrollintoview({top_offset: -50});\n        });\n        this.$widget.on('click', 'button[name=notificationSubmit]', this.notifyProposer.bind(this));\n    }\n\n    private setVotingBlockSettings() {\n        this.$widget.find(\".votingItemBlockRow select\").on('change', (ev) => {\n            const $select = $(ev.currentTarget);\n            if ($select.val()) {\n                const selectedName = $select.find(\"option[value=\" + $select.val() + \"]\").data(\"group-name\");\n                this.$widget.find(\".votingItemBlockNameRow input\").val(selectedName);\n                this.$widget.find(\".votingItemBlockNameRow\").removeClass('hidden');\n            } else {\n                // Not grouped\n                this.$widget.find(\".votingItemBlockNameRow\").addClass('hidden');\n            }\n        });\n\n        if (this.$votingBlockId.val() === 'NEW') {\n            this.$widget.find('.newBlock').removeClass('hidden');\n            this.$widget.find('.votingItemBlockRow').addClass('hidden');\n            this.$widget.find(\".votingItemBlockNameRow\").addClass('hidden');\n        } else {\n            this.$widget.find('.newBlock').addClass('hidden');\n            this.$widget.find('.votingItemBlockRow').addClass('hidden');\n            this.$widget.find('.votingItemBlockRow' + this.$votingBlockId.val()).removeClass('hidden');\n            this.$widget.find(\".votingItemBlockRow\" + this.$votingBlockId.val() + \" select\").trigger('change', [{initialization: true}]); // to trigger group name listener\n        }\n    }\n\n    private initVotingBlock() {\n        this.$widget.on('change', '#votingBlockId', () => {\n            this.$widget.addClass('isChanged');\n            this.setVotingBlockSettings();\n        });\n        this.$widget.on('change', '.votingItemBlockRow select', (e, data) => {\n            if (data && data.initialization) {\n                return;\n            }\n            this.$widget.addClass('isChanged');\n        });\n        this.$widget.find('.newBlock').addClass('hidden');\n    }\n\n    private initExplanation() {\n        this.$widget.find('input[name=setPublicExplanation]').on('change', (ev) => {\n            if ($(ev.target).prop('checked')) {\n                this.$widget.find('section.publicExplanation').removeClass('hidden');\n            } else {\n                this.$widget.find('section.publicExplanation').addClass('hidden');\n            }\n        });\n        if (this.$widget.find('input[name=setPublicExplanation]').prop('checked')) {\n            this.$widget.find('section.publicExplanation').removeClass('hidden');\n        } else {\n            this.$widget.find('section.publicExplanation').addClass('hidden');\n        }\n    }\n\n    private commentsScrollBottom() {\n        let $commentList = this.$widget.find('.proposalCommentForm .commentList');\n        $commentList[0].scrollTop = $commentList[0].scrollHeight;\n    }\n\n    private doSaveComment() {\n        let $commentWidget = this.$widget.find('.proposalCommentForm'),\n            $commentList = $commentWidget.find('.commentList'),\n            text = $commentWidget.find('textarea').val();\n\n        if (text == '' || this.savingComment) {\n            return;\n        }\n\n        this.savingComment = true;\n\n        $.ajax({\n            url: this.saveUrl,\n            type: \"POST\",\n            data: JSON.stringify({\n                writeComment: text,\n                version: this.version,\n            }),\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            headers: {\"X-CSRF-Token\": this.csrf},\n            success: ev => {\n                if (ev.success) {\n                    let delHtml = '';\n                    if (ev.comment.delLink) {\n                        delHtml = '<button type=\"button\" data-url=\"' + ev.comment.delLink + '\" class=\"btn-link delComment\">';\n                        delHtml += '<span class=\"glyphicon glyphicon-trash\"></span></button>';\n                    }\n                    let $comment = $('<li class=\"comment\"><div class=\"header\"><div class=\"date\"></div>' + delHtml + '<div class=\"name\"></div></div><div class=\"comment\"></div></li>');\n                    $comment.find('.date').text(ev.comment.dateFormatted);\n                    $comment.find('.name').text(ev.comment.username);\n                    $comment.find('.comment').text(ev.comment.text);\n                    $comment.data('id', ev.comment.id);\n                    $commentList.append($comment);\n                    $commentWidget.find('textarea').val('');\n                    $commentList[0].scrollTop = $commentList[0].scrollHeight;\n\n                    this.$widget.data('proposal-id', ev.proposalId);\n                    this.version = ev.proposalId;\n                } else {\n                    alert('Could not save: ' + JSON.stringify(ev));\n                }\n                this.savingComment = false;\n            }\n        }).catch(() => {\n            alert('Could not save');\n            this.savingComment = false;\n        });\n    }\n\n    private delComment($comment: JQuery) {\n        $.post($comment.find(\".delComment\").data(\"url\"), {\n            \"_csrf\": this.csrf,\n            \"id\": $comment.data(\"id\"),\n        }, (ret) => {\n            if (ret['success']) {\n                $comment.remove();\n            } else {\n                alert(\"Error: \" + ret['error']);\n            }\n        });\n    }\n\n    private initCommentForm() {\n        this.$widget.on('click', '.proposalCommentForm button', () => {\n            this.doSaveComment();\n        });\n        this.$widget.on('click', '.btnMaximizeComments', () => {\n            if (this.$widget[0].classList.contains('maximizedComments')) {\n                this.$widget[0].classList.remove('maximizedComments');\n            } else {\n                this.$widget[0].classList.add('maximizedComments');\n            }\n        });\n        this.commentsScrollBottom();\n\n        this.$widget.on('keypress', '.proposalCommentForm textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                this.doSaveComment();\n            }\n        });\n\n        this.$widget.on('click', '.delComment', (ev) => {\n            this.delComment($(ev.currentTarget).parents(\".comment\").first());\n        });\n    }\n}\n"]}
{"version":3,"sources":["backend/ProposedProcedureOverview.ts"],"names":["ProposedProcedureOverview","$widget","this","interval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","onContentUpdated","ev","preventDefault","$","currentTarget","next","removeClass","prototype","each","i","el","scrollTop","scrollHeight","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","_this","openWriting","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","clone","text","html","insertBefore","window","setTimeout","skipReload","length","reload","console","log","get","updateUrl","success","$dateField","date","$proposalList","error","startInterval","setInterval","stopInterval","clearInterval","$updateWidget","$toggle","change","trigger","exports"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val();\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n        this.onContentUpdated();\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onContentUpdated() {\n        this.$widget.find(\".commentList\").each((i, el) => {\n            el.scrollTop = el.scrollHeight;\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('click', '.cancelWriting', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).parents('td').first().removeClass('writing');\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                alert(ret['error']);\n                return;\n            }\n            let $comment = $commentTd.find('.template').clone();\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('template');\n            $comment.insertBefore($commentTd.find('.template'));\n            window.setTimeout(() => {\n                $commentTd.find(\".commentList\")[0].scrollTop = $commentTd.find(\".commentList\")[0].scrollHeight;\n            }, 1);\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.comment.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload() {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active');\n            return;\n        }\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$dateField.text(data.date);\n            this.$proposalList.html(data.html);\n            this.onContentUpdated();\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload();\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}
{"version":3,"sources":["backend/ProposedProcedureOverview.js","backend/ProposedProcedureOverview.ts"],"names":["define","require","exports","ResponsibilitySetter_1","Object","defineProperty","value","ProposedProcedureOverview","constructor","$widget","this","plannedInterval","csrf","find","val","on","onVisibleChanged","bind","initComments","initUpdateWidget","onContentUpdated","ResponsibilitySetter","$","ev","preventDefault","currentTarget","next","removeClass","each","i","el","scrollTop","scrollHeight","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","openWriting","$btn","submitComment","originalEvent","$textarea","$td","addClass","focus","$commentTd","comment","$comment","clone","text","html","insertBefore","window","setTimeout","skipReload","length","reload","cb","console","log","ajax","type","url","updateUrl","success","$dateField","date","$proposalList","error","executeInterval","startInterval","stopInterval","clearTimeout","$updateWidget","$toggle","trigger"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":[null,"import { ResponsibilitySetter } from './ResponsibilitySetter';\n\ninterface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private plannedInterval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initUpdateWidget();\n        this.onContentUpdated();\n\n        new ResponsibilitySetter($('.proposedProcedureReloadHolder'));\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onContentUpdated() {\n        this.$widget.find(\".commentList\").each((i, el) => {\n            el.scrollTop = el.scrollHeight;\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('click', '.cancelWriting', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).parents('td').first().removeClass('writing');\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n            let $comment = $commentTd.find('.template').clone();\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('template');\n            $comment.insertBefore($commentTd.find('.template'));\n            window.setTimeout(() => {\n                $commentTd.find(\".commentList\")[0].scrollTop = $commentTd.find(\".commentList\")[0].scrollHeight;\n            }, 1);\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.respHolder.dropdown.open').length > 0) {\n            return true;\n        } else if (this.$widget.find('.comments.writing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload(cb) {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active');\n            cb();\n            return;\n        }\n        $.ajax({\n            type: \"GET\",\n            url: this.updateUrl,\n            success: (data: ReloadResult) => {\n                if (!data.success) {\n                    if (data.error) {\n                        alert(data.error);\n                    }\n                    return;\n                }\n                this.$dateField.text(data.date);\n                this.$proposalList.html(data.html);\n                this.onContentUpdated();\n\n                cb();\n            },\n            error: () => {\n                cb();\n            }\n        })\n    }\n\n    private executeInterval() {\n        this.reload(() => {\n            this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n        });\n    }\n\n    private startInterval() {\n        if (this.plannedInterval !== null) {\n            return;\n        }\n        this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.plannedInterval === null) {\n            return;\n        }\n        window.clearTimeout(this.plannedInterval);\n        this.plannedInterval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload(() => {});\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}
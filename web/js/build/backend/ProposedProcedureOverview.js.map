{"version":3,"sources":["backend/ProposedProcedureOverview.js","backend/ProposedProcedureOverview.ts"],"names":["define","require","exports","ResponsibilitySetter_1","Object","defineProperty","value","ProposedProcedureOverview","constructor","$widget","this","plannedInterval","csrf","find","val","on","onVisibleChanged","bind","initComments","initTagsEdit","initUpdateWidget","onContentUpdated","ResponsibilitySetter","$","ev","preventDefault","currentTarget","next","removeClass","each","i","el","scrollTop","scrollHeight","$checkbox","data","_csrf","visible","prop","id","parents","first","post","ret","alert","openWriting","$btn","submitComment","originalEvent","$textarea","$col","addClass","selectize","create","plugins","render","option_create","escape","__t","input","stopPropagation","saveUrl","select","ajax","url","type","JSON","stringify","tags","items","processData","contentType","dataType","headers","success","msg_error","bootbox","reload","catch","err","responseText","$td","focus","$commentTd","comment","$comment","clone","text","html","insertBefore","window","setTimeout","skipReload","length","cb","console","log","updateUrl","$dateField","date","$proposalList","error","executeInterval","startInterval","stopInterval","clearTimeout","$updateWidget","$toggle","trigger"],"mappings":"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","file":"ProposedProcedureOverview.js","sourcesContent":[null,"import { ResponsibilitySetter } from './ResponsibilitySetter';\n\ninterface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class ProposedProcedureOverview {\n    private csrf: string;\n    private updateUrl: string;\n    private $updateWidget: JQuery;\n    private $proposalList: JQuery;\n    private $dateField: JQuery;\n    private plannedInterval: number = null;\n\n    constructor(private $widget: JQuery) {\n        this.csrf = this.$widget.find('input[name=_csrf]').val() as string;\n        this.$widget.on('change', 'input[name=visible]', this.onVisibleChanged.bind(this));\n        this.initComments();\n        this.initTagsEdit();\n        this.initUpdateWidget();\n        this.onContentUpdated();\n\n        new ResponsibilitySetter($('.proposedProcedureReloadHolder'));\n\n        this.$widget.on('click', '.contactShow', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).next('.contactDetails').removeClass('hidden');\n        });\n    }\n\n    private onContentUpdated() {\n        this.$widget.find(\".commentList\").each((i, el) => {\n            el.scrollTop = el.scrollHeight;\n        });\n    }\n\n    private onVisibleChanged(ev) {\n        let $checkbox = $(ev.currentTarget);\n\n        let data = {\n            '_csrf': this.csrf,\n            'visible': ($checkbox.prop('checked') ? 1 : 0),\n            'id': $checkbox.parents('.item').first().data('id'),\n        };\n        $.post($checkbox.data('save-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n        });\n    }\n\n    private initComments() {\n        this.$widget.on('click', '.writingOpener', this.openWriting.bind(this));\n\n        this.$widget.on('click', '.submitComment', (ev) => {\n            ev.preventDefault();\n            let $btn = $(ev.currentTarget);\n            this.submitComment($btn.parents('td').first());\n        });\n\n        this.$widget.on('click', '.cancelWriting', (ev) => {\n            ev.preventDefault();\n            $(ev.currentTarget).parents('td').first().removeClass('writing');\n        });\n\n        this.$widget.on('keypress', 'textarea', (ev) => {\n            if (ev.originalEvent['metaKey'] && ev.originalEvent['keyCode'] === 13) {\n                let $textarea = $(ev.currentTarget);\n                this.submitComment($textarea.parents('td').first());\n            }\n        });\n    }\n\n    private initTagsEdit() {\n        this.$widget.on('click', '.tagEditOpener', (ev) => {\n            const $col = $(ev.currentTarget).parents(\".procedure\").first();\n            $col.find('.noTags, .tagNames').addClass('hidden');\n            $col.find('.tagsSelector').removeClass('hidden').addClass('editing');\n\n            const $tagsSelect = $col.find('.tagsSelector select') as any;\n            $tagsSelect.selectize({\n                create: true,\n                plugins: [\"remove_button\"],\n                render: {\n                    option_create: (data, escape) => {\n                        return '<div class=\"create\">' + __t('std', 'add_tag') + ': <strong>' + escape(data.input) + '</strong></div>';\n                    }\n                }\n            });\n        });\n\n        this.$widget.on('click', '.tagsSaver', (ev) => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            const $btn = $(ev.currentTarget),\n                saveUrl = $btn.data('save-url'),\n                $col = $btn.parents(\".procedure\").first(),\n                select = $col.find(\".tagsSelector select\")[0] as any;\n\n            $.ajax({\n                url: saveUrl,\n                type: \"POST\",\n                data: JSON.stringify({tags: select.selectize.items}),\n                processData: false,\n                contentType: \"application/json; charset=utf-8\",\n                dataType: \"json\",\n                headers: {\"X-CSRF-Token\": this.csrf},\n                success: data => {\n                    if (data.msg_error) {\n                        bootbox.alert(data.msg_error);\n                    } else {\n                        $col.find('.tagsSelector').addClass('hidden').removeClass('editing');\n                        this.reload(() => {});\n                    }\n                }\n            }).catch(function (err) {\n                alert(err.responseText);\n            })\n        });\n    }\n\n    private openWriting(ev) {\n        ev.preventDefault();\n        let $btn = $(ev.currentTarget),\n            $td = $btn.parents('td').first();\n\n        $td.addClass('writing');\n        $td.find('textarea').focus();\n    }\n\n    private submitComment($commentTd: JQuery) {\n        let data = {\n            '_csrf': this.csrf,\n            'comment': $commentTd.find('textarea').val(),\n            'id': $commentTd.parents('.item').data('id'),\n        };\n        $.post($commentTd.data('post-url'), data, (ret) => {\n            if (!ret['success']) {\n                if (ret['error']) {\n                    alert(ret['error']);\n                }\n                return;\n            }\n            let $comment = $commentTd.find('.template').clone();\n            $comment.find('.date').text(ret['date_str']);\n            $comment.find('.name').text(ret['user_str']);\n            $comment.find('.comment').html(ret['text']);\n            $comment.removeClass('template');\n            $comment.insertBefore($commentTd.find('.template'));\n            window.setTimeout(() => {\n                $commentTd.find(\".commentList\")[0].scrollTop = $commentTd.find(\".commentList\")[0].scrollHeight;\n            }, 1);\n\n            $commentTd.find('textarea').val('');\n            $commentTd.removeClass('writing');\n        });\n    }\n\n\n    private skipReload(): boolean {\n        if (this.$widget.find('.respHolder.dropdown.open').length > 0) {\n            return true;\n        } else if (this.$widget.find('.comments.writing').length > 0) {\n            return true;\n        } else if (this.$widget.find('.tagsSelector.editing').length > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private reload(cb) {\n        if (this.skipReload()) {\n            console.log('No reload, as comment writing is active');\n            cb();\n            return;\n        }\n        $.ajax({\n            type: \"GET\",\n            url: this.updateUrl,\n            success: (data: ReloadResult) => {\n                if (!data.success) {\n                    if (data.error) {\n                        alert(data.error);\n                    }\n                    return;\n                }\n                this.$dateField.text(data.date);\n                this.$proposalList.html(data.html);\n                this.onContentUpdated();\n\n                cb();\n            },\n            error: () => {\n                cb();\n            }\n        })\n    }\n\n    private executeInterval() {\n        this.reload(() => {\n            this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n        });\n    }\n\n    private startInterval() {\n        if (this.plannedInterval !== null) {\n            return;\n        }\n        this.plannedInterval = window.setTimeout(this.executeInterval.bind(this), 5000);\n    }\n\n    private stopInterval() {\n        if (this.plannedInterval === null) {\n            return;\n        }\n        window.clearTimeout(this.plannedInterval);\n        this.plannedInterval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.autoUpdateWidget');\n        this.$proposalList = this.$widget.find('.reloadContent');\n        this.$dateField = this.$widget.find('.currentDate .date');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        $toggle.on(\"change\", () => {\n            let active: boolean = $toggle.prop('checked');\n            if (active) {\n                this.reload(() => {});\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n    }\n}\n"]}
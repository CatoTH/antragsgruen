{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","constructor","$element","this","element","votingInitJson","getAttribute","createVueWidget","initVotingCreater","initVotingSorter","$","tooltip","vueEl","querySelector","voteSettingsUrl","voteCreateUrl","voteDownloadUrl","addableMotions","JSON","parse","pollUrl","initUserGroups","sortUrl","widget","Vue","createApp","template","data","isSorting","votingsJson","votings","userGroups","csrf","document","pollingId","onReloadedCbs","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","post","undefined","success","alert","message","catch","err","responseText","setVotingFromJson","setVotingFromObject","toggleSorting","setStatus","newStatus","op","status","saveSettings","title","answerTemplate","majorityType","quorumType","hasGeneralAbstention","votePolicy","maxVotesByGroup","resultsPublic","votesPublic","votingTime","assignedMotion","onSorted","sortedIds","votingIds","deleteVoting","createVoting","answers","specificQuestion","cb","window","setTimeout","scrollintoview","top_offset","removeItem","itemType","itemId","addIMotion","itemDefinition","addQuestion","question","setVotersToUserGroup","userIds","newUserGroup","addReloadedCb","reloadData","get","console","error","startPolling","setInterval","beforeUnmount","clearInterval","created","config","compilerOptions","whitespace","widgetComponent","mount","initPolicyWidget","$widget","$select","find","loadUrl","selectizeOption","loadThrottle","valueField","labelField","searchField","load","query","then","res","render","option_create","escape","__t","input","selectize","$policySelect","on","parseInt","val","removeClass","addClass","trigger","sortToggle","addEventListener","length","classList","remove","add","opener","form","getRadioListValue","selector","defaultValue","querySelectorAll","el","checked","recalcQuestionListener","recalcAnswerTypeListener","selectedAnswerType","ev","stopPropagation","preventDefault","assigned","map"],"mappings":"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","file":"VotingAdmin.js","sourcesContent":[null,"declare let Vue: any;\n\nconst POLICY_USER_GROUPS: number = 6;\n\nconst ANSWER_TEMPLATE_YES_NO_ABSTENTION: number = 0;\nconst ANSWER_TEMPLATE_YES_NO: number = 1;\nconst ANSWER_TEMPLATE_YES: number = 3;\nconst ANSWER_TEMPLATE_PRESENT: number = 2;\n\nexport class VotingAdmin {\n    private widget: any;\n    private widgetComponent: any;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n\n        const votingInitJson = this.element.getAttribute('data-voting');\n        this.createVueWidget(votingInitJson);\n        this.initVotingCreater();\n        this.initVotingSorter(votingInitJson);\n\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    private createVueWidget(votingInitJson) {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const voteDownloadUrl = this.element.getAttribute('data-url-vote-download');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const initUserGroups = JSON.parse(this.element.getAttribute('data-user-groups'));\n        const sortUrl = this.element.getAttribute('data-url-sort');\n\n        this.widget = Vue.createApp({\n            template: `<div class=\"adminVotings\">\n                <voting-sort-widget\n                    v-if=\"isSorting\"\n                    :votings=\"votings\"\n                    ref=\"voting-sort-widget\"\n                    @sorted=\"onSorted\"></voting-sort-widget>\n                <voting-admin-widget\n                    v-if=\"!isSorting\"\n                    v-for=\"voting in votings\"\n                    :key=\"voting.id\"\n                    :voting=\"voting\"\n                    :addableMotions=\"addableMotions\"\n                    :alreadyAddedItems=\"alreadyAddedItems\"\n                    :userGroups=\"userGroups\"\n                    :voteDownloadUrl=\"voteDownloadUrl\"\n                    @set-status=\"setStatus\"\n                    @save-settings=\"saveSettings\"\n                    @remove-item=\"removeItem\"\n                    @delete-voting=\"deleteVoting\"\n                    @add-imotion=\"addIMotion\"\n                    @add-question=\"addQuestion\"\n                    @set-voters-to-user-group=\"setVotersToUserGroup\"\n                    ref=\"voting-admin-widget\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    isSorting: false,\n                    votingsJson: null,\n                    votings: null,\n                    userGroups: initUserGroups,\n                    voteDownloadUrl,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null,\n                    onReloadedCbs: []\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                toggleSorting() {\n                    this.isSorting = !this.isSorting;\n                },\n                setStatus(votingBlockId, newStatus) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                    });\n                },\n                saveSettings(votingBlockId, title, answerTemplate, majorityType, quorumType, hasGeneralAbstention, votePolicy, maxVotesByGroup, resultsPublic, votesPublic, votingTime, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        answerTemplate,\n                        majorityType,\n                        quorumType,\n                        hasGeneralAbstention: (hasGeneralAbstention ? 1 : 0),\n                        votePolicy,\n                        maxVotesByGroup,\n                        resultsPublic,\n                        votesPublic,\n                        votingTime,\n                        assignedMotion,\n                    });\n                },\n                onSorted(sortedIds) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        votingIds: sortedIds\n                    };\n                    const widget = this;\n                    $.post(sortUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                        widget.isSorting = false;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (type, answers, title, specificQuestion, assignedMotion, majorityType, votePolicy, userGroups, resultsPublic, votesPublic) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        type,\n                        answers,\n                        title,\n                        specificQuestion,\n                        assignedMotion,\n                        majorityType,\n                        votePolicy,\n                        userGroups,\n                        resultsPublic,\n                        votesPublic\n                    };\n\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n                        widget.onReloadedCbs.forEach(cb => {\n                            cb(widget.votings);\n                        });\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addIMotion(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-imotion',\n                        itemDefinition\n                    });\n                },\n                addQuestion(votingBlockId, question) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-question',\n                        question\n                    });\n                },\n                setVotersToUserGroup(votingBlockId, userIds, newUserGroup) {\n                    this._performOperation(votingBlockId, {\n                        op: 'set-voters-to-user-group',\n                        userIds,\n                        newUserGroup\n                    });\n                },\n                addReloadedCb: function (cb) {\n                    this.onReloadedCbs.push(cb);\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                        widget.onReloadedCbs.forEach(cb => {\n                            cb(widget.votings);\n                        });\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeUnmount() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n\n        this.widget.config.compilerOptions.whitespace = 'condense';\n        window['__initVueComponents'](this.widget, 'voting');\n\n        this.widgetComponent = this.widget.mount(vueEl);\n\n        // Used by tests to control vue-select\n        window['votingAdminWidget'] = this.widgetComponent;\n    }\n\n    private initPolicyWidget() {\n        const $widget = $(this.element);\n        const $select: any = $widget.find('.userGroupSelect'),\n            loadUrl = $select.data('load-url');\n        let selectizeOption = {};\n        if (loadUrl) {\n            selectizeOption = Object.assign(selectizeOption, {\n                loadThrottle: null,\n                valueField: 'id',\n                labelField: 'label',\n                searchField: 'label',\n                load: function (query, cb) {\n                    if (!query) return cb();\n                    return $.get(loadUrl, {query}).then(res => {\n                        cb(res);\n                    });\n                },\n                render: {\n                    option_create: (data, escape) => {\n                        return '<div class=\"create\">' + __t('std', 'add_tag') + ': <strong>' + escape(data.input) + '</strong></div>';\n                    }\n                }\n            });\n        }\n        $select.find(\"select\").selectize(selectizeOption);\n\n        const $policySelect = $widget.find(\".policySelect\");\n        $policySelect.on(\"change\", () => {\n            if (parseInt($policySelect.val() as string, 10) === POLICY_USER_GROUPS) {\n                $select.removeClass(\"hidden\");\n            } else {\n                $select.addClass(\"hidden\");\n            }\n        }).trigger(\"change\");\n    }\n\n    private initVotingSorter(votingInitJson) {\n        const sortToggle = this.element.querySelector('.sortVotings');\n        sortToggle.addEventListener('click', () => {\n            this.widgetComponent.toggleSorting();\n        });\n        if (JSON.parse(votingInitJson).length > 1) {\n            sortToggle.classList.remove('hidden');\n        }\n\n        this.widgetComponent.addReloadedCb(data => {\n            if (data.length > 1) {\n                sortToggle.classList.remove('hidden');\n            } else {\n                sortToggle.classList.add('hidden');\n            }\n        });\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder'),\n            specificQuestion = this.element.querySelector('.specificQuestion'),\n            majorityType = this.element.querySelector('.majorityTypeSettings');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n\n        const getRadioListValue = (selector: string, defaultValue: string) => {\n            let val = defaultValue;\n            form.querySelectorAll(selector).forEach(el => {\n                const input = el as HTMLInputElement;\n                if (input.checked) {\n                    val = input.value;\n                }\n            });\n            return val;\n        };\n\n        const recalcQuestionListener = () => {\n            if (getRadioListValue('.votingType input', 'question') === 'question') {\n                specificQuestion.classList.remove('hidden');\n            } else {\n                specificQuestion.classList.add('hidden');\n            }\n        };\n        form.querySelectorAll('.votingType input').forEach(el => {\n            el.addEventListener('change', recalcQuestionListener);\n        });\n        recalcQuestionListener();\n\n        const recalcAnswerTypeListener = () => {\n            const selectedAnswerType = parseInt(getRadioListValue('.answerTemplate input', '0'), 10);\n            if (selectedAnswerType === ANSWER_TEMPLATE_PRESENT || selectedAnswerType === ANSWER_TEMPLATE_YES) {\n                majorityType.classList.add('hidden');\n            } else {\n                majorityType.classList.remove('hidden');\n\n            }\n        };\n        form.querySelectorAll('.answerTemplate input').forEach(el => {\n            el.addEventListener('change', recalcAnswerTypeListener);\n        });\n        recalcAnswerTypeListener();\n\n        this.initPolicyWidget();\n\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const type = getRadioListValue('.votingType input', 'question');\n            const answers = parseInt(getRadioListValue('.answerTemplate input', '0'), 10); // Default\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const specificQuestion = form.querySelector('.settingsQuestion') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            const majorityType = parseInt(getRadioListValue('.majorityTypeSettings input', '1'), 10); // Default: simple majority\n            const resultsPublic = parseInt(getRadioListValue('.resultsPublicSettings input', '1'), 10); // Default: everyone\n            const votesPublic = parseInt(getRadioListValue('.votesPublicSettings input', '0'), 10); // Default: nobody\n            const votePolicy = parseInt((form.querySelector('.policySelect') as HTMLSelectElement).value, 10);\n            let userGroups;\n            if (votePolicy === POLICY_USER_GROUPS) {\n                userGroups = (form.querySelector('.userGroupSelectList') as any).selectize.items.map(item => parseInt(item, 10));\n            } else {\n                userGroups = [];\n            }\n            this.widgetComponent.createVoting(type, answers, title.value, specificQuestion.value, assigned.value, majorityType, votePolicy, userGroups, resultsPublic, votesPublic);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}
{"version":3,"sources":["backend/VotingAdmin.js","backend/VotingAdmin.ts"],"names":["define","require","exports","Object","defineProperty","value","VotingAdmin","[object Object]","$element","this","element","createVueWidget","initVotingCreater","vueEl","querySelector","voteSettingsUrl","getAttribute","voteCreateUrl","addableMotions","JSON","parse","pollUrl","votingInitJson","widget","Vue","el","template","data","votingsJson","votings","csrf","document","pollingId","computed","alreadyAddedItems","motions","amendments","forEach","voting","items","item","type","push","id","methods","_performOperation","votingBlockId","additionalProps","postData","_csrf","assign","url","replace","$","post","undefined","success","alert","message","catch","err","responseText","newStatus","organizations","op","status","map","orga","members_present","title","majorityType","resultsPublic","votesPublic","assignedMotion","createVoting","window","setTimeout","scrollintoview","top_offset","itemType","itemId","itemDefinition","reloadData","get","setVotingFromJson","console","error","startPolling","setInterval","clearInterval","opener","form","addEventListener","classList","remove","add","ev","stopPropagation","preventDefault","assigned"],"mappings":"AAAAA,OAAO,CAAC,UAAW,YAAY,SAAUC,EAASC,GAC9C,aACAC,OAAOC,eAAeF,EAAS,aAAc,CAAEG,OAAO,IACtDH,EAAQI,iBAAc,ECC1BJ,EAAAI,YAAA,MAIIC,YAAYC,GACRC,KAAKC,QAAUF,EAAS,GACxBC,KAAKE,kBACLF,KAAKG,oBAGDL,kBACJ,MAAMM,EAAQJ,KAAKC,QAAQI,cAAc,gBACnCC,EAAkBN,KAAKC,QAAQM,aAAa,0BAC5CC,EAAgBR,KAAKC,QAAQM,aAAa,oBAC1CE,EAAiBC,KAAKC,MAAMX,KAAKC,QAAQM,aAAa,yBACtDK,EAAUZ,KAAKC,QAAQM,aAAa,iBACpCM,EAAiBb,KAAKC,QAAQM,aAAa,eAEjDP,KAAKc,OAAS,IAAIC,IAAI,CAClBC,GAAIZ,EACJa,SAAU,qqBAYVC,KAAI,KACO,CACHC,YAAa,KACbC,QAAS,KACTX,eAAAA,EACAY,KAAMC,SAASjB,cAAc,8BAA8BE,aAAa,WACxEgB,UAAW,OAGnBC,SAAU,CACNC,kBAAmB,WACf,MAAMC,EAAU,GACVC,EAAa,GAWnB,OAVA3B,KAAKoB,QAAQQ,SAAQC,IACjBA,EAAOC,MAAMF,SAAQG,IACC,WAAdA,EAAKC,MACLN,EAAQO,KAAKF,EAAKG,IAEJ,cAAdH,EAAKC,MACLL,EAAWM,KAAKF,EAAKG,UAI1B,CAACR,QAAAA,EAASC,WAAAA,KAGzBQ,QAAS,CACLC,kBAAmB,SAAUC,EAAeC,GACxC,IAAIC,EAAW,CACXC,MAAOxC,KAAKqB,MAEZiB,IACAC,EAAW7C,OAAO+C,OAAOF,EAAUD,IAEvC,MAAMxB,EAASd,KACT0C,EAAMpC,EAAgBqC,QAAQ,gBAAiBN,GACrDO,EAAEC,KAAKH,EAAKH,GAAU,SAAUrB,QACP4B,IAAjB5B,EAAK6B,SAA0B7B,EAAK6B,QAIxCjC,EAAOM,QAAUF,EAHb8B,MAAM9B,EAAK+B,YAIhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBtD,kBAAkBoB,GACVA,IAASlB,KAAKmB,cAGlBnB,KAAKoB,QAAUV,KAAKC,MAAMO,GAC1BlB,KAAKmB,YAAcD,IAEvBpB,oBAAoBoB,GAChBlB,KAAKoB,QAAUF,EACflB,KAAKmB,YAAc,MAEvBrB,UAAUuC,EAAegB,EAAWC,GAChCtD,KAAKoC,kBAAkBC,EAAe,CAClCkB,GAAI,gBACJC,OAAQH,EACRC,cAAeA,EAAcG,KAAIC,IAAiB,CAC9CxB,GAAIwB,EAAKxB,GACTyB,gBAAiBD,EAAKC,uBAIlC7D,aAAauC,EAAeuB,EAAOC,EAAcC,EAAeC,EAAaC,GACzEhE,KAAKoC,kBAAkBC,EAAe,CAClCkB,GAAI,gBACJK,MAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,YAAAA,EACAC,eAAAA,KAGRlE,aAAauC,GACTrC,KAAKoC,kBAAkBC,EAAe,CAClCkB,GAAI,mBAGZU,aAAc,SAAUL,EAAOI,GAC3B,IAAIzB,EAAW,CACXC,MAAOxC,KAAKqB,KACZuC,MAAAA,EACAI,eAAAA,GAEJ,MAAMlD,EAASd,KACf4C,EAAEC,KAAKrC,EAAe+B,GAAU,SAAUrB,QACjB4B,IAAjB5B,EAAK6B,SAA0B7B,EAAK6B,SAIxCjC,EAAOM,QAAUF,EAAc,QAE/BgD,OAAOC,YAAW,KACdvB,EAAE,UAAY1B,EAAqB,gBAAGkD,eAAe,CAACC,YAAa,QACpE,MAPCrB,MAAM9B,EAAK+B,YAQhBC,OAAM,SAAUC,GACfH,MAAMG,EAAIC,kBAGlBtD,WAAWuC,EAAeiC,EAAUC,GAChCvE,KAAKoC,kBAAkBC,EAAe,CAClCkB,GAAI,cACJe,SAAAA,EACAC,OAAAA,KAGRzE,QAAQuC,EAAemC,GACnBxE,KAAKoC,kBAAkBC,EAAe,CAClCkB,GAAI,WACJiB,eAAAA,KAGRC,WAAY,WACR,MAAM3D,EAASd,KACf4C,EAAE8B,IAAI9D,GAAS,SAAUM,GACrBJ,EAAO6D,kBAAkBzD,KAC1B,QAAQgC,OAAM,SAAUC,GACvByB,QAAQC,MAAM,0CAA2C1B,OAGjE2B,aAAc,WACV,MAAMhE,EAASd,KACfA,KAAKuB,UAAY2C,OAAOa,aAAY,WAChCjE,EAAO2D,eACR,OAGX3E,gBACIoE,OAAOc,cAAchF,KAAKuB,YAE9BzB,UACIE,KAAK2E,kBAAkB9D,GACvBb,KAAK8E,kBAKThF,oBACJ,MAAMmF,EAASjF,KAAKC,QAAQI,cAAc,uBACtC6E,EAAOlF,KAAKC,QAAQI,cAAc,uBACtC4E,EAAOE,iBAAiB,SAAS,KAC7BD,EAAKE,UAAUC,OAAO,UACtBJ,EAAOG,UAAUE,IAAI,aAEzBJ,EAAK7E,cAAc,QAAQ8E,iBAAiB,UAAWI,IACnDA,EAAGC,kBACHD,EAAGE,iBACH,MAAM7B,EAAQsB,EAAK7E,cAAc,kBAC3BqF,EAAWR,EAAK7E,cAAc,2BACpCL,KAAKc,OAAOmD,aAAaL,EAAMhE,MAAO8F,EAAS9F,OAE/CsF,EAAKE,UAAUE,IAAI,UACnBL,EAAOG,UAAUC,OAAO","file":"VotingAdmin.js","sourcesContent":[null,"import { VueConstructor } from 'vue';\n\ndeclare var Vue: VueConstructor;\n\nexport class VotingAdmin {\n    private widget;\n    private element: HTMLElement;\n\n    constructor($element: JQuery) {\n        this.element = $element[0];\n        this.createVueWidget();\n        this.initVotingCreater();\n    }\n\n    private createVueWidget() {\n        const vueEl = this.element.querySelector(\".votingAdmin\");\n        const voteSettingsUrl = this.element.getAttribute('data-url-vote-settings');\n        const voteCreateUrl = this.element.getAttribute('data-vote-create');\n        const addableMotions = JSON.parse(this.element.getAttribute('data-addable-motions'));\n        const pollUrl = this.element.getAttribute('data-url-poll');\n        const votingInitJson = this.element.getAttribute('data-voting');\n\n        this.widget = new Vue({\n            el: vueEl,\n            template: `<div class=\"adminVotings\">\n                <voting-admin-widget v-for=\"voting in votings\"\n                                     :voting=\"voting\"\n                                     :addableMotions=\"addableMotions\"\n                                     :alreadyAddedItems=\"alreadyAddedItems\"\n                                     @set-status=\"setStatus\"\n                                     @save-settings=\"saveSettings\"\n                                     @remove-item=\"removeItem\"\n                                     @delete-voting=\"deleteVoting\"\n                                     @add-item=\"addItem\"\n                ></voting-admin-widget>\n            </div>`,\n            data() {\n                return {\n                    votingsJson: null,\n                    votings: null,\n                    addableMotions,\n                    csrf: document.querySelector('head meta[name=csrf-token]').getAttribute('content'),\n                    pollingId: null\n                };\n            },\n            computed: {\n                alreadyAddedItems: function () {\n                    const motions = [];\n                    const amendments = [];\n                    this.votings.forEach(voting => {\n                        voting.items.forEach(item => {\n                            if (item.type === 'motion') {\n                                motions.push(item.id);\n                            }\n                            if (item.type === 'amendment') {\n                                amendments.push(item.id);\n                            }\n                        });\n                    });\n                    return {motions, amendments};\n                }\n            },\n            methods: {\n                _performOperation: function (votingBlockId, additionalProps) {\n                    let postData = {\n                        _csrf: this.csrf,\n                    };\n                    if (additionalProps) {\n                        postData = Object.assign(postData, additionalProps);\n                    }\n                    const widget = this;\n                    const url = voteSettingsUrl.replace(/VOTINGBLOCKID/, votingBlockId);\n                    $.post(url, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data;\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                setVotingFromJson(data) {\n                    if (data === this.votingsJson) {\n                        return;\n                    }\n                    this.votings = JSON.parse(data);\n                    this.votingsJson = data;\n                },\n                setVotingFromObject(data) {\n                    this.votings = data;\n                    this.votingsJson = null;\n                },\n                setStatus(votingBlockId, newStatus, organizations) {\n                    this._performOperation(votingBlockId, {\n                        op: 'update-status',\n                        status: newStatus,\n                        organizations: organizations.map(orga => { return {\n                            id: orga.id,\n                            members_present: orga.members_present,\n                        }}),\n                    });\n                },\n                saveSettings(votingBlockId, title, majorityType, resultsPublic, votesPublic, assignedMotion) {\n                    this._performOperation(votingBlockId, {\n                        op: 'save-settings',\n                        title,\n                        majorityType,\n                        resultsPublic,\n                        votesPublic,\n                        assignedMotion,\n                    });\n                },\n                deleteVoting(votingBlockId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'delete-voting',\n                    });\n                },\n                createVoting: function (title, assignedMotion) {\n                    let postData = {\n                        _csrf: this.csrf,\n                        title,\n                        assignedMotion\n                    };\n                    const widget = this;\n                    $.post(voteCreateUrl, postData, function (data) {\n                        if (data.success !== undefined && !data.success) {\n                            alert(data.message);\n                            return;\n                        }\n                        widget.votings = data['votings'];\n\n                        window.setTimeout(() => {\n                            $(\"#voting\" + data['created_voting']).scrollintoview({top_offset: -100});\n                        }, 200);\n                    }).catch(function (err) {\n                        alert(err.responseText);\n                    });\n                },\n                removeItem(votingBlockId, itemType, itemId) {\n                    this._performOperation(votingBlockId, {\n                        op: 'remove-item',\n                        itemType,\n                        itemId\n                    });\n                },\n                addItem(votingBlockId, itemDefinition) {\n                    this._performOperation(votingBlockId, {\n                        op: 'add-item',\n                        itemDefinition\n                    });\n                },\n                reloadData: function () {\n                    const widget = this;\n                    $.get(pollUrl, function (data) {\n                        widget.setVotingFromJson(data);\n                    }, 'text').catch(function (err) {\n                        console.error(\"Could not load voting data from backend\", err);\n                    });\n                },\n                startPolling: function () {\n                    const widget = this;\n                    this.pollingId = window.setInterval(function () {\n                        widget.reloadData();\n                    }, 3000);\n                }\n            },\n            beforeDestroy() {\n                window.clearInterval(this.pollingId)\n            },\n            created() {\n                this.setVotingFromJson(votingInitJson);\n                this.startPolling()\n            }\n        });\n    }\n\n    private initVotingCreater() {\n        const opener = this.element.querySelector('.createVotingOpener'),\n            form = this.element.querySelector('.createVotingHolder');\n        opener.addEventListener('click', () => {\n            form.classList.remove('hidden');\n            opener.classList.add('hidden');\n        });\n        form.querySelector('form').addEventListener('submit', (ev) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const title = form.querySelector('.settingsTitle') as HTMLInputElement;\n            const assigned = form.querySelector('.settingsAssignedMotion') as HTMLSelectElement;\n            this.widget.createVoting(title.value, assigned.value);\n\n            form.classList.add('hidden');\n            opener.classList.remove('hidden');\n        });\n    }\n}\n"]}